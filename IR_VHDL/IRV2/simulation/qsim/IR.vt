// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2018 16:57:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    IR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IR_vlg_sample_tst(
	clk,
	instruccion,
	WIR,
	sampler_tx
);
input  clk;
input [25:0] instruccion;
input  WIR;
output sampler_tx;

reg sample;
time current_time;
always @(clk or instruccion or WIR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module IR_vlg_check_tst (
	const,
	opcode,
	rs,
	rt,
	sampler_rx
);
input [13:0] const;
input [3:0] opcode;
input [3:0] rs;
input [3:0] rt;
input sampler_rx;

reg [13:0] const_expected;
reg [3:0] opcode_expected;
reg [3:0] rs_expected;
reg [3:0] rt_expected;

reg [13:0] const_prev;
reg [3:0] opcode_prev;
reg [3:0] rs_prev;
reg [3:0] rt_prev;

reg [13:0] const_expected_prev;
reg [3:0] opcode_expected_prev;
reg [3:0] rs_expected_prev;
reg [3:0] rt_expected_prev;

reg [13:0] last_const_exp;
reg [3:0] last_opcode_exp;
reg [3:0] last_rs_exp;
reg [3:0] last_rt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	const_prev = const;
	opcode_prev = opcode;
	rs_prev = rs;
	rt_prev = rt;
end

// update expected /o prevs

always @(trigger)
begin
	const_expected_prev = const_expected;
	opcode_expected_prev = opcode_expected;
	rs_expected_prev = rs_expected;
	rt_expected_prev = rt_expected;
end


// expected opcode[ 3 ]
initial
begin
	opcode_expected[3] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 
// expected rs[ 3 ]
initial
begin
	rs_expected[3] = 1'bX;
end 
// expected rs[ 2 ]
initial
begin
	rs_expected[2] = 1'bX;
end 
// expected rs[ 1 ]
initial
begin
	rs_expected[1] = 1'bX;
end 
// expected rs[ 0 ]
initial
begin
	rs_expected[0] = 1'bX;
end 
// expected rt[ 3 ]
initial
begin
	rt_expected[3] = 1'bX;
end 
// expected rt[ 2 ]
initial
begin
	rt_expected[2] = 1'bX;
end 
// expected rt[ 1 ]
initial
begin
	rt_expected[1] = 1'bX;
end 
// expected rt[ 0 ]
initial
begin
	rt_expected[0] = 1'bX;
end 
// expected \const [ 13 ]
initial
begin
	const_expected[13] = 1'bX;
end 
// expected \const [ 12 ]
initial
begin
	const_expected[12] = 1'bX;
end 
// expected \const [ 11 ]
initial
begin
	const_expected[11] = 1'bX;
end 
// expected \const [ 10 ]
initial
begin
	const_expected[10] = 1'bX;
end 
// expected \const [ 9 ]
initial
begin
	const_expected[9] = 1'bX;
end 
// expected \const [ 8 ]
initial
begin
	const_expected[8] = 1'bX;
end 
// expected \const [ 7 ]
initial
begin
	const_expected[7] = 1'bX;
end 
// expected \const [ 6 ]
initial
begin
	const_expected[6] = 1'bX;
end 
// expected \const [ 5 ]
initial
begin
	const_expected[5] = 1'bX;
end 
// expected \const [ 4 ]
initial
begin
	const_expected[4] = 1'bX;
end 
// expected \const [ 3 ]
initial
begin
	const_expected[3] = 1'bX;
end 
// expected \const [ 2 ]
initial
begin
	const_expected[2] = 1'bX;
end 
// expected \const [ 1 ]
initial
begin
	const_expected[1] = 1'bX;
end 
// expected \const [ 0 ]
initial
begin
	const_expected[0] = 1'bX;
end 
// generate trigger
always @(const_expected or const or opcode_expected or opcode or rs_expected or rs or rt_expected or rt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected const = %b | expected opcode = %b | expected rs = %b | expected rt = %b | ",const_expected_prev,opcode_expected_prev,rs_expected_prev,rt_expected_prev);
	$display("| real const = %b | real opcode = %b | real rs = %b | real rt = %b | ",const_prev,opcode_prev,rs_prev,rt_prev);
`endif
	if (
		( const_expected_prev[0] !== 1'bx ) && ( const_prev[0] !== const_expected_prev[0] )
		&& ((const_expected_prev[0] !== last_const_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[0] = const_expected_prev[0];
	end
	if (
		( const_expected_prev[1] !== 1'bx ) && ( const_prev[1] !== const_expected_prev[1] )
		&& ((const_expected_prev[1] !== last_const_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[1] = const_expected_prev[1];
	end
	if (
		( const_expected_prev[2] !== 1'bx ) && ( const_prev[2] !== const_expected_prev[2] )
		&& ((const_expected_prev[2] !== last_const_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[2] = const_expected_prev[2];
	end
	if (
		( const_expected_prev[3] !== 1'bx ) && ( const_prev[3] !== const_expected_prev[3] )
		&& ((const_expected_prev[3] !== last_const_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[3] = const_expected_prev[3];
	end
	if (
		( const_expected_prev[4] !== 1'bx ) && ( const_prev[4] !== const_expected_prev[4] )
		&& ((const_expected_prev[4] !== last_const_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[4] = const_expected_prev[4];
	end
	if (
		( const_expected_prev[5] !== 1'bx ) && ( const_prev[5] !== const_expected_prev[5] )
		&& ((const_expected_prev[5] !== last_const_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[5] = const_expected_prev[5];
	end
	if (
		( const_expected_prev[6] !== 1'bx ) && ( const_prev[6] !== const_expected_prev[6] )
		&& ((const_expected_prev[6] !== last_const_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[6] = const_expected_prev[6];
	end
	if (
		( const_expected_prev[7] !== 1'bx ) && ( const_prev[7] !== const_expected_prev[7] )
		&& ((const_expected_prev[7] !== last_const_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[7] = const_expected_prev[7];
	end
	if (
		( const_expected_prev[8] !== 1'bx ) && ( const_prev[8] !== const_expected_prev[8] )
		&& ((const_expected_prev[8] !== last_const_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[8] = const_expected_prev[8];
	end
	if (
		( const_expected_prev[9] !== 1'bx ) && ( const_prev[9] !== const_expected_prev[9] )
		&& ((const_expected_prev[9] !== last_const_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[9] = const_expected_prev[9];
	end
	if (
		( const_expected_prev[10] !== 1'bx ) && ( const_prev[10] !== const_expected_prev[10] )
		&& ((const_expected_prev[10] !== last_const_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[10] = const_expected_prev[10];
	end
	if (
		( const_expected_prev[11] !== 1'bx ) && ( const_prev[11] !== const_expected_prev[11] )
		&& ((const_expected_prev[11] !== last_const_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[11] = const_expected_prev[11];
	end
	if (
		( const_expected_prev[12] !== 1'bx ) && ( const_prev[12] !== const_expected_prev[12] )
		&& ((const_expected_prev[12] !== last_const_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[12] = const_expected_prev[12];
	end
	if (
		( const_expected_prev[13] !== 1'bx ) && ( const_prev[13] !== const_expected_prev[13] )
		&& ((const_expected_prev[13] !== last_const_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const_expected_prev);
		$display ("     Real value = %b", const_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const_exp[13] = const_expected_prev[13];
	end
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( opcode_expected_prev[3] !== 1'bx ) && ( opcode_prev[3] !== opcode_expected_prev[3] )
		&& ((opcode_expected_prev[3] !== last_opcode_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_opcode_exp[3] = opcode_expected_prev[3];
	end
	if (
		( rs_expected_prev[0] !== 1'bx ) && ( rs_prev[0] !== rs_expected_prev[0] )
		&& ((rs_expected_prev[0] !== last_rs_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_expected_prev);
		$display ("     Real value = %b", rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_exp[0] = rs_expected_prev[0];
	end
	if (
		( rs_expected_prev[1] !== 1'bx ) && ( rs_prev[1] !== rs_expected_prev[1] )
		&& ((rs_expected_prev[1] !== last_rs_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_expected_prev);
		$display ("     Real value = %b", rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_exp[1] = rs_expected_prev[1];
	end
	if (
		( rs_expected_prev[2] !== 1'bx ) && ( rs_prev[2] !== rs_expected_prev[2] )
		&& ((rs_expected_prev[2] !== last_rs_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_expected_prev);
		$display ("     Real value = %b", rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_exp[2] = rs_expected_prev[2];
	end
	if (
		( rs_expected_prev[3] !== 1'bx ) && ( rs_prev[3] !== rs_expected_prev[3] )
		&& ((rs_expected_prev[3] !== last_rs_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_expected_prev);
		$display ("     Real value = %b", rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rs_exp[3] = rs_expected_prev[3];
	end
	if (
		( rt_expected_prev[0] !== 1'bx ) && ( rt_prev[0] !== rt_expected_prev[0] )
		&& ((rt_expected_prev[0] !== last_rt_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_expected_prev);
		$display ("     Real value = %b", rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_exp[0] = rt_expected_prev[0];
	end
	if (
		( rt_expected_prev[1] !== 1'bx ) && ( rt_prev[1] !== rt_expected_prev[1] )
		&& ((rt_expected_prev[1] !== last_rt_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_expected_prev);
		$display ("     Real value = %b", rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_exp[1] = rt_expected_prev[1];
	end
	if (
		( rt_expected_prev[2] !== 1'bx ) && ( rt_prev[2] !== rt_expected_prev[2] )
		&& ((rt_expected_prev[2] !== last_rt_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_expected_prev);
		$display ("     Real value = %b", rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_exp[2] = rt_expected_prev[2];
	end
	if (
		( rt_expected_prev[3] !== 1'bx ) && ( rt_prev[3] !== rt_expected_prev[3] )
		&& ((rt_expected_prev[3] !== last_rt_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rt_expected_prev);
		$display ("     Real value = %b", rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rt_exp[3] = rt_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module IR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [25:0] instruccion;
reg WIR;
// wires                                               
wire [13:0] const;
wire [3:0] opcode;
wire [3:0] rs;
wire [3:0] rt;

wire sampler;                             

// assign statements (if any)                          
IR i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.\const (const),
	.instruccion(instruccion),
	.opcode(opcode),
	.rs(rs),
	.rt(rt),
	.WIR(WIR)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// instruccion[ 25 ]
initial
begin
	instruccion[25] = 1'b0;
end 
// instruccion[ 24 ]
initial
begin
	instruccion[24] = 1'b0;
end 
// instruccion[ 23 ]
initial
begin
	instruccion[23] = 1'b0;
end 
// instruccion[ 22 ]
initial
begin
	instruccion[22] = 1'b0;
end 
// instruccion[ 21 ]
initial
begin
	instruccion[21] = 1'b0;
end 
// instruccion[ 20 ]
initial
begin
	instruccion[20] = 1'b0;
end 
// instruccion[ 19 ]
initial
begin
	instruccion[19] = 1'b0;
end 
// instruccion[ 18 ]
initial
begin
	instruccion[18] = 1'b0;
end 
// instruccion[ 17 ]
initial
begin
	instruccion[17] = 1'b0;
end 
// instruccion[ 16 ]
initial
begin
	instruccion[16] = 1'b0;
end 
// instruccion[ 15 ]
initial
begin
	instruccion[15] = 1'b0;
end 
// instruccion[ 14 ]
initial
begin
	instruccion[14] = 1'b1;
end 
// instruccion[ 13 ]
initial
begin
	instruccion[13] = 1'b0;
end 
// instruccion[ 12 ]
initial
begin
	instruccion[12] = 1'b0;
end 
// instruccion[ 11 ]
initial
begin
	instruccion[11] = 1'b0;
end 
// instruccion[ 10 ]
initial
begin
	instruccion[10] = 1'b0;
end 
// instruccion[ 9 ]
initial
begin
	instruccion[9] = 1'b0;
end 
// instruccion[ 8 ]
initial
begin
	instruccion[8] = 1'b0;
end 
// instruccion[ 7 ]
initial
begin
	instruccion[7] = 1'b0;
end 
// instruccion[ 6 ]
initial
begin
	instruccion[6] = 1'b0;
end 
// instruccion[ 5 ]
initial
begin
	instruccion[5] = 1'b0;
end 
// instruccion[ 4 ]
initial
begin
	instruccion[4] = 1'b0;
end 
// instruccion[ 3 ]
initial
begin
	instruccion[3] = 1'b0;
end 
// instruccion[ 2 ]
initial
begin
	instruccion[2] = 1'b0;
end 
// instruccion[ 1 ]
initial
begin
	instruccion[1] = 1'b0;
end 
// instruccion[ 0 ]
initial
begin
	instruccion[0] = 1'b0;
end 

// WIR
initial
begin
	WIR = 1'b1;
end 

IR_vlg_sample_tst tb_sample (
	.clk(clk),
	.instruccion(instruccion),
	.WIR(WIR),
	.sampler_tx(sampler)
);

IR_vlg_check_tst tb_out(
	.const(const),
	.opcode(opcode),
	.rs(rs),
	.rt(rt),
	.sampler_rx(sampler)
);
endmodule

