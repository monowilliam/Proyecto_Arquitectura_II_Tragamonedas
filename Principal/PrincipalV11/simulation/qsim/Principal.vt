// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2018 16:37:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Principal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Principal_vlg_sample_tst(
	clk,
	EnterButton,
	switches0,
	switches1,
	switches2,
	sampler_tx
);
input  clk;
input  EnterButton;
input [3:0] switches0;
input [3:0] switches1;
input [1:0] switches2;
output sampler_tx;

reg sample;
time current_time;
always @(clk or EnterButton or switches0 or switches1 or switches2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Principal_vlg_check_tst (
	ledsR,
	ledsV,
	nclk,
	PrintaddressIns,
	PrintAluOut,
	PrintDatosRF,
	Printins,
	PrintIO,
	PrintMemOut,
	Printopcode,
	Printrs,
	Printrt,
	PrintSA,
	PrintSB,
	PrinttoA,
	PrinttoB,
	PrintWRF,
	SS0,
	SS1,
	SS2,
	SS3,
	sampler_rx
);
input [9:0] ledsR;
input [7:0] ledsV;
input  nclk;
input [7:0] PrintaddressIns;
input [13:0] PrintAluOut;
input [13:0] PrintDatosRF;
input [25:0] Printins;
input [1:0] PrintIO;
input [13:0] PrintMemOut;
input [3:0] Printopcode;
input [3:0] Printrs;
input [3:0] Printrt;
input [13:0] PrintSA;
input [13:0] PrintSB;
input [13:0] PrinttoA;
input [13:0] PrinttoB;
input  PrintWRF;
input [6:0] SS0;
input [6:0] SS1;
input [6:0] SS2;
input [6:0] SS3;
input sampler_rx;

reg [9:0] ledsR_expected;
reg [7:0] ledsV_expected;
reg  nclk_expected;
reg [7:0] PrintaddressIns_expected;
reg [13:0] PrintAluOut_expected;
reg [13:0] PrintDatosRF_expected;
reg [25:0] Printins_expected;
reg [1:0] PrintIO_expected;
reg [13:0] PrintMemOut_expected;
reg [3:0] Printopcode_expected;
reg [3:0] Printrs_expected;
reg [3:0] Printrt_expected;
reg [13:0] PrintSA_expected;
reg [13:0] PrintSB_expected;
reg [13:0] PrinttoA_expected;
reg [13:0] PrinttoB_expected;
reg  PrintWRF_expected;
reg [6:0] SS0_expected;
reg [6:0] SS1_expected;
reg [6:0] SS2_expected;
reg [6:0] SS3_expected;

reg [9:0] ledsR_prev;
reg [7:0] ledsV_prev;
reg  nclk_prev;
reg [7:0] PrintaddressIns_prev;
reg [13:0] PrintAluOut_prev;
reg [13:0] PrintDatosRF_prev;
reg [25:0] Printins_prev;
reg [1:0] PrintIO_prev;
reg [13:0] PrintMemOut_prev;
reg [3:0] Printopcode_prev;
reg [3:0] Printrs_prev;
reg [3:0] Printrt_prev;
reg [13:0] PrintSA_prev;
reg [13:0] PrintSB_prev;
reg [13:0] PrinttoA_prev;
reg [13:0] PrinttoB_prev;
reg  PrintWRF_prev;
reg [6:0] SS0_prev;
reg [6:0] SS1_prev;
reg [6:0] SS2_prev;
reg [6:0] SS3_prev;

reg [9:0] ledsR_expected_prev;
reg [7:0] ledsV_expected_prev;
reg  nclk_expected_prev;
reg [7:0] PrintaddressIns_expected_prev;
reg [13:0] PrintAluOut_expected_prev;
reg [13:0] PrintDatosRF_expected_prev;
reg [25:0] Printins_expected_prev;
reg [1:0] PrintIO_expected_prev;
reg [13:0] PrintMemOut_expected_prev;
reg [3:0] Printopcode_expected_prev;
reg [3:0] Printrs_expected_prev;
reg [3:0] Printrt_expected_prev;
reg [13:0] PrintSA_expected_prev;
reg [13:0] PrintSB_expected_prev;
reg [13:0] PrinttoA_expected_prev;
reg [13:0] PrinttoB_expected_prev;
reg  PrintWRF_expected_prev;
reg [6:0] SS0_expected_prev;
reg [6:0] SS1_expected_prev;
reg [6:0] SS2_expected_prev;
reg [6:0] SS3_expected_prev;

reg [9:0] last_ledsR_exp;
reg [7:0] last_ledsV_exp;
reg  last_nclk_exp;
reg [7:0] last_PrintaddressIns_exp;
reg [13:0] last_PrintAluOut_exp;
reg [13:0] last_PrintDatosRF_exp;
reg [25:0] last_Printins_exp;
reg [1:0] last_PrintIO_exp;
reg [13:0] last_PrintMemOut_exp;
reg [3:0] last_Printopcode_exp;
reg [3:0] last_Printrs_exp;
reg [3:0] last_Printrt_exp;
reg [13:0] last_PrintSA_exp;
reg [13:0] last_PrintSB_exp;
reg [13:0] last_PrinttoA_exp;
reg [13:0] last_PrinttoB_exp;
reg  last_PrintWRF_exp;
reg [6:0] last_SS0_exp;
reg [6:0] last_SS1_exp;
reg [6:0] last_SS2_exp;
reg [6:0] last_SS3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:21] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 21'b1;
end

// update real /o prevs

always @(trigger)
begin
	ledsR_prev = ledsR;
	ledsV_prev = ledsV;
	nclk_prev = nclk;
	PrintaddressIns_prev = PrintaddressIns;
	PrintAluOut_prev = PrintAluOut;
	PrintDatosRF_prev = PrintDatosRF;
	Printins_prev = Printins;
	PrintIO_prev = PrintIO;
	PrintMemOut_prev = PrintMemOut;
	Printopcode_prev = Printopcode;
	Printrs_prev = Printrs;
	Printrt_prev = Printrt;
	PrintSA_prev = PrintSA;
	PrintSB_prev = PrintSB;
	PrinttoA_prev = PrinttoA;
	PrinttoB_prev = PrinttoB;
	PrintWRF_prev = PrintWRF;
	SS0_prev = SS0;
	SS1_prev = SS1;
	SS2_prev = SS2;
	SS3_prev = SS3;
end

// update expected /o prevs

always @(trigger)
begin
	ledsR_expected_prev = ledsR_expected;
	ledsV_expected_prev = ledsV_expected;
	nclk_expected_prev = nclk_expected;
	PrintaddressIns_expected_prev = PrintaddressIns_expected;
	PrintAluOut_expected_prev = PrintAluOut_expected;
	PrintDatosRF_expected_prev = PrintDatosRF_expected;
	Printins_expected_prev = Printins_expected;
	PrintIO_expected_prev = PrintIO_expected;
	PrintMemOut_expected_prev = PrintMemOut_expected;
	Printopcode_expected_prev = Printopcode_expected;
	Printrs_expected_prev = Printrs_expected;
	Printrt_expected_prev = Printrt_expected;
	PrintSA_expected_prev = PrintSA_expected;
	PrintSB_expected_prev = PrintSB_expected;
	PrinttoA_expected_prev = PrinttoA_expected;
	PrinttoB_expected_prev = PrinttoB_expected;
	PrintWRF_expected_prev = PrintWRF_expected;
	SS0_expected_prev = SS0_expected;
	SS1_expected_prev = SS1_expected;
	SS2_expected_prev = SS2_expected;
	SS3_expected_prev = SS3_expected;
end


// expected ledsR[ 9 ]
initial
begin
	ledsR_expected[9] = 1'bX;
end 
// expected ledsR[ 8 ]
initial
begin
	ledsR_expected[8] = 1'bX;
end 
// expected ledsR[ 7 ]
initial
begin
	ledsR_expected[7] = 1'bX;
end 
// expected ledsR[ 6 ]
initial
begin
	ledsR_expected[6] = 1'bX;
end 
// expected ledsR[ 5 ]
initial
begin
	ledsR_expected[5] = 1'bX;
end 
// expected ledsR[ 4 ]
initial
begin
	ledsR_expected[4] = 1'bX;
end 
// expected ledsR[ 3 ]
initial
begin
	ledsR_expected[3] = 1'bX;
end 
// expected ledsR[ 2 ]
initial
begin
	ledsR_expected[2] = 1'bX;
end 
// expected ledsR[ 1 ]
initial
begin
	ledsR_expected[1] = 1'bX;
end 
// expected ledsR[ 0 ]
initial
begin
	ledsR_expected[0] = 1'bX;
end 
// expected ledsV[ 7 ]
initial
begin
	ledsV_expected[7] = 1'bX;
end 
// expected ledsV[ 6 ]
initial
begin
	ledsV_expected[6] = 1'bX;
end 
// expected ledsV[ 5 ]
initial
begin
	ledsV_expected[5] = 1'bX;
end 
// expected ledsV[ 4 ]
initial
begin
	ledsV_expected[4] = 1'bX;
end 
// expected ledsV[ 3 ]
initial
begin
	ledsV_expected[3] = 1'bX;
end 
// expected ledsV[ 2 ]
initial
begin
	ledsV_expected[2] = 1'bX;
end 
// expected ledsV[ 1 ]
initial
begin
	ledsV_expected[1] = 1'bX;
end 
// expected ledsV[ 0 ]
initial
begin
	ledsV_expected[0] = 1'bX;
end 

// expected nclk
initial
begin
	nclk_expected = 1'bX;
end 
// expected PrintaddressIns[ 7 ]
initial
begin
	PrintaddressIns_expected[7] = 1'bX;
end 
// expected PrintaddressIns[ 6 ]
initial
begin
	PrintaddressIns_expected[6] = 1'bX;
end 
// expected PrintaddressIns[ 5 ]
initial
begin
	PrintaddressIns_expected[5] = 1'bX;
end 
// expected PrintaddressIns[ 4 ]
initial
begin
	PrintaddressIns_expected[4] = 1'bX;
end 
// expected PrintaddressIns[ 3 ]
initial
begin
	PrintaddressIns_expected[3] = 1'bX;
end 
// expected PrintaddressIns[ 2 ]
initial
begin
	PrintaddressIns_expected[2] = 1'bX;
end 
// expected PrintaddressIns[ 1 ]
initial
begin
	PrintaddressIns_expected[1] = 1'bX;
end 
// expected PrintaddressIns[ 0 ]
initial
begin
	PrintaddressIns_expected[0] = 1'bX;
end 
// expected PrintAluOut[ 13 ]
initial
begin
	PrintAluOut_expected[13] = 1'bX;
end 
// expected PrintAluOut[ 12 ]
initial
begin
	PrintAluOut_expected[12] = 1'bX;
end 
// expected PrintAluOut[ 11 ]
initial
begin
	PrintAluOut_expected[11] = 1'bX;
end 
// expected PrintAluOut[ 10 ]
initial
begin
	PrintAluOut_expected[10] = 1'bX;
end 
// expected PrintAluOut[ 9 ]
initial
begin
	PrintAluOut_expected[9] = 1'bX;
end 
// expected PrintAluOut[ 8 ]
initial
begin
	PrintAluOut_expected[8] = 1'bX;
end 
// expected PrintAluOut[ 7 ]
initial
begin
	PrintAluOut_expected[7] = 1'bX;
end 
// expected PrintAluOut[ 6 ]
initial
begin
	PrintAluOut_expected[6] = 1'bX;
end 
// expected PrintAluOut[ 5 ]
initial
begin
	PrintAluOut_expected[5] = 1'bX;
end 
// expected PrintAluOut[ 4 ]
initial
begin
	PrintAluOut_expected[4] = 1'bX;
end 
// expected PrintAluOut[ 3 ]
initial
begin
	PrintAluOut_expected[3] = 1'bX;
end 
// expected PrintAluOut[ 2 ]
initial
begin
	PrintAluOut_expected[2] = 1'bX;
end 
// expected PrintAluOut[ 1 ]
initial
begin
	PrintAluOut_expected[1] = 1'bX;
end 
// expected PrintAluOut[ 0 ]
initial
begin
	PrintAluOut_expected[0] = 1'bX;
end 
// expected PrintDatosRF[ 13 ]
initial
begin
	PrintDatosRF_expected[13] = 1'bX;
end 
// expected PrintDatosRF[ 12 ]
initial
begin
	PrintDatosRF_expected[12] = 1'bX;
end 
// expected PrintDatosRF[ 11 ]
initial
begin
	PrintDatosRF_expected[11] = 1'bX;
end 
// expected PrintDatosRF[ 10 ]
initial
begin
	PrintDatosRF_expected[10] = 1'bX;
end 
// expected PrintDatosRF[ 9 ]
initial
begin
	PrintDatosRF_expected[9] = 1'bX;
end 
// expected PrintDatosRF[ 8 ]
initial
begin
	PrintDatosRF_expected[8] = 1'bX;
end 
// expected PrintDatosRF[ 7 ]
initial
begin
	PrintDatosRF_expected[7] = 1'bX;
end 
// expected PrintDatosRF[ 6 ]
initial
begin
	PrintDatosRF_expected[6] = 1'bX;
end 
// expected PrintDatosRF[ 5 ]
initial
begin
	PrintDatosRF_expected[5] = 1'bX;
end 
// expected PrintDatosRF[ 4 ]
initial
begin
	PrintDatosRF_expected[4] = 1'bX;
end 
// expected PrintDatosRF[ 3 ]
initial
begin
	PrintDatosRF_expected[3] = 1'bX;
end 
// expected PrintDatosRF[ 2 ]
initial
begin
	PrintDatosRF_expected[2] = 1'bX;
end 
// expected PrintDatosRF[ 1 ]
initial
begin
	PrintDatosRF_expected[1] = 1'bX;
end 
// expected PrintDatosRF[ 0 ]
initial
begin
	PrintDatosRF_expected[0] = 1'bX;
end 
// expected Printins[ 25 ]
initial
begin
	Printins_expected[25] = 1'bX;
end 
// expected Printins[ 24 ]
initial
begin
	Printins_expected[24] = 1'bX;
end 
// expected Printins[ 23 ]
initial
begin
	Printins_expected[23] = 1'bX;
end 
// expected Printins[ 22 ]
initial
begin
	Printins_expected[22] = 1'bX;
end 
// expected Printins[ 21 ]
initial
begin
	Printins_expected[21] = 1'bX;
end 
// expected Printins[ 20 ]
initial
begin
	Printins_expected[20] = 1'bX;
end 
// expected Printins[ 19 ]
initial
begin
	Printins_expected[19] = 1'bX;
end 
// expected Printins[ 18 ]
initial
begin
	Printins_expected[18] = 1'bX;
end 
// expected Printins[ 17 ]
initial
begin
	Printins_expected[17] = 1'bX;
end 
// expected Printins[ 16 ]
initial
begin
	Printins_expected[16] = 1'bX;
end 
// expected Printins[ 15 ]
initial
begin
	Printins_expected[15] = 1'bX;
end 
// expected Printins[ 14 ]
initial
begin
	Printins_expected[14] = 1'bX;
end 
// expected Printins[ 13 ]
initial
begin
	Printins_expected[13] = 1'bX;
end 
// expected Printins[ 12 ]
initial
begin
	Printins_expected[12] = 1'bX;
end 
// expected Printins[ 11 ]
initial
begin
	Printins_expected[11] = 1'bX;
end 
// expected Printins[ 10 ]
initial
begin
	Printins_expected[10] = 1'bX;
end 
// expected Printins[ 9 ]
initial
begin
	Printins_expected[9] = 1'bX;
end 
// expected Printins[ 8 ]
initial
begin
	Printins_expected[8] = 1'bX;
end 
// expected Printins[ 7 ]
initial
begin
	Printins_expected[7] = 1'bX;
end 
// expected Printins[ 6 ]
initial
begin
	Printins_expected[6] = 1'bX;
end 
// expected Printins[ 5 ]
initial
begin
	Printins_expected[5] = 1'bX;
end 
// expected Printins[ 4 ]
initial
begin
	Printins_expected[4] = 1'bX;
end 
// expected Printins[ 3 ]
initial
begin
	Printins_expected[3] = 1'bX;
end 
// expected Printins[ 2 ]
initial
begin
	Printins_expected[2] = 1'bX;
end 
// expected Printins[ 1 ]
initial
begin
	Printins_expected[1] = 1'bX;
end 
// expected Printins[ 0 ]
initial
begin
	Printins_expected[0] = 1'bX;
end 
// expected PrintIO[ 1 ]
initial
begin
	PrintIO_expected[1] = 1'bX;
end 
// expected PrintIO[ 0 ]
initial
begin
	PrintIO_expected[0] = 1'bX;
end 
// expected PrintMemOut[ 13 ]
initial
begin
	PrintMemOut_expected[13] = 1'bX;
end 
// expected PrintMemOut[ 12 ]
initial
begin
	PrintMemOut_expected[12] = 1'bX;
end 
// expected PrintMemOut[ 11 ]
initial
begin
	PrintMemOut_expected[11] = 1'bX;
end 
// expected PrintMemOut[ 10 ]
initial
begin
	PrintMemOut_expected[10] = 1'bX;
end 
// expected PrintMemOut[ 9 ]
initial
begin
	PrintMemOut_expected[9] = 1'bX;
end 
// expected PrintMemOut[ 8 ]
initial
begin
	PrintMemOut_expected[8] = 1'bX;
end 
// expected PrintMemOut[ 7 ]
initial
begin
	PrintMemOut_expected[7] = 1'bX;
end 
// expected PrintMemOut[ 6 ]
initial
begin
	PrintMemOut_expected[6] = 1'bX;
end 
// expected PrintMemOut[ 5 ]
initial
begin
	PrintMemOut_expected[5] = 1'bX;
end 
// expected PrintMemOut[ 4 ]
initial
begin
	PrintMemOut_expected[4] = 1'bX;
end 
// expected PrintMemOut[ 3 ]
initial
begin
	PrintMemOut_expected[3] = 1'bX;
end 
// expected PrintMemOut[ 2 ]
initial
begin
	PrintMemOut_expected[2] = 1'bX;
end 
// expected PrintMemOut[ 1 ]
initial
begin
	PrintMemOut_expected[1] = 1'bX;
end 
// expected PrintMemOut[ 0 ]
initial
begin
	PrintMemOut_expected[0] = 1'bX;
end 
// expected Printopcode[ 3 ]
initial
begin
	Printopcode_expected[3] = 1'bX;
end 
// expected Printopcode[ 2 ]
initial
begin
	Printopcode_expected[2] = 1'bX;
end 
// expected Printopcode[ 1 ]
initial
begin
	Printopcode_expected[1] = 1'bX;
end 
// expected Printopcode[ 0 ]
initial
begin
	Printopcode_expected[0] = 1'bX;
end 
// expected Printrs[ 3 ]
initial
begin
	Printrs_expected[3] = 1'bX;
end 
// expected Printrs[ 2 ]
initial
begin
	Printrs_expected[2] = 1'bX;
end 
// expected Printrs[ 1 ]
initial
begin
	Printrs_expected[1] = 1'bX;
end 
// expected Printrs[ 0 ]
initial
begin
	Printrs_expected[0] = 1'bX;
end 
// expected Printrt[ 3 ]
initial
begin
	Printrt_expected[3] = 1'bX;
end 
// expected Printrt[ 2 ]
initial
begin
	Printrt_expected[2] = 1'bX;
end 
// expected Printrt[ 1 ]
initial
begin
	Printrt_expected[1] = 1'bX;
end 
// expected Printrt[ 0 ]
initial
begin
	Printrt_expected[0] = 1'bX;
end 
// expected PrintSA[ 13 ]
initial
begin
	PrintSA_expected[13] = 1'bX;
end 
// expected PrintSA[ 12 ]
initial
begin
	PrintSA_expected[12] = 1'bX;
end 
// expected PrintSA[ 11 ]
initial
begin
	PrintSA_expected[11] = 1'bX;
end 
// expected PrintSA[ 10 ]
initial
begin
	PrintSA_expected[10] = 1'bX;
end 
// expected PrintSA[ 9 ]
initial
begin
	PrintSA_expected[9] = 1'bX;
end 
// expected PrintSA[ 8 ]
initial
begin
	PrintSA_expected[8] = 1'bX;
end 
// expected PrintSA[ 7 ]
initial
begin
	PrintSA_expected[7] = 1'bX;
end 
// expected PrintSA[ 6 ]
initial
begin
	PrintSA_expected[6] = 1'bX;
end 
// expected PrintSA[ 5 ]
initial
begin
	PrintSA_expected[5] = 1'bX;
end 
// expected PrintSA[ 4 ]
initial
begin
	PrintSA_expected[4] = 1'bX;
end 
// expected PrintSA[ 3 ]
initial
begin
	PrintSA_expected[3] = 1'bX;
end 
// expected PrintSA[ 2 ]
initial
begin
	PrintSA_expected[2] = 1'bX;
end 
// expected PrintSA[ 1 ]
initial
begin
	PrintSA_expected[1] = 1'bX;
end 
// expected PrintSA[ 0 ]
initial
begin
	PrintSA_expected[0] = 1'bX;
end 
// expected PrintSB[ 13 ]
initial
begin
	PrintSB_expected[13] = 1'bX;
end 
// expected PrintSB[ 12 ]
initial
begin
	PrintSB_expected[12] = 1'bX;
end 
// expected PrintSB[ 11 ]
initial
begin
	PrintSB_expected[11] = 1'bX;
end 
// expected PrintSB[ 10 ]
initial
begin
	PrintSB_expected[10] = 1'bX;
end 
// expected PrintSB[ 9 ]
initial
begin
	PrintSB_expected[9] = 1'bX;
end 
// expected PrintSB[ 8 ]
initial
begin
	PrintSB_expected[8] = 1'bX;
end 
// expected PrintSB[ 7 ]
initial
begin
	PrintSB_expected[7] = 1'bX;
end 
// expected PrintSB[ 6 ]
initial
begin
	PrintSB_expected[6] = 1'bX;
end 
// expected PrintSB[ 5 ]
initial
begin
	PrintSB_expected[5] = 1'bX;
end 
// expected PrintSB[ 4 ]
initial
begin
	PrintSB_expected[4] = 1'bX;
end 
// expected PrintSB[ 3 ]
initial
begin
	PrintSB_expected[3] = 1'bX;
end 
// expected PrintSB[ 2 ]
initial
begin
	PrintSB_expected[2] = 1'bX;
end 
// expected PrintSB[ 1 ]
initial
begin
	PrintSB_expected[1] = 1'bX;
end 
// expected PrintSB[ 0 ]
initial
begin
	PrintSB_expected[0] = 1'bX;
end 
// expected PrinttoA[ 13 ]
initial
begin
	PrinttoA_expected[13] = 1'bX;
end 
// expected PrinttoA[ 12 ]
initial
begin
	PrinttoA_expected[12] = 1'bX;
end 
// expected PrinttoA[ 11 ]
initial
begin
	PrinttoA_expected[11] = 1'bX;
end 
// expected PrinttoA[ 10 ]
initial
begin
	PrinttoA_expected[10] = 1'bX;
end 
// expected PrinttoA[ 9 ]
initial
begin
	PrinttoA_expected[9] = 1'bX;
end 
// expected PrinttoA[ 8 ]
initial
begin
	PrinttoA_expected[8] = 1'bX;
end 
// expected PrinttoA[ 7 ]
initial
begin
	PrinttoA_expected[7] = 1'bX;
end 
// expected PrinttoA[ 6 ]
initial
begin
	PrinttoA_expected[6] = 1'bX;
end 
// expected PrinttoA[ 5 ]
initial
begin
	PrinttoA_expected[5] = 1'bX;
end 
// expected PrinttoA[ 4 ]
initial
begin
	PrinttoA_expected[4] = 1'bX;
end 
// expected PrinttoA[ 3 ]
initial
begin
	PrinttoA_expected[3] = 1'bX;
end 
// expected PrinttoA[ 2 ]
initial
begin
	PrinttoA_expected[2] = 1'bX;
end 
// expected PrinttoA[ 1 ]
initial
begin
	PrinttoA_expected[1] = 1'bX;
end 
// expected PrinttoA[ 0 ]
initial
begin
	PrinttoA_expected[0] = 1'bX;
end 
// expected PrinttoB[ 13 ]
initial
begin
	PrinttoB_expected[13] = 1'bX;
end 
// expected PrinttoB[ 12 ]
initial
begin
	PrinttoB_expected[12] = 1'bX;
end 
// expected PrinttoB[ 11 ]
initial
begin
	PrinttoB_expected[11] = 1'bX;
end 
// expected PrinttoB[ 10 ]
initial
begin
	PrinttoB_expected[10] = 1'bX;
end 
// expected PrinttoB[ 9 ]
initial
begin
	PrinttoB_expected[9] = 1'bX;
end 
// expected PrinttoB[ 8 ]
initial
begin
	PrinttoB_expected[8] = 1'bX;
end 
// expected PrinttoB[ 7 ]
initial
begin
	PrinttoB_expected[7] = 1'bX;
end 
// expected PrinttoB[ 6 ]
initial
begin
	PrinttoB_expected[6] = 1'bX;
end 
// expected PrinttoB[ 5 ]
initial
begin
	PrinttoB_expected[5] = 1'bX;
end 
// expected PrinttoB[ 4 ]
initial
begin
	PrinttoB_expected[4] = 1'bX;
end 
// expected PrinttoB[ 3 ]
initial
begin
	PrinttoB_expected[3] = 1'bX;
end 
// expected PrinttoB[ 2 ]
initial
begin
	PrinttoB_expected[2] = 1'bX;
end 
// expected PrinttoB[ 1 ]
initial
begin
	PrinttoB_expected[1] = 1'bX;
end 
// expected PrinttoB[ 0 ]
initial
begin
	PrinttoB_expected[0] = 1'bX;
end 

// expected PrintWRF
initial
begin
	PrintWRF_expected = 1'bX;
end 
// expected SS0[ 6 ]
initial
begin
	SS0_expected[6] = 1'bX;
end 
// expected SS0[ 5 ]
initial
begin
	SS0_expected[5] = 1'bX;
end 
// expected SS0[ 4 ]
initial
begin
	SS0_expected[4] = 1'bX;
end 
// expected SS0[ 3 ]
initial
begin
	SS0_expected[3] = 1'bX;
end 
// expected SS0[ 2 ]
initial
begin
	SS0_expected[2] = 1'bX;
end 
// expected SS0[ 1 ]
initial
begin
	SS0_expected[1] = 1'bX;
end 
// expected SS0[ 0 ]
initial
begin
	SS0_expected[0] = 1'bX;
end 
// expected SS1[ 6 ]
initial
begin
	SS1_expected[6] = 1'bX;
end 
// expected SS1[ 5 ]
initial
begin
	SS1_expected[5] = 1'bX;
end 
// expected SS1[ 4 ]
initial
begin
	SS1_expected[4] = 1'bX;
end 
// expected SS1[ 3 ]
initial
begin
	SS1_expected[3] = 1'bX;
end 
// expected SS1[ 2 ]
initial
begin
	SS1_expected[2] = 1'bX;
end 
// expected SS1[ 1 ]
initial
begin
	SS1_expected[1] = 1'bX;
end 
// expected SS1[ 0 ]
initial
begin
	SS1_expected[0] = 1'bX;
end 
// expected SS2[ 6 ]
initial
begin
	SS2_expected[6] = 1'bX;
end 
// expected SS2[ 5 ]
initial
begin
	SS2_expected[5] = 1'bX;
end 
// expected SS2[ 4 ]
initial
begin
	SS2_expected[4] = 1'bX;
end 
// expected SS2[ 3 ]
initial
begin
	SS2_expected[3] = 1'bX;
end 
// expected SS2[ 2 ]
initial
begin
	SS2_expected[2] = 1'bX;
end 
// expected SS2[ 1 ]
initial
begin
	SS2_expected[1] = 1'bX;
end 
// expected SS2[ 0 ]
initial
begin
	SS2_expected[0] = 1'bX;
end 
// expected SS3[ 6 ]
initial
begin
	SS3_expected[6] = 1'bX;
end 
// expected SS3[ 5 ]
initial
begin
	SS3_expected[5] = 1'bX;
end 
// expected SS3[ 4 ]
initial
begin
	SS3_expected[4] = 1'bX;
end 
// expected SS3[ 3 ]
initial
begin
	SS3_expected[3] = 1'bX;
end 
// expected SS3[ 2 ]
initial
begin
	SS3_expected[2] = 1'bX;
end 
// expected SS3[ 1 ]
initial
begin
	SS3_expected[1] = 1'bX;
end 
// expected SS3[ 0 ]
initial
begin
	SS3_expected[0] = 1'bX;
end 
// generate trigger
always @(ledsR_expected or ledsR or ledsV_expected or ledsV or nclk_expected or nclk or PrintaddressIns_expected or PrintaddressIns or PrintAluOut_expected or PrintAluOut or PrintDatosRF_expected or PrintDatosRF or Printins_expected or Printins or PrintIO_expected or PrintIO or PrintMemOut_expected or PrintMemOut or Printopcode_expected or Printopcode or Printrs_expected or Printrs or Printrt_expected or Printrt or PrintSA_expected or PrintSA or PrintSB_expected or PrintSB or PrinttoA_expected or PrinttoA or PrinttoB_expected or PrinttoB or PrintWRF_expected or PrintWRF or SS0_expected or SS0 or SS1_expected or SS1 or SS2_expected or SS2 or SS3_expected or SS3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ledsR = %b | expected ledsV = %b | expected nclk = %b | expected PrintaddressIns = %b | expected PrintAluOut = %b | expected PrintDatosRF = %b | expected Printins = %b | expected PrintIO = %b | expected PrintMemOut = %b | expected Printopcode = %b | expected Printrs = %b | expected Printrt = %b | expected PrintSA = %b | expected PrintSB = %b | expected PrinttoA = %b | expected PrinttoB = %b | expected PrintWRF = %b | expected SS0 = %b | expected SS1 = %b | expected SS2 = %b | expected SS3 = %b | ",ledsR_expected_prev,ledsV_expected_prev,nclk_expected_prev,PrintaddressIns_expected_prev,PrintAluOut_expected_prev,PrintDatosRF_expected_prev,Printins_expected_prev,PrintIO_expected_prev,PrintMemOut_expected_prev,Printopcode_expected_prev,Printrs_expected_prev,Printrt_expected_prev,PrintSA_expected_prev,PrintSB_expected_prev,PrinttoA_expected_prev,PrinttoB_expected_prev,PrintWRF_expected_prev,SS0_expected_prev,SS1_expected_prev,SS2_expected_prev,SS3_expected_prev);
	$display("| real ledsR = %b | real ledsV = %b | real nclk = %b | real PrintaddressIns = %b | real PrintAluOut = %b | real PrintDatosRF = %b | real Printins = %b | real PrintIO = %b | real PrintMemOut = %b | real Printopcode = %b | real Printrs = %b | real Printrt = %b | real PrintSA = %b | real PrintSB = %b | real PrinttoA = %b | real PrinttoB = %b | real PrintWRF = %b | real SS0 = %b | real SS1 = %b | real SS2 = %b | real SS3 = %b | ",ledsR_prev,ledsV_prev,nclk_prev,PrintaddressIns_prev,PrintAluOut_prev,PrintDatosRF_prev,Printins_prev,PrintIO_prev,PrintMemOut_prev,Printopcode_prev,Printrs_prev,Printrt_prev,PrintSA_prev,PrintSB_prev,PrinttoA_prev,PrinttoB_prev,PrintWRF_prev,SS0_prev,SS1_prev,SS2_prev,SS3_prev);
`endif
	if (
		( ledsR_expected_prev[0] !== 1'bx ) && ( ledsR_prev[0] !== ledsR_expected_prev[0] )
		&& ((ledsR_expected_prev[0] !== last_ledsR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledsR_exp[0] = ledsR_expected_prev[0];
	end
	if (
		( ledsR_expected_prev[1] !== 1'bx ) && ( ledsR_prev[1] !== ledsR_expected_prev[1] )
		&& ((ledsR_expected_prev[1] !== last_ledsR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledsR_exp[1] = ledsR_expected_prev[1];
	end
	if (
		( ledsR_expected_prev[2] !== 1'bx ) && ( ledsR_prev[2] !== ledsR_expected_prev[2] )
		&& ((ledsR_expected_prev[2] !== last_ledsR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledsR_exp[2] = ledsR_expected_prev[2];
	end
	if (
		( ledsR_expected_prev[3] !== 1'bx ) && ( ledsR_prev[3] !== ledsR_expected_prev[3] )
		&& ((ledsR_expected_prev[3] !== last_ledsR_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledsR_exp[3] = ledsR_expected_prev[3];
	end
	if (
		( ledsR_expected_prev[4] !== 1'bx ) && ( ledsR_prev[4] !== ledsR_expected_prev[4] )
		&& ((ledsR_expected_prev[4] !== last_ledsR_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledsR_exp[4] = ledsR_expected_prev[4];
	end
	if (
		( ledsR_expected_prev[5] !== 1'bx ) && ( ledsR_prev[5] !== ledsR_expected_prev[5] )
		&& ((ledsR_expected_prev[5] !== last_ledsR_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledsR_exp[5] = ledsR_expected_prev[5];
	end
	if (
		( ledsR_expected_prev[6] !== 1'bx ) && ( ledsR_prev[6] !== ledsR_expected_prev[6] )
		&& ((ledsR_expected_prev[6] !== last_ledsR_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledsR_exp[6] = ledsR_expected_prev[6];
	end
	if (
		( ledsR_expected_prev[7] !== 1'bx ) && ( ledsR_prev[7] !== ledsR_expected_prev[7] )
		&& ((ledsR_expected_prev[7] !== last_ledsR_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledsR_exp[7] = ledsR_expected_prev[7];
	end
	if (
		( ledsR_expected_prev[8] !== 1'bx ) && ( ledsR_prev[8] !== ledsR_expected_prev[8] )
		&& ((ledsR_expected_prev[8] !== last_ledsR_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledsR_exp[8] = ledsR_expected_prev[8];
	end
	if (
		( ledsR_expected_prev[9] !== 1'bx ) && ( ledsR_prev[9] !== ledsR_expected_prev[9] )
		&& ((ledsR_expected_prev[9] !== last_ledsR_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledsR_exp[9] = ledsR_expected_prev[9];
	end
	if (
		( ledsV_expected_prev[0] !== 1'bx ) && ( ledsV_prev[0] !== ledsV_expected_prev[0] )
		&& ((ledsV_expected_prev[0] !== last_ledsV_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsV_exp[0] = ledsV_expected_prev[0];
	end
	if (
		( ledsV_expected_prev[1] !== 1'bx ) && ( ledsV_prev[1] !== ledsV_expected_prev[1] )
		&& ((ledsV_expected_prev[1] !== last_ledsV_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsV_exp[1] = ledsV_expected_prev[1];
	end
	if (
		( ledsV_expected_prev[2] !== 1'bx ) && ( ledsV_prev[2] !== ledsV_expected_prev[2] )
		&& ((ledsV_expected_prev[2] !== last_ledsV_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsV_exp[2] = ledsV_expected_prev[2];
	end
	if (
		( ledsV_expected_prev[3] !== 1'bx ) && ( ledsV_prev[3] !== ledsV_expected_prev[3] )
		&& ((ledsV_expected_prev[3] !== last_ledsV_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsV_exp[3] = ledsV_expected_prev[3];
	end
	if (
		( ledsV_expected_prev[4] !== 1'bx ) && ( ledsV_prev[4] !== ledsV_expected_prev[4] )
		&& ((ledsV_expected_prev[4] !== last_ledsV_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsV_exp[4] = ledsV_expected_prev[4];
	end
	if (
		( ledsV_expected_prev[5] !== 1'bx ) && ( ledsV_prev[5] !== ledsV_expected_prev[5] )
		&& ((ledsV_expected_prev[5] !== last_ledsV_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsV_exp[5] = ledsV_expected_prev[5];
	end
	if (
		( ledsV_expected_prev[6] !== 1'bx ) && ( ledsV_prev[6] !== ledsV_expected_prev[6] )
		&& ((ledsV_expected_prev[6] !== last_ledsV_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsV_exp[6] = ledsV_expected_prev[6];
	end
	if (
		( ledsV_expected_prev[7] !== 1'bx ) && ( ledsV_prev[7] !== ledsV_expected_prev[7] )
		&& ((ledsV_expected_prev[7] !== last_ledsV_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsV_exp[7] = ledsV_expected_prev[7];
	end
	if (
		( nclk_expected_prev !== 1'bx ) && ( nclk_prev !== nclk_expected_prev )
		&& ((nclk_expected_prev !== last_nclk_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nclk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nclk_expected_prev);
		$display ("     Real value = %b", nclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_nclk_exp = nclk_expected_prev;
	end
	if (
		( PrintaddressIns_expected_prev[0] !== 1'bx ) && ( PrintaddressIns_prev[0] !== PrintaddressIns_expected_prev[0] )
		&& ((PrintaddressIns_expected_prev[0] !== last_PrintaddressIns_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintaddressIns[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintaddressIns_expected_prev);
		$display ("     Real value = %b", PrintaddressIns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PrintaddressIns_exp[0] = PrintaddressIns_expected_prev[0];
	end
	if (
		( PrintaddressIns_expected_prev[1] !== 1'bx ) && ( PrintaddressIns_prev[1] !== PrintaddressIns_expected_prev[1] )
		&& ((PrintaddressIns_expected_prev[1] !== last_PrintaddressIns_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintaddressIns[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintaddressIns_expected_prev);
		$display ("     Real value = %b", PrintaddressIns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PrintaddressIns_exp[1] = PrintaddressIns_expected_prev[1];
	end
	if (
		( PrintaddressIns_expected_prev[2] !== 1'bx ) && ( PrintaddressIns_prev[2] !== PrintaddressIns_expected_prev[2] )
		&& ((PrintaddressIns_expected_prev[2] !== last_PrintaddressIns_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintaddressIns[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintaddressIns_expected_prev);
		$display ("     Real value = %b", PrintaddressIns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PrintaddressIns_exp[2] = PrintaddressIns_expected_prev[2];
	end
	if (
		( PrintaddressIns_expected_prev[3] !== 1'bx ) && ( PrintaddressIns_prev[3] !== PrintaddressIns_expected_prev[3] )
		&& ((PrintaddressIns_expected_prev[3] !== last_PrintaddressIns_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintaddressIns[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintaddressIns_expected_prev);
		$display ("     Real value = %b", PrintaddressIns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PrintaddressIns_exp[3] = PrintaddressIns_expected_prev[3];
	end
	if (
		( PrintaddressIns_expected_prev[4] !== 1'bx ) && ( PrintaddressIns_prev[4] !== PrintaddressIns_expected_prev[4] )
		&& ((PrintaddressIns_expected_prev[4] !== last_PrintaddressIns_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintaddressIns[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintaddressIns_expected_prev);
		$display ("     Real value = %b", PrintaddressIns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PrintaddressIns_exp[4] = PrintaddressIns_expected_prev[4];
	end
	if (
		( PrintaddressIns_expected_prev[5] !== 1'bx ) && ( PrintaddressIns_prev[5] !== PrintaddressIns_expected_prev[5] )
		&& ((PrintaddressIns_expected_prev[5] !== last_PrintaddressIns_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintaddressIns[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintaddressIns_expected_prev);
		$display ("     Real value = %b", PrintaddressIns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PrintaddressIns_exp[5] = PrintaddressIns_expected_prev[5];
	end
	if (
		( PrintaddressIns_expected_prev[6] !== 1'bx ) && ( PrintaddressIns_prev[6] !== PrintaddressIns_expected_prev[6] )
		&& ((PrintaddressIns_expected_prev[6] !== last_PrintaddressIns_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintaddressIns[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintaddressIns_expected_prev);
		$display ("     Real value = %b", PrintaddressIns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PrintaddressIns_exp[6] = PrintaddressIns_expected_prev[6];
	end
	if (
		( PrintaddressIns_expected_prev[7] !== 1'bx ) && ( PrintaddressIns_prev[7] !== PrintaddressIns_expected_prev[7] )
		&& ((PrintaddressIns_expected_prev[7] !== last_PrintaddressIns_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintaddressIns[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintaddressIns_expected_prev);
		$display ("     Real value = %b", PrintaddressIns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PrintaddressIns_exp[7] = PrintaddressIns_expected_prev[7];
	end
	if (
		( PrintAluOut_expected_prev[0] !== 1'bx ) && ( PrintAluOut_prev[0] !== PrintAluOut_expected_prev[0] )
		&& ((PrintAluOut_expected_prev[0] !== last_PrintAluOut_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[0] = PrintAluOut_expected_prev[0];
	end
	if (
		( PrintAluOut_expected_prev[1] !== 1'bx ) && ( PrintAluOut_prev[1] !== PrintAluOut_expected_prev[1] )
		&& ((PrintAluOut_expected_prev[1] !== last_PrintAluOut_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[1] = PrintAluOut_expected_prev[1];
	end
	if (
		( PrintAluOut_expected_prev[2] !== 1'bx ) && ( PrintAluOut_prev[2] !== PrintAluOut_expected_prev[2] )
		&& ((PrintAluOut_expected_prev[2] !== last_PrintAluOut_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[2] = PrintAluOut_expected_prev[2];
	end
	if (
		( PrintAluOut_expected_prev[3] !== 1'bx ) && ( PrintAluOut_prev[3] !== PrintAluOut_expected_prev[3] )
		&& ((PrintAluOut_expected_prev[3] !== last_PrintAluOut_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[3] = PrintAluOut_expected_prev[3];
	end
	if (
		( PrintAluOut_expected_prev[4] !== 1'bx ) && ( PrintAluOut_prev[4] !== PrintAluOut_expected_prev[4] )
		&& ((PrintAluOut_expected_prev[4] !== last_PrintAluOut_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[4] = PrintAluOut_expected_prev[4];
	end
	if (
		( PrintAluOut_expected_prev[5] !== 1'bx ) && ( PrintAluOut_prev[5] !== PrintAluOut_expected_prev[5] )
		&& ((PrintAluOut_expected_prev[5] !== last_PrintAluOut_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[5] = PrintAluOut_expected_prev[5];
	end
	if (
		( PrintAluOut_expected_prev[6] !== 1'bx ) && ( PrintAluOut_prev[6] !== PrintAluOut_expected_prev[6] )
		&& ((PrintAluOut_expected_prev[6] !== last_PrintAluOut_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[6] = PrintAluOut_expected_prev[6];
	end
	if (
		( PrintAluOut_expected_prev[7] !== 1'bx ) && ( PrintAluOut_prev[7] !== PrintAluOut_expected_prev[7] )
		&& ((PrintAluOut_expected_prev[7] !== last_PrintAluOut_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[7] = PrintAluOut_expected_prev[7];
	end
	if (
		( PrintAluOut_expected_prev[8] !== 1'bx ) && ( PrintAluOut_prev[8] !== PrintAluOut_expected_prev[8] )
		&& ((PrintAluOut_expected_prev[8] !== last_PrintAluOut_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[8] = PrintAluOut_expected_prev[8];
	end
	if (
		( PrintAluOut_expected_prev[9] !== 1'bx ) && ( PrintAluOut_prev[9] !== PrintAluOut_expected_prev[9] )
		&& ((PrintAluOut_expected_prev[9] !== last_PrintAluOut_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[9] = PrintAluOut_expected_prev[9];
	end
	if (
		( PrintAluOut_expected_prev[10] !== 1'bx ) && ( PrintAluOut_prev[10] !== PrintAluOut_expected_prev[10] )
		&& ((PrintAluOut_expected_prev[10] !== last_PrintAluOut_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[10] = PrintAluOut_expected_prev[10];
	end
	if (
		( PrintAluOut_expected_prev[11] !== 1'bx ) && ( PrintAluOut_prev[11] !== PrintAluOut_expected_prev[11] )
		&& ((PrintAluOut_expected_prev[11] !== last_PrintAluOut_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[11] = PrintAluOut_expected_prev[11];
	end
	if (
		( PrintAluOut_expected_prev[12] !== 1'bx ) && ( PrintAluOut_prev[12] !== PrintAluOut_expected_prev[12] )
		&& ((PrintAluOut_expected_prev[12] !== last_PrintAluOut_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[12] = PrintAluOut_expected_prev[12];
	end
	if (
		( PrintAluOut_expected_prev[13] !== 1'bx ) && ( PrintAluOut_prev[13] !== PrintAluOut_expected_prev[13] )
		&& ((PrintAluOut_expected_prev[13] !== last_PrintAluOut_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintAluOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintAluOut_expected_prev);
		$display ("     Real value = %b", PrintAluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PrintAluOut_exp[13] = PrintAluOut_expected_prev[13];
	end
	if (
		( PrintDatosRF_expected_prev[0] !== 1'bx ) && ( PrintDatosRF_prev[0] !== PrintDatosRF_expected_prev[0] )
		&& ((PrintDatosRF_expected_prev[0] !== last_PrintDatosRF_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[0] = PrintDatosRF_expected_prev[0];
	end
	if (
		( PrintDatosRF_expected_prev[1] !== 1'bx ) && ( PrintDatosRF_prev[1] !== PrintDatosRF_expected_prev[1] )
		&& ((PrintDatosRF_expected_prev[1] !== last_PrintDatosRF_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[1] = PrintDatosRF_expected_prev[1];
	end
	if (
		( PrintDatosRF_expected_prev[2] !== 1'bx ) && ( PrintDatosRF_prev[2] !== PrintDatosRF_expected_prev[2] )
		&& ((PrintDatosRF_expected_prev[2] !== last_PrintDatosRF_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[2] = PrintDatosRF_expected_prev[2];
	end
	if (
		( PrintDatosRF_expected_prev[3] !== 1'bx ) && ( PrintDatosRF_prev[3] !== PrintDatosRF_expected_prev[3] )
		&& ((PrintDatosRF_expected_prev[3] !== last_PrintDatosRF_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[3] = PrintDatosRF_expected_prev[3];
	end
	if (
		( PrintDatosRF_expected_prev[4] !== 1'bx ) && ( PrintDatosRF_prev[4] !== PrintDatosRF_expected_prev[4] )
		&& ((PrintDatosRF_expected_prev[4] !== last_PrintDatosRF_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[4] = PrintDatosRF_expected_prev[4];
	end
	if (
		( PrintDatosRF_expected_prev[5] !== 1'bx ) && ( PrintDatosRF_prev[5] !== PrintDatosRF_expected_prev[5] )
		&& ((PrintDatosRF_expected_prev[5] !== last_PrintDatosRF_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[5] = PrintDatosRF_expected_prev[5];
	end
	if (
		( PrintDatosRF_expected_prev[6] !== 1'bx ) && ( PrintDatosRF_prev[6] !== PrintDatosRF_expected_prev[6] )
		&& ((PrintDatosRF_expected_prev[6] !== last_PrintDatosRF_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[6] = PrintDatosRF_expected_prev[6];
	end
	if (
		( PrintDatosRF_expected_prev[7] !== 1'bx ) && ( PrintDatosRF_prev[7] !== PrintDatosRF_expected_prev[7] )
		&& ((PrintDatosRF_expected_prev[7] !== last_PrintDatosRF_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[7] = PrintDatosRF_expected_prev[7];
	end
	if (
		( PrintDatosRF_expected_prev[8] !== 1'bx ) && ( PrintDatosRF_prev[8] !== PrintDatosRF_expected_prev[8] )
		&& ((PrintDatosRF_expected_prev[8] !== last_PrintDatosRF_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[8] = PrintDatosRF_expected_prev[8];
	end
	if (
		( PrintDatosRF_expected_prev[9] !== 1'bx ) && ( PrintDatosRF_prev[9] !== PrintDatosRF_expected_prev[9] )
		&& ((PrintDatosRF_expected_prev[9] !== last_PrintDatosRF_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[9] = PrintDatosRF_expected_prev[9];
	end
	if (
		( PrintDatosRF_expected_prev[10] !== 1'bx ) && ( PrintDatosRF_prev[10] !== PrintDatosRF_expected_prev[10] )
		&& ((PrintDatosRF_expected_prev[10] !== last_PrintDatosRF_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[10] = PrintDatosRF_expected_prev[10];
	end
	if (
		( PrintDatosRF_expected_prev[11] !== 1'bx ) && ( PrintDatosRF_prev[11] !== PrintDatosRF_expected_prev[11] )
		&& ((PrintDatosRF_expected_prev[11] !== last_PrintDatosRF_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[11] = PrintDatosRF_expected_prev[11];
	end
	if (
		( PrintDatosRF_expected_prev[12] !== 1'bx ) && ( PrintDatosRF_prev[12] !== PrintDatosRF_expected_prev[12] )
		&& ((PrintDatosRF_expected_prev[12] !== last_PrintDatosRF_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[12] = PrintDatosRF_expected_prev[12];
	end
	if (
		( PrintDatosRF_expected_prev[13] !== 1'bx ) && ( PrintDatosRF_prev[13] !== PrintDatosRF_expected_prev[13] )
		&& ((PrintDatosRF_expected_prev[13] !== last_PrintDatosRF_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintDatosRF[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintDatosRF_expected_prev);
		$display ("     Real value = %b", PrintDatosRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PrintDatosRF_exp[13] = PrintDatosRF_expected_prev[13];
	end
	if (
		( Printins_expected_prev[0] !== 1'bx ) && ( Printins_prev[0] !== Printins_expected_prev[0] )
		&& ((Printins_expected_prev[0] !== last_Printins_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[0] = Printins_expected_prev[0];
	end
	if (
		( Printins_expected_prev[1] !== 1'bx ) && ( Printins_prev[1] !== Printins_expected_prev[1] )
		&& ((Printins_expected_prev[1] !== last_Printins_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[1] = Printins_expected_prev[1];
	end
	if (
		( Printins_expected_prev[2] !== 1'bx ) && ( Printins_prev[2] !== Printins_expected_prev[2] )
		&& ((Printins_expected_prev[2] !== last_Printins_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[2] = Printins_expected_prev[2];
	end
	if (
		( Printins_expected_prev[3] !== 1'bx ) && ( Printins_prev[3] !== Printins_expected_prev[3] )
		&& ((Printins_expected_prev[3] !== last_Printins_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[3] = Printins_expected_prev[3];
	end
	if (
		( Printins_expected_prev[4] !== 1'bx ) && ( Printins_prev[4] !== Printins_expected_prev[4] )
		&& ((Printins_expected_prev[4] !== last_Printins_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[4] = Printins_expected_prev[4];
	end
	if (
		( Printins_expected_prev[5] !== 1'bx ) && ( Printins_prev[5] !== Printins_expected_prev[5] )
		&& ((Printins_expected_prev[5] !== last_Printins_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[5] = Printins_expected_prev[5];
	end
	if (
		( Printins_expected_prev[6] !== 1'bx ) && ( Printins_prev[6] !== Printins_expected_prev[6] )
		&& ((Printins_expected_prev[6] !== last_Printins_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[6] = Printins_expected_prev[6];
	end
	if (
		( Printins_expected_prev[7] !== 1'bx ) && ( Printins_prev[7] !== Printins_expected_prev[7] )
		&& ((Printins_expected_prev[7] !== last_Printins_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[7] = Printins_expected_prev[7];
	end
	if (
		( Printins_expected_prev[8] !== 1'bx ) && ( Printins_prev[8] !== Printins_expected_prev[8] )
		&& ((Printins_expected_prev[8] !== last_Printins_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[8] = Printins_expected_prev[8];
	end
	if (
		( Printins_expected_prev[9] !== 1'bx ) && ( Printins_prev[9] !== Printins_expected_prev[9] )
		&& ((Printins_expected_prev[9] !== last_Printins_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[9] = Printins_expected_prev[9];
	end
	if (
		( Printins_expected_prev[10] !== 1'bx ) && ( Printins_prev[10] !== Printins_expected_prev[10] )
		&& ((Printins_expected_prev[10] !== last_Printins_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[10] = Printins_expected_prev[10];
	end
	if (
		( Printins_expected_prev[11] !== 1'bx ) && ( Printins_prev[11] !== Printins_expected_prev[11] )
		&& ((Printins_expected_prev[11] !== last_Printins_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[11] = Printins_expected_prev[11];
	end
	if (
		( Printins_expected_prev[12] !== 1'bx ) && ( Printins_prev[12] !== Printins_expected_prev[12] )
		&& ((Printins_expected_prev[12] !== last_Printins_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[12] = Printins_expected_prev[12];
	end
	if (
		( Printins_expected_prev[13] !== 1'bx ) && ( Printins_prev[13] !== Printins_expected_prev[13] )
		&& ((Printins_expected_prev[13] !== last_Printins_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[13] = Printins_expected_prev[13];
	end
	if (
		( Printins_expected_prev[14] !== 1'bx ) && ( Printins_prev[14] !== Printins_expected_prev[14] )
		&& ((Printins_expected_prev[14] !== last_Printins_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[14] = Printins_expected_prev[14];
	end
	if (
		( Printins_expected_prev[15] !== 1'bx ) && ( Printins_prev[15] !== Printins_expected_prev[15] )
		&& ((Printins_expected_prev[15] !== last_Printins_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[15] = Printins_expected_prev[15];
	end
	if (
		( Printins_expected_prev[16] !== 1'bx ) && ( Printins_prev[16] !== Printins_expected_prev[16] )
		&& ((Printins_expected_prev[16] !== last_Printins_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[16] = Printins_expected_prev[16];
	end
	if (
		( Printins_expected_prev[17] !== 1'bx ) && ( Printins_prev[17] !== Printins_expected_prev[17] )
		&& ((Printins_expected_prev[17] !== last_Printins_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[17] = Printins_expected_prev[17];
	end
	if (
		( Printins_expected_prev[18] !== 1'bx ) && ( Printins_prev[18] !== Printins_expected_prev[18] )
		&& ((Printins_expected_prev[18] !== last_Printins_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[18] = Printins_expected_prev[18];
	end
	if (
		( Printins_expected_prev[19] !== 1'bx ) && ( Printins_prev[19] !== Printins_expected_prev[19] )
		&& ((Printins_expected_prev[19] !== last_Printins_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[19] = Printins_expected_prev[19];
	end
	if (
		( Printins_expected_prev[20] !== 1'bx ) && ( Printins_prev[20] !== Printins_expected_prev[20] )
		&& ((Printins_expected_prev[20] !== last_Printins_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[20] = Printins_expected_prev[20];
	end
	if (
		( Printins_expected_prev[21] !== 1'bx ) && ( Printins_prev[21] !== Printins_expected_prev[21] )
		&& ((Printins_expected_prev[21] !== last_Printins_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[21] = Printins_expected_prev[21];
	end
	if (
		( Printins_expected_prev[22] !== 1'bx ) && ( Printins_prev[22] !== Printins_expected_prev[22] )
		&& ((Printins_expected_prev[22] !== last_Printins_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[22] = Printins_expected_prev[22];
	end
	if (
		( Printins_expected_prev[23] !== 1'bx ) && ( Printins_prev[23] !== Printins_expected_prev[23] )
		&& ((Printins_expected_prev[23] !== last_Printins_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[23] = Printins_expected_prev[23];
	end
	if (
		( Printins_expected_prev[24] !== 1'bx ) && ( Printins_prev[24] !== Printins_expected_prev[24] )
		&& ((Printins_expected_prev[24] !== last_Printins_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[24] = Printins_expected_prev[24];
	end
	if (
		( Printins_expected_prev[25] !== 1'bx ) && ( Printins_prev[25] !== Printins_expected_prev[25] )
		&& ((Printins_expected_prev[25] !== last_Printins_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printins[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printins_expected_prev);
		$display ("     Real value = %b", Printins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Printins_exp[25] = Printins_expected_prev[25];
	end
	if (
		( PrintIO_expected_prev[0] !== 1'bx ) && ( PrintIO_prev[0] !== PrintIO_expected_prev[0] )
		&& ((PrintIO_expected_prev[0] !== last_PrintIO_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintIO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintIO_expected_prev);
		$display ("     Real value = %b", PrintIO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PrintIO_exp[0] = PrintIO_expected_prev[0];
	end
	if (
		( PrintIO_expected_prev[1] !== 1'bx ) && ( PrintIO_prev[1] !== PrintIO_expected_prev[1] )
		&& ((PrintIO_expected_prev[1] !== last_PrintIO_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintIO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintIO_expected_prev);
		$display ("     Real value = %b", PrintIO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PrintIO_exp[1] = PrintIO_expected_prev[1];
	end
	if (
		( PrintMemOut_expected_prev[0] !== 1'bx ) && ( PrintMemOut_prev[0] !== PrintMemOut_expected_prev[0] )
		&& ((PrintMemOut_expected_prev[0] !== last_PrintMemOut_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[0] = PrintMemOut_expected_prev[0];
	end
	if (
		( PrintMemOut_expected_prev[1] !== 1'bx ) && ( PrintMemOut_prev[1] !== PrintMemOut_expected_prev[1] )
		&& ((PrintMemOut_expected_prev[1] !== last_PrintMemOut_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[1] = PrintMemOut_expected_prev[1];
	end
	if (
		( PrintMemOut_expected_prev[2] !== 1'bx ) && ( PrintMemOut_prev[2] !== PrintMemOut_expected_prev[2] )
		&& ((PrintMemOut_expected_prev[2] !== last_PrintMemOut_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[2] = PrintMemOut_expected_prev[2];
	end
	if (
		( PrintMemOut_expected_prev[3] !== 1'bx ) && ( PrintMemOut_prev[3] !== PrintMemOut_expected_prev[3] )
		&& ((PrintMemOut_expected_prev[3] !== last_PrintMemOut_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[3] = PrintMemOut_expected_prev[3];
	end
	if (
		( PrintMemOut_expected_prev[4] !== 1'bx ) && ( PrintMemOut_prev[4] !== PrintMemOut_expected_prev[4] )
		&& ((PrintMemOut_expected_prev[4] !== last_PrintMemOut_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[4] = PrintMemOut_expected_prev[4];
	end
	if (
		( PrintMemOut_expected_prev[5] !== 1'bx ) && ( PrintMemOut_prev[5] !== PrintMemOut_expected_prev[5] )
		&& ((PrintMemOut_expected_prev[5] !== last_PrintMemOut_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[5] = PrintMemOut_expected_prev[5];
	end
	if (
		( PrintMemOut_expected_prev[6] !== 1'bx ) && ( PrintMemOut_prev[6] !== PrintMemOut_expected_prev[6] )
		&& ((PrintMemOut_expected_prev[6] !== last_PrintMemOut_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[6] = PrintMemOut_expected_prev[6];
	end
	if (
		( PrintMemOut_expected_prev[7] !== 1'bx ) && ( PrintMemOut_prev[7] !== PrintMemOut_expected_prev[7] )
		&& ((PrintMemOut_expected_prev[7] !== last_PrintMemOut_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[7] = PrintMemOut_expected_prev[7];
	end
	if (
		( PrintMemOut_expected_prev[8] !== 1'bx ) && ( PrintMemOut_prev[8] !== PrintMemOut_expected_prev[8] )
		&& ((PrintMemOut_expected_prev[8] !== last_PrintMemOut_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[8] = PrintMemOut_expected_prev[8];
	end
	if (
		( PrintMemOut_expected_prev[9] !== 1'bx ) && ( PrintMemOut_prev[9] !== PrintMemOut_expected_prev[9] )
		&& ((PrintMemOut_expected_prev[9] !== last_PrintMemOut_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[9] = PrintMemOut_expected_prev[9];
	end
	if (
		( PrintMemOut_expected_prev[10] !== 1'bx ) && ( PrintMemOut_prev[10] !== PrintMemOut_expected_prev[10] )
		&& ((PrintMemOut_expected_prev[10] !== last_PrintMemOut_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[10] = PrintMemOut_expected_prev[10];
	end
	if (
		( PrintMemOut_expected_prev[11] !== 1'bx ) && ( PrintMemOut_prev[11] !== PrintMemOut_expected_prev[11] )
		&& ((PrintMemOut_expected_prev[11] !== last_PrintMemOut_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[11] = PrintMemOut_expected_prev[11];
	end
	if (
		( PrintMemOut_expected_prev[12] !== 1'bx ) && ( PrintMemOut_prev[12] !== PrintMemOut_expected_prev[12] )
		&& ((PrintMemOut_expected_prev[12] !== last_PrintMemOut_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[12] = PrintMemOut_expected_prev[12];
	end
	if (
		( PrintMemOut_expected_prev[13] !== 1'bx ) && ( PrintMemOut_prev[13] !== PrintMemOut_expected_prev[13] )
		&& ((PrintMemOut_expected_prev[13] !== last_PrintMemOut_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintMemOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintMemOut_expected_prev);
		$display ("     Real value = %b", PrintMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PrintMemOut_exp[13] = PrintMemOut_expected_prev[13];
	end
	if (
		( Printopcode_expected_prev[0] !== 1'bx ) && ( Printopcode_prev[0] !== Printopcode_expected_prev[0] )
		&& ((Printopcode_expected_prev[0] !== last_Printopcode_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printopcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printopcode_expected_prev);
		$display ("     Real value = %b", Printopcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Printopcode_exp[0] = Printopcode_expected_prev[0];
	end
	if (
		( Printopcode_expected_prev[1] !== 1'bx ) && ( Printopcode_prev[1] !== Printopcode_expected_prev[1] )
		&& ((Printopcode_expected_prev[1] !== last_Printopcode_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printopcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printopcode_expected_prev);
		$display ("     Real value = %b", Printopcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Printopcode_exp[1] = Printopcode_expected_prev[1];
	end
	if (
		( Printopcode_expected_prev[2] !== 1'bx ) && ( Printopcode_prev[2] !== Printopcode_expected_prev[2] )
		&& ((Printopcode_expected_prev[2] !== last_Printopcode_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printopcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printopcode_expected_prev);
		$display ("     Real value = %b", Printopcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Printopcode_exp[2] = Printopcode_expected_prev[2];
	end
	if (
		( Printopcode_expected_prev[3] !== 1'bx ) && ( Printopcode_prev[3] !== Printopcode_expected_prev[3] )
		&& ((Printopcode_expected_prev[3] !== last_Printopcode_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printopcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printopcode_expected_prev);
		$display ("     Real value = %b", Printopcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Printopcode_exp[3] = Printopcode_expected_prev[3];
	end
	if (
		( Printrs_expected_prev[0] !== 1'bx ) && ( Printrs_prev[0] !== Printrs_expected_prev[0] )
		&& ((Printrs_expected_prev[0] !== last_Printrs_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printrs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printrs_expected_prev);
		$display ("     Real value = %b", Printrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Printrs_exp[0] = Printrs_expected_prev[0];
	end
	if (
		( Printrs_expected_prev[1] !== 1'bx ) && ( Printrs_prev[1] !== Printrs_expected_prev[1] )
		&& ((Printrs_expected_prev[1] !== last_Printrs_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printrs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printrs_expected_prev);
		$display ("     Real value = %b", Printrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Printrs_exp[1] = Printrs_expected_prev[1];
	end
	if (
		( Printrs_expected_prev[2] !== 1'bx ) && ( Printrs_prev[2] !== Printrs_expected_prev[2] )
		&& ((Printrs_expected_prev[2] !== last_Printrs_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printrs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printrs_expected_prev);
		$display ("     Real value = %b", Printrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Printrs_exp[2] = Printrs_expected_prev[2];
	end
	if (
		( Printrs_expected_prev[3] !== 1'bx ) && ( Printrs_prev[3] !== Printrs_expected_prev[3] )
		&& ((Printrs_expected_prev[3] !== last_Printrs_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printrs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printrs_expected_prev);
		$display ("     Real value = %b", Printrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Printrs_exp[3] = Printrs_expected_prev[3];
	end
	if (
		( Printrt_expected_prev[0] !== 1'bx ) && ( Printrt_prev[0] !== Printrt_expected_prev[0] )
		&& ((Printrt_expected_prev[0] !== last_Printrt_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printrt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printrt_expected_prev);
		$display ("     Real value = %b", Printrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Printrt_exp[0] = Printrt_expected_prev[0];
	end
	if (
		( Printrt_expected_prev[1] !== 1'bx ) && ( Printrt_prev[1] !== Printrt_expected_prev[1] )
		&& ((Printrt_expected_prev[1] !== last_Printrt_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printrt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printrt_expected_prev);
		$display ("     Real value = %b", Printrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Printrt_exp[1] = Printrt_expected_prev[1];
	end
	if (
		( Printrt_expected_prev[2] !== 1'bx ) && ( Printrt_prev[2] !== Printrt_expected_prev[2] )
		&& ((Printrt_expected_prev[2] !== last_Printrt_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printrt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printrt_expected_prev);
		$display ("     Real value = %b", Printrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Printrt_exp[2] = Printrt_expected_prev[2];
	end
	if (
		( Printrt_expected_prev[3] !== 1'bx ) && ( Printrt_prev[3] !== Printrt_expected_prev[3] )
		&& ((Printrt_expected_prev[3] !== last_Printrt_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Printrt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Printrt_expected_prev);
		$display ("     Real value = %b", Printrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Printrt_exp[3] = Printrt_expected_prev[3];
	end
	if (
		( PrintSA_expected_prev[0] !== 1'bx ) && ( PrintSA_prev[0] !== PrintSA_expected_prev[0] )
		&& ((PrintSA_expected_prev[0] !== last_PrintSA_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[0] = PrintSA_expected_prev[0];
	end
	if (
		( PrintSA_expected_prev[1] !== 1'bx ) && ( PrintSA_prev[1] !== PrintSA_expected_prev[1] )
		&& ((PrintSA_expected_prev[1] !== last_PrintSA_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[1] = PrintSA_expected_prev[1];
	end
	if (
		( PrintSA_expected_prev[2] !== 1'bx ) && ( PrintSA_prev[2] !== PrintSA_expected_prev[2] )
		&& ((PrintSA_expected_prev[2] !== last_PrintSA_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[2] = PrintSA_expected_prev[2];
	end
	if (
		( PrintSA_expected_prev[3] !== 1'bx ) && ( PrintSA_prev[3] !== PrintSA_expected_prev[3] )
		&& ((PrintSA_expected_prev[3] !== last_PrintSA_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[3] = PrintSA_expected_prev[3];
	end
	if (
		( PrintSA_expected_prev[4] !== 1'bx ) && ( PrintSA_prev[4] !== PrintSA_expected_prev[4] )
		&& ((PrintSA_expected_prev[4] !== last_PrintSA_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[4] = PrintSA_expected_prev[4];
	end
	if (
		( PrintSA_expected_prev[5] !== 1'bx ) && ( PrintSA_prev[5] !== PrintSA_expected_prev[5] )
		&& ((PrintSA_expected_prev[5] !== last_PrintSA_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[5] = PrintSA_expected_prev[5];
	end
	if (
		( PrintSA_expected_prev[6] !== 1'bx ) && ( PrintSA_prev[6] !== PrintSA_expected_prev[6] )
		&& ((PrintSA_expected_prev[6] !== last_PrintSA_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[6] = PrintSA_expected_prev[6];
	end
	if (
		( PrintSA_expected_prev[7] !== 1'bx ) && ( PrintSA_prev[7] !== PrintSA_expected_prev[7] )
		&& ((PrintSA_expected_prev[7] !== last_PrintSA_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[7] = PrintSA_expected_prev[7];
	end
	if (
		( PrintSA_expected_prev[8] !== 1'bx ) && ( PrintSA_prev[8] !== PrintSA_expected_prev[8] )
		&& ((PrintSA_expected_prev[8] !== last_PrintSA_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[8] = PrintSA_expected_prev[8];
	end
	if (
		( PrintSA_expected_prev[9] !== 1'bx ) && ( PrintSA_prev[9] !== PrintSA_expected_prev[9] )
		&& ((PrintSA_expected_prev[9] !== last_PrintSA_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[9] = PrintSA_expected_prev[9];
	end
	if (
		( PrintSA_expected_prev[10] !== 1'bx ) && ( PrintSA_prev[10] !== PrintSA_expected_prev[10] )
		&& ((PrintSA_expected_prev[10] !== last_PrintSA_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[10] = PrintSA_expected_prev[10];
	end
	if (
		( PrintSA_expected_prev[11] !== 1'bx ) && ( PrintSA_prev[11] !== PrintSA_expected_prev[11] )
		&& ((PrintSA_expected_prev[11] !== last_PrintSA_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[11] = PrintSA_expected_prev[11];
	end
	if (
		( PrintSA_expected_prev[12] !== 1'bx ) && ( PrintSA_prev[12] !== PrintSA_expected_prev[12] )
		&& ((PrintSA_expected_prev[12] !== last_PrintSA_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[12] = PrintSA_expected_prev[12];
	end
	if (
		( PrintSA_expected_prev[13] !== 1'bx ) && ( PrintSA_prev[13] !== PrintSA_expected_prev[13] )
		&& ((PrintSA_expected_prev[13] !== last_PrintSA_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSA_expected_prev);
		$display ("     Real value = %b", PrintSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PrintSA_exp[13] = PrintSA_expected_prev[13];
	end
	if (
		( PrintSB_expected_prev[0] !== 1'bx ) && ( PrintSB_prev[0] !== PrintSB_expected_prev[0] )
		&& ((PrintSB_expected_prev[0] !== last_PrintSB_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[0] = PrintSB_expected_prev[0];
	end
	if (
		( PrintSB_expected_prev[1] !== 1'bx ) && ( PrintSB_prev[1] !== PrintSB_expected_prev[1] )
		&& ((PrintSB_expected_prev[1] !== last_PrintSB_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[1] = PrintSB_expected_prev[1];
	end
	if (
		( PrintSB_expected_prev[2] !== 1'bx ) && ( PrintSB_prev[2] !== PrintSB_expected_prev[2] )
		&& ((PrintSB_expected_prev[2] !== last_PrintSB_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[2] = PrintSB_expected_prev[2];
	end
	if (
		( PrintSB_expected_prev[3] !== 1'bx ) && ( PrintSB_prev[3] !== PrintSB_expected_prev[3] )
		&& ((PrintSB_expected_prev[3] !== last_PrintSB_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[3] = PrintSB_expected_prev[3];
	end
	if (
		( PrintSB_expected_prev[4] !== 1'bx ) && ( PrintSB_prev[4] !== PrintSB_expected_prev[4] )
		&& ((PrintSB_expected_prev[4] !== last_PrintSB_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[4] = PrintSB_expected_prev[4];
	end
	if (
		( PrintSB_expected_prev[5] !== 1'bx ) && ( PrintSB_prev[5] !== PrintSB_expected_prev[5] )
		&& ((PrintSB_expected_prev[5] !== last_PrintSB_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[5] = PrintSB_expected_prev[5];
	end
	if (
		( PrintSB_expected_prev[6] !== 1'bx ) && ( PrintSB_prev[6] !== PrintSB_expected_prev[6] )
		&& ((PrintSB_expected_prev[6] !== last_PrintSB_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[6] = PrintSB_expected_prev[6];
	end
	if (
		( PrintSB_expected_prev[7] !== 1'bx ) && ( PrintSB_prev[7] !== PrintSB_expected_prev[7] )
		&& ((PrintSB_expected_prev[7] !== last_PrintSB_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[7] = PrintSB_expected_prev[7];
	end
	if (
		( PrintSB_expected_prev[8] !== 1'bx ) && ( PrintSB_prev[8] !== PrintSB_expected_prev[8] )
		&& ((PrintSB_expected_prev[8] !== last_PrintSB_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[8] = PrintSB_expected_prev[8];
	end
	if (
		( PrintSB_expected_prev[9] !== 1'bx ) && ( PrintSB_prev[9] !== PrintSB_expected_prev[9] )
		&& ((PrintSB_expected_prev[9] !== last_PrintSB_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[9] = PrintSB_expected_prev[9];
	end
	if (
		( PrintSB_expected_prev[10] !== 1'bx ) && ( PrintSB_prev[10] !== PrintSB_expected_prev[10] )
		&& ((PrintSB_expected_prev[10] !== last_PrintSB_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[10] = PrintSB_expected_prev[10];
	end
	if (
		( PrintSB_expected_prev[11] !== 1'bx ) && ( PrintSB_prev[11] !== PrintSB_expected_prev[11] )
		&& ((PrintSB_expected_prev[11] !== last_PrintSB_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[11] = PrintSB_expected_prev[11];
	end
	if (
		( PrintSB_expected_prev[12] !== 1'bx ) && ( PrintSB_prev[12] !== PrintSB_expected_prev[12] )
		&& ((PrintSB_expected_prev[12] !== last_PrintSB_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[12] = PrintSB_expected_prev[12];
	end
	if (
		( PrintSB_expected_prev[13] !== 1'bx ) && ( PrintSB_prev[13] !== PrintSB_expected_prev[13] )
		&& ((PrintSB_expected_prev[13] !== last_PrintSB_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintSB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintSB_expected_prev);
		$display ("     Real value = %b", PrintSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PrintSB_exp[13] = PrintSB_expected_prev[13];
	end
	if (
		( PrinttoA_expected_prev[0] !== 1'bx ) && ( PrinttoA_prev[0] !== PrinttoA_expected_prev[0] )
		&& ((PrinttoA_expected_prev[0] !== last_PrinttoA_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[0] = PrinttoA_expected_prev[0];
	end
	if (
		( PrinttoA_expected_prev[1] !== 1'bx ) && ( PrinttoA_prev[1] !== PrinttoA_expected_prev[1] )
		&& ((PrinttoA_expected_prev[1] !== last_PrinttoA_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[1] = PrinttoA_expected_prev[1];
	end
	if (
		( PrinttoA_expected_prev[2] !== 1'bx ) && ( PrinttoA_prev[2] !== PrinttoA_expected_prev[2] )
		&& ((PrinttoA_expected_prev[2] !== last_PrinttoA_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[2] = PrinttoA_expected_prev[2];
	end
	if (
		( PrinttoA_expected_prev[3] !== 1'bx ) && ( PrinttoA_prev[3] !== PrinttoA_expected_prev[3] )
		&& ((PrinttoA_expected_prev[3] !== last_PrinttoA_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[3] = PrinttoA_expected_prev[3];
	end
	if (
		( PrinttoA_expected_prev[4] !== 1'bx ) && ( PrinttoA_prev[4] !== PrinttoA_expected_prev[4] )
		&& ((PrinttoA_expected_prev[4] !== last_PrinttoA_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[4] = PrinttoA_expected_prev[4];
	end
	if (
		( PrinttoA_expected_prev[5] !== 1'bx ) && ( PrinttoA_prev[5] !== PrinttoA_expected_prev[5] )
		&& ((PrinttoA_expected_prev[5] !== last_PrinttoA_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[5] = PrinttoA_expected_prev[5];
	end
	if (
		( PrinttoA_expected_prev[6] !== 1'bx ) && ( PrinttoA_prev[6] !== PrinttoA_expected_prev[6] )
		&& ((PrinttoA_expected_prev[6] !== last_PrinttoA_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[6] = PrinttoA_expected_prev[6];
	end
	if (
		( PrinttoA_expected_prev[7] !== 1'bx ) && ( PrinttoA_prev[7] !== PrinttoA_expected_prev[7] )
		&& ((PrinttoA_expected_prev[7] !== last_PrinttoA_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[7] = PrinttoA_expected_prev[7];
	end
	if (
		( PrinttoA_expected_prev[8] !== 1'bx ) && ( PrinttoA_prev[8] !== PrinttoA_expected_prev[8] )
		&& ((PrinttoA_expected_prev[8] !== last_PrinttoA_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[8] = PrinttoA_expected_prev[8];
	end
	if (
		( PrinttoA_expected_prev[9] !== 1'bx ) && ( PrinttoA_prev[9] !== PrinttoA_expected_prev[9] )
		&& ((PrinttoA_expected_prev[9] !== last_PrinttoA_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[9] = PrinttoA_expected_prev[9];
	end
	if (
		( PrinttoA_expected_prev[10] !== 1'bx ) && ( PrinttoA_prev[10] !== PrinttoA_expected_prev[10] )
		&& ((PrinttoA_expected_prev[10] !== last_PrinttoA_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[10] = PrinttoA_expected_prev[10];
	end
	if (
		( PrinttoA_expected_prev[11] !== 1'bx ) && ( PrinttoA_prev[11] !== PrinttoA_expected_prev[11] )
		&& ((PrinttoA_expected_prev[11] !== last_PrinttoA_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[11] = PrinttoA_expected_prev[11];
	end
	if (
		( PrinttoA_expected_prev[12] !== 1'bx ) && ( PrinttoA_prev[12] !== PrinttoA_expected_prev[12] )
		&& ((PrinttoA_expected_prev[12] !== last_PrinttoA_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[12] = PrinttoA_expected_prev[12];
	end
	if (
		( PrinttoA_expected_prev[13] !== 1'bx ) && ( PrinttoA_prev[13] !== PrinttoA_expected_prev[13] )
		&& ((PrinttoA_expected_prev[13] !== last_PrinttoA_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoA_expected_prev);
		$display ("     Real value = %b", PrinttoA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PrinttoA_exp[13] = PrinttoA_expected_prev[13];
	end
	if (
		( PrinttoB_expected_prev[0] !== 1'bx ) && ( PrinttoB_prev[0] !== PrinttoB_expected_prev[0] )
		&& ((PrinttoB_expected_prev[0] !== last_PrinttoB_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[0] = PrinttoB_expected_prev[0];
	end
	if (
		( PrinttoB_expected_prev[1] !== 1'bx ) && ( PrinttoB_prev[1] !== PrinttoB_expected_prev[1] )
		&& ((PrinttoB_expected_prev[1] !== last_PrinttoB_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[1] = PrinttoB_expected_prev[1];
	end
	if (
		( PrinttoB_expected_prev[2] !== 1'bx ) && ( PrinttoB_prev[2] !== PrinttoB_expected_prev[2] )
		&& ((PrinttoB_expected_prev[2] !== last_PrinttoB_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[2] = PrinttoB_expected_prev[2];
	end
	if (
		( PrinttoB_expected_prev[3] !== 1'bx ) && ( PrinttoB_prev[3] !== PrinttoB_expected_prev[3] )
		&& ((PrinttoB_expected_prev[3] !== last_PrinttoB_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[3] = PrinttoB_expected_prev[3];
	end
	if (
		( PrinttoB_expected_prev[4] !== 1'bx ) && ( PrinttoB_prev[4] !== PrinttoB_expected_prev[4] )
		&& ((PrinttoB_expected_prev[4] !== last_PrinttoB_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[4] = PrinttoB_expected_prev[4];
	end
	if (
		( PrinttoB_expected_prev[5] !== 1'bx ) && ( PrinttoB_prev[5] !== PrinttoB_expected_prev[5] )
		&& ((PrinttoB_expected_prev[5] !== last_PrinttoB_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[5] = PrinttoB_expected_prev[5];
	end
	if (
		( PrinttoB_expected_prev[6] !== 1'bx ) && ( PrinttoB_prev[6] !== PrinttoB_expected_prev[6] )
		&& ((PrinttoB_expected_prev[6] !== last_PrinttoB_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[6] = PrinttoB_expected_prev[6];
	end
	if (
		( PrinttoB_expected_prev[7] !== 1'bx ) && ( PrinttoB_prev[7] !== PrinttoB_expected_prev[7] )
		&& ((PrinttoB_expected_prev[7] !== last_PrinttoB_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[7] = PrinttoB_expected_prev[7];
	end
	if (
		( PrinttoB_expected_prev[8] !== 1'bx ) && ( PrinttoB_prev[8] !== PrinttoB_expected_prev[8] )
		&& ((PrinttoB_expected_prev[8] !== last_PrinttoB_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[8] = PrinttoB_expected_prev[8];
	end
	if (
		( PrinttoB_expected_prev[9] !== 1'bx ) && ( PrinttoB_prev[9] !== PrinttoB_expected_prev[9] )
		&& ((PrinttoB_expected_prev[9] !== last_PrinttoB_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[9] = PrinttoB_expected_prev[9];
	end
	if (
		( PrinttoB_expected_prev[10] !== 1'bx ) && ( PrinttoB_prev[10] !== PrinttoB_expected_prev[10] )
		&& ((PrinttoB_expected_prev[10] !== last_PrinttoB_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[10] = PrinttoB_expected_prev[10];
	end
	if (
		( PrinttoB_expected_prev[11] !== 1'bx ) && ( PrinttoB_prev[11] !== PrinttoB_expected_prev[11] )
		&& ((PrinttoB_expected_prev[11] !== last_PrinttoB_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[11] = PrinttoB_expected_prev[11];
	end
	if (
		( PrinttoB_expected_prev[12] !== 1'bx ) && ( PrinttoB_prev[12] !== PrinttoB_expected_prev[12] )
		&& ((PrinttoB_expected_prev[12] !== last_PrinttoB_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[12] = PrinttoB_expected_prev[12];
	end
	if (
		( PrinttoB_expected_prev[13] !== 1'bx ) && ( PrinttoB_prev[13] !== PrinttoB_expected_prev[13] )
		&& ((PrinttoB_expected_prev[13] !== last_PrinttoB_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrinttoB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrinttoB_expected_prev);
		$display ("     Real value = %b", PrinttoB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PrinttoB_exp[13] = PrinttoB_expected_prev[13];
	end
	if (
		( PrintWRF_expected_prev !== 1'bx ) && ( PrintWRF_prev !== PrintWRF_expected_prev )
		&& ((PrintWRF_expected_prev !== last_PrintWRF_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PrintWRF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PrintWRF_expected_prev);
		$display ("     Real value = %b", PrintWRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PrintWRF_exp = PrintWRF_expected_prev;
	end
	if (
		( SS0_expected_prev[0] !== 1'bx ) && ( SS0_prev[0] !== SS0_expected_prev[0] )
		&& ((SS0_expected_prev[0] !== last_SS0_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SS0_exp[0] = SS0_expected_prev[0];
	end
	if (
		( SS0_expected_prev[1] !== 1'bx ) && ( SS0_prev[1] !== SS0_expected_prev[1] )
		&& ((SS0_expected_prev[1] !== last_SS0_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SS0_exp[1] = SS0_expected_prev[1];
	end
	if (
		( SS0_expected_prev[2] !== 1'bx ) && ( SS0_prev[2] !== SS0_expected_prev[2] )
		&& ((SS0_expected_prev[2] !== last_SS0_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SS0_exp[2] = SS0_expected_prev[2];
	end
	if (
		( SS0_expected_prev[3] !== 1'bx ) && ( SS0_prev[3] !== SS0_expected_prev[3] )
		&& ((SS0_expected_prev[3] !== last_SS0_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SS0_exp[3] = SS0_expected_prev[3];
	end
	if (
		( SS0_expected_prev[4] !== 1'bx ) && ( SS0_prev[4] !== SS0_expected_prev[4] )
		&& ((SS0_expected_prev[4] !== last_SS0_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SS0_exp[4] = SS0_expected_prev[4];
	end
	if (
		( SS0_expected_prev[5] !== 1'bx ) && ( SS0_prev[5] !== SS0_expected_prev[5] )
		&& ((SS0_expected_prev[5] !== last_SS0_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SS0_exp[5] = SS0_expected_prev[5];
	end
	if (
		( SS0_expected_prev[6] !== 1'bx ) && ( SS0_prev[6] !== SS0_expected_prev[6] )
		&& ((SS0_expected_prev[6] !== last_SS0_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SS0_exp[6] = SS0_expected_prev[6];
	end
	if (
		( SS1_expected_prev[0] !== 1'bx ) && ( SS1_prev[0] !== SS1_expected_prev[0] )
		&& ((SS1_expected_prev[0] !== last_SS1_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SS1_exp[0] = SS1_expected_prev[0];
	end
	if (
		( SS1_expected_prev[1] !== 1'bx ) && ( SS1_prev[1] !== SS1_expected_prev[1] )
		&& ((SS1_expected_prev[1] !== last_SS1_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SS1_exp[1] = SS1_expected_prev[1];
	end
	if (
		( SS1_expected_prev[2] !== 1'bx ) && ( SS1_prev[2] !== SS1_expected_prev[2] )
		&& ((SS1_expected_prev[2] !== last_SS1_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SS1_exp[2] = SS1_expected_prev[2];
	end
	if (
		( SS1_expected_prev[3] !== 1'bx ) && ( SS1_prev[3] !== SS1_expected_prev[3] )
		&& ((SS1_expected_prev[3] !== last_SS1_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SS1_exp[3] = SS1_expected_prev[3];
	end
	if (
		( SS1_expected_prev[4] !== 1'bx ) && ( SS1_prev[4] !== SS1_expected_prev[4] )
		&& ((SS1_expected_prev[4] !== last_SS1_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SS1_exp[4] = SS1_expected_prev[4];
	end
	if (
		( SS1_expected_prev[5] !== 1'bx ) && ( SS1_prev[5] !== SS1_expected_prev[5] )
		&& ((SS1_expected_prev[5] !== last_SS1_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SS1_exp[5] = SS1_expected_prev[5];
	end
	if (
		( SS1_expected_prev[6] !== 1'bx ) && ( SS1_prev[6] !== SS1_expected_prev[6] )
		&& ((SS1_expected_prev[6] !== last_SS1_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SS1_exp[6] = SS1_expected_prev[6];
	end
	if (
		( SS2_expected_prev[0] !== 1'bx ) && ( SS2_prev[0] !== SS2_expected_prev[0] )
		&& ((SS2_expected_prev[0] !== last_SS2_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_SS2_exp[0] = SS2_expected_prev[0];
	end
	if (
		( SS2_expected_prev[1] !== 1'bx ) && ( SS2_prev[1] !== SS2_expected_prev[1] )
		&& ((SS2_expected_prev[1] !== last_SS2_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_SS2_exp[1] = SS2_expected_prev[1];
	end
	if (
		( SS2_expected_prev[2] !== 1'bx ) && ( SS2_prev[2] !== SS2_expected_prev[2] )
		&& ((SS2_expected_prev[2] !== last_SS2_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_SS2_exp[2] = SS2_expected_prev[2];
	end
	if (
		( SS2_expected_prev[3] !== 1'bx ) && ( SS2_prev[3] !== SS2_expected_prev[3] )
		&& ((SS2_expected_prev[3] !== last_SS2_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_SS2_exp[3] = SS2_expected_prev[3];
	end
	if (
		( SS2_expected_prev[4] !== 1'bx ) && ( SS2_prev[4] !== SS2_expected_prev[4] )
		&& ((SS2_expected_prev[4] !== last_SS2_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_SS2_exp[4] = SS2_expected_prev[4];
	end
	if (
		( SS2_expected_prev[5] !== 1'bx ) && ( SS2_prev[5] !== SS2_expected_prev[5] )
		&& ((SS2_expected_prev[5] !== last_SS2_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_SS2_exp[5] = SS2_expected_prev[5];
	end
	if (
		( SS2_expected_prev[6] !== 1'bx ) && ( SS2_prev[6] !== SS2_expected_prev[6] )
		&& ((SS2_expected_prev[6] !== last_SS2_exp[6]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_SS2_exp[6] = SS2_expected_prev[6];
	end
	if (
		( SS3_expected_prev[0] !== 1'bx ) && ( SS3_prev[0] !== SS3_expected_prev[0] )
		&& ((SS3_expected_prev[0] !== last_SS3_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_SS3_exp[0] = SS3_expected_prev[0];
	end
	if (
		( SS3_expected_prev[1] !== 1'bx ) && ( SS3_prev[1] !== SS3_expected_prev[1] )
		&& ((SS3_expected_prev[1] !== last_SS3_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_SS3_exp[1] = SS3_expected_prev[1];
	end
	if (
		( SS3_expected_prev[2] !== 1'bx ) && ( SS3_prev[2] !== SS3_expected_prev[2] )
		&& ((SS3_expected_prev[2] !== last_SS3_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_SS3_exp[2] = SS3_expected_prev[2];
	end
	if (
		( SS3_expected_prev[3] !== 1'bx ) && ( SS3_prev[3] !== SS3_expected_prev[3] )
		&& ((SS3_expected_prev[3] !== last_SS3_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_SS3_exp[3] = SS3_expected_prev[3];
	end
	if (
		( SS3_expected_prev[4] !== 1'bx ) && ( SS3_prev[4] !== SS3_expected_prev[4] )
		&& ((SS3_expected_prev[4] !== last_SS3_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_SS3_exp[4] = SS3_expected_prev[4];
	end
	if (
		( SS3_expected_prev[5] !== 1'bx ) && ( SS3_prev[5] !== SS3_expected_prev[5] )
		&& ((SS3_expected_prev[5] !== last_SS3_exp[5]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_SS3_exp[5] = SS3_expected_prev[5];
	end
	if (
		( SS3_expected_prev[6] !== 1'bx ) && ( SS3_prev[6] !== SS3_expected_prev[6] )
		&& ((SS3_expected_prev[6] !== last_SS3_exp[6]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_SS3_exp[6] = SS3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Principal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg EnterButton;
reg [3:0] switches0;
reg [3:0] switches1;
reg [1:0] switches2;
// wires                                               
wire [9:0] ledsR;
wire [7:0] ledsV;
wire nclk;
wire [7:0] PrintaddressIns;
wire [13:0] PrintAluOut;
wire [13:0] PrintDatosRF;
wire [25:0] Printins;
wire [1:0] PrintIO;
wire [13:0] PrintMemOut;
wire [3:0] Printopcode;
wire [3:0] Printrs;
wire [3:0] Printrt;
wire [13:0] PrintSA;
wire [13:0] PrintSB;
wire [13:0] PrinttoA;
wire [13:0] PrinttoB;
wire PrintWRF;
wire [6:0] SS0;
wire [6:0] SS1;
wire [6:0] SS2;
wire [6:0] SS3;

wire sampler;                             

// assign statements (if any)                          
Principal i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.EnterButton(EnterButton),
	.ledsR(ledsR),
	.ledsV(ledsV),
	.nclk(nclk),
	.PrintaddressIns(PrintaddressIns),
	.PrintAluOut(PrintAluOut),
	.PrintDatosRF(PrintDatosRF),
	.Printins(Printins),
	.PrintIO(PrintIO),
	.PrintMemOut(PrintMemOut),
	.Printopcode(Printopcode),
	.Printrs(Printrs),
	.Printrt(Printrt),
	.PrintSA(PrintSA),
	.PrintSB(PrintSB),
	.PrinttoA(PrinttoA),
	.PrinttoB(PrinttoB),
	.PrintWRF(PrintWRF),
	.SS0(SS0),
	.SS1(SS1),
	.SS2(SS2),
	.SS3(SS3),
	.switches0(switches0),
	.switches1(switches1),
	.switches2(switches2)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// EnterButton
initial
begin
	EnterButton = 1'b1;
	EnterButton = #30000 1'b0;
	EnterButton = #50000 1'b1;
	EnterButton = #700000 1'b0;
	EnterButton = #30000 1'b1;
end 
// switches0[ 3 ]
initial
begin
	switches0[3] = 1'b0;
end 
// switches0[ 2 ]
initial
begin
	switches0[2] = 1'b0;
end 
// switches0[ 1 ]
initial
begin
	switches0[1] = 1'b0;
end 
// switches0[ 0 ]
initial
begin
	switches0[0] = 1'b0;
end 
// switches1[ 3 ]
initial
begin
	switches1[3] = 1'b0;
end 
// switches1[ 2 ]
initial
begin
	switches1[2] = 1'b0;
end 
// switches1[ 1 ]
initial
begin
	switches1[1] = 1'b0;
end 
// switches1[ 0 ]
initial
begin
	switches1[0] = 1'b0;
end 
// switches2[ 1 ]
initial
begin
	switches2[1] = 1'b0;
end 
// switches2[ 0 ]
initial
begin
	switches2[0] = 1'b0;
end 

Principal_vlg_sample_tst tb_sample (
	.clk(clk),
	.EnterButton(EnterButton),
	.switches0(switches0),
	.switches1(switches1),
	.switches2(switches2),
	.sampler_tx(sampler)
);

Principal_vlg_check_tst tb_out(
	.ledsR(ledsR),
	.ledsV(ledsV),
	.nclk(nclk),
	.PrintaddressIns(PrintaddressIns),
	.PrintAluOut(PrintAluOut),
	.PrintDatosRF(PrintDatosRF),
	.Printins(Printins),
	.PrintIO(PrintIO),
	.PrintMemOut(PrintMemOut),
	.Printopcode(Printopcode),
	.Printrs(Printrs),
	.Printrt(Printrt),
	.PrintSA(PrintSA),
	.PrintSB(PrintSB),
	.PrinttoA(PrinttoA),
	.PrinttoB(PrinttoB),
	.PrintWRF(PrintWRF),
	.SS0(SS0),
	.SS1(SS1),
	.SS2(SS2),
	.SS3(SS3),
	.sampler_rx(sampler)
);
endmodule

