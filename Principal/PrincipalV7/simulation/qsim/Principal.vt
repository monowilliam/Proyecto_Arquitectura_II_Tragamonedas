// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2018 00:44:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Principal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Principal_vlg_sample_tst(
	clk,
	EnterButton,
	nclk,
	switches0,
	switches1,
	switches2,
	sampler_tx
);
input  clk;
input  EnterButton;
input  nclk;
input [3:0] switches0;
input [3:0] switches1;
input [1:0] switches2;
output sampler_tx;

reg sample;
time current_time;
always @(clk or EnterButton or nclk or switches0 or switches1 or switches2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Principal_vlg_check_tst (
	instruccionMomento,
	ledsR,
	ledsV,
	nclk,
	Op,
	printPC,
	printPCYES,
	salidaBoton,
	SS0,
	SS1,
	SS2,
	SS3,
	sampler_rx
);
input [25:0] instruccionMomento;
input [9:0] ledsR;
input [7:0] ledsV;
input  nclk;
input [3:0] Op;
input [7:0] printPC;
input  printPCYES;
input  salidaBoton;
input [6:0] SS0;
input [6:0] SS1;
input [6:0] SS2;
input [6:0] SS3;
input sampler_rx;

reg [25:0] instruccionMomento_expected;
reg [9:0] ledsR_expected;
reg [7:0] ledsV_expected;
reg  nclk_expected;
reg [3:0] Op_expected;
reg [7:0] printPC_expected;
reg  printPCYES_expected;
reg  salidaBoton_expected;
reg [6:0] SS0_expected;
reg [6:0] SS1_expected;
reg [6:0] SS2_expected;
reg [6:0] SS3_expected;

reg [25:0] instruccionMomento_prev;
reg [9:0] ledsR_prev;
reg [7:0] ledsV_prev;
reg  nclk_prev;
reg [3:0] Op_prev;
reg [7:0] printPC_prev;
reg  printPCYES_prev;
reg  salidaBoton_prev;
reg [6:0] SS0_prev;
reg [6:0] SS1_prev;
reg [6:0] SS2_prev;
reg [6:0] SS3_prev;

reg [25:0] instruccionMomento_expected_prev;
reg [9:0] ledsR_expected_prev;
reg [7:0] ledsV_expected_prev;
reg  nclk_expected_prev;
reg [3:0] Op_expected_prev;
reg [7:0] printPC_expected_prev;
reg  printPCYES_expected_prev;
reg  salidaBoton_expected_prev;
reg [6:0] SS0_expected_prev;
reg [6:0] SS1_expected_prev;
reg [6:0] SS2_expected_prev;
reg [6:0] SS3_expected_prev;

reg [25:0] last_instruccionMomento_exp;
reg [9:0] last_ledsR_exp;
reg [7:0] last_ledsV_exp;
reg  last_nclk_exp;
reg [3:0] last_Op_exp;
reg [7:0] last_printPC_exp;
reg  last_printPCYES_exp;
reg  last_salidaBoton_exp;
reg [6:0] last_SS0_exp;
reg [6:0] last_SS1_exp;
reg [6:0] last_SS2_exp;
reg [6:0] last_SS3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	instruccionMomento_prev = instruccionMomento;
	ledsR_prev = ledsR;
	ledsV_prev = ledsV;
	nclk_prev = nclk;
	Op_prev = Op;
	printPC_prev = printPC;
	printPCYES_prev = printPCYES;
	salidaBoton_prev = salidaBoton;
	SS0_prev = SS0;
	SS1_prev = SS1;
	SS2_prev = SS2;
	SS3_prev = SS3;
end

// update expected /o prevs

always @(trigger)
begin
	instruccionMomento_expected_prev = instruccionMomento_expected;
	ledsR_expected_prev = ledsR_expected;
	ledsV_expected_prev = ledsV_expected;
	nclk_expected_prev = nclk_expected;
	Op_expected_prev = Op_expected;
	printPC_expected_prev = printPC_expected;
	printPCYES_expected_prev = printPCYES_expected;
	salidaBoton_expected_prev = salidaBoton_expected;
	SS0_expected_prev = SS0_expected;
	SS1_expected_prev = SS1_expected;
	SS2_expected_prev = SS2_expected;
	SS3_expected_prev = SS3_expected;
end


// expected ledsR[ 9 ]
initial
begin
	ledsR_expected[9] = 1'bX;
	ledsR_expected[9] = #999000 1'b0;
end 
// expected ledsR[ 8 ]
initial
begin
	ledsR_expected[8] = 1'bX;
	ledsR_expected[8] = #999000 1'b0;
end 
// expected ledsR[ 7 ]
initial
begin
	ledsR_expected[7] = 1'bX;
	ledsR_expected[7] = #999000 1'b0;
end 
// expected ledsR[ 6 ]
initial
begin
	ledsR_expected[6] = 1'bX;
	ledsR_expected[6] = #999000 1'b0;
end 
// expected ledsR[ 5 ]
initial
begin
	ledsR_expected[5] = 1'bX;
	ledsR_expected[5] = #999000 1'b0;
end 
// expected ledsR[ 4 ]
initial
begin
	ledsR_expected[4] = 1'bX;
	ledsR_expected[4] = #999000 1'b0;
end 
// expected ledsR[ 3 ]
initial
begin
	ledsR_expected[3] = 1'bX;
	ledsR_expected[3] = #999000 1'b0;
end 
// expected ledsR[ 2 ]
initial
begin
	ledsR_expected[2] = 1'bX;
	ledsR_expected[2] = #999000 1'b0;
end 
// expected ledsR[ 1 ]
initial
begin
	ledsR_expected[1] = 1'bX;
	ledsR_expected[1] = #999000 1'b0;
end 
// expected ledsR[ 0 ]
initial
begin
	ledsR_expected[0] = 1'bX;
	ledsR_expected[0] = #999000 1'b0;
end 
// expected ledsV[ 7 ]
initial
begin
	ledsV_expected[7] = 1'bX;
	ledsV_expected[7] = #999000 1'b0;
end 
// expected ledsV[ 6 ]
initial
begin
	ledsV_expected[6] = 1'bX;
	ledsV_expected[6] = #999000 1'b0;
end 
// expected ledsV[ 5 ]
initial
begin
	ledsV_expected[5] = 1'bX;
	ledsV_expected[5] = #999000 1'b0;
end 
// expected ledsV[ 4 ]
initial
begin
	ledsV_expected[4] = 1'bX;
	ledsV_expected[4] = #999000 1'b0;
end 
// expected ledsV[ 3 ]
initial
begin
	ledsV_expected[3] = 1'bX;
	ledsV_expected[3] = #999000 1'b0;
end 
// expected ledsV[ 2 ]
initial
begin
	ledsV_expected[2] = 1'bX;
	ledsV_expected[2] = #999000 1'b0;
end 
// expected ledsV[ 1 ]
initial
begin
	ledsV_expected[1] = 1'bX;
	ledsV_expected[1] = #999000 1'b0;
end 
// expected ledsV[ 0 ]
initial
begin
	ledsV_expected[0] = 1'bX;
	ledsV_expected[0] = #999000 1'b0;
end 
// expected printPC[ 7 ]
initial
begin
	printPC_expected[7] = 1'bX;
	printPC_expected[7] = #999000 1'b0;
end 
// expected printPC[ 6 ]
initial
begin
	printPC_expected[6] = 1'bX;
	printPC_expected[6] = #999000 1'b0;
end 
// expected printPC[ 5 ]
initial
begin
	printPC_expected[5] = 1'bX;
	printPC_expected[5] = #999000 1'b0;
end 
// expected printPC[ 4 ]
initial
begin
	printPC_expected[4] = 1'bX;
	printPC_expected[4] = #999000 1'b0;
end 
// expected printPC[ 3 ]
initial
begin
	printPC_expected[3] = 1'bX;
	printPC_expected[3] = #999000 1'b0;
end 
// expected printPC[ 2 ]
initial
begin
	printPC_expected[2] = 1'bX;
	printPC_expected[2] = #999000 1'b0;
end 
// expected printPC[ 1 ]
initial
begin
	printPC_expected[1] = 1'bX;
	printPC_expected[1] = #999000 1'b0;
end 
// expected printPC[ 0 ]
initial
begin
	printPC_expected[0] = 1'bX;
	printPC_expected[0] = #999000 1'b0;
end 

// expected printPCYES
initial
begin
	printPCYES_expected = 1'bX;
end 

// expected salidaBoton
initial
begin
	salidaBoton_expected = 1'bX;
end 
// expected SS0[ 6 ]
initial
begin
	SS0_expected[6] = 1'bX;
	SS0_expected[6] = #999000 1'b0;
end 
// expected SS0[ 5 ]
initial
begin
	SS0_expected[5] = 1'bX;
	SS0_expected[5] = #999000 1'b0;
end 
// expected SS0[ 4 ]
initial
begin
	SS0_expected[4] = 1'bX;
	SS0_expected[4] = #999000 1'b0;
end 
// expected SS0[ 3 ]
initial
begin
	SS0_expected[3] = 1'bX;
	SS0_expected[3] = #999000 1'b0;
end 
// expected SS0[ 2 ]
initial
begin
	SS0_expected[2] = 1'bX;
	SS0_expected[2] = #999000 1'b0;
end 
// expected SS0[ 1 ]
initial
begin
	SS0_expected[1] = 1'bX;
	SS0_expected[1] = #999000 1'b0;
end 
// expected SS0[ 0 ]
initial
begin
	SS0_expected[0] = 1'bX;
	SS0_expected[0] = #999000 1'b0;
end 
// expected SS1[ 6 ]
initial
begin
	SS1_expected[6] = 1'bX;
	SS1_expected[6] = #999000 1'b0;
end 
// expected SS1[ 5 ]
initial
begin
	SS1_expected[5] = 1'bX;
	SS1_expected[5] = #999000 1'b0;
end 
// expected SS1[ 4 ]
initial
begin
	SS1_expected[4] = 1'bX;
	SS1_expected[4] = #999000 1'b0;
end 
// expected SS1[ 3 ]
initial
begin
	SS1_expected[3] = 1'bX;
	SS1_expected[3] = #999000 1'b0;
end 
// expected SS1[ 2 ]
initial
begin
	SS1_expected[2] = 1'bX;
	SS1_expected[2] = #999000 1'b0;
end 
// expected SS1[ 1 ]
initial
begin
	SS1_expected[1] = 1'bX;
	SS1_expected[1] = #999000 1'b0;
end 
// expected SS1[ 0 ]
initial
begin
	SS1_expected[0] = 1'bX;
	SS1_expected[0] = #999000 1'b0;
end 
// expected SS2[ 6 ]
initial
begin
	SS2_expected[6] = 1'bX;
	SS2_expected[6] = #999000 1'b0;
end 
// expected SS2[ 5 ]
initial
begin
	SS2_expected[5] = 1'bX;
	SS2_expected[5] = #999000 1'b0;
end 
// expected SS2[ 4 ]
initial
begin
	SS2_expected[4] = 1'bX;
	SS2_expected[4] = #999000 1'b0;
end 
// expected SS2[ 3 ]
initial
begin
	SS2_expected[3] = 1'bX;
	SS2_expected[3] = #999000 1'b0;
end 
// expected SS2[ 2 ]
initial
begin
	SS2_expected[2] = 1'bX;
	SS2_expected[2] = #999000 1'b0;
end 
// expected SS2[ 1 ]
initial
begin
	SS2_expected[1] = 1'bX;
	SS2_expected[1] = #999000 1'b0;
end 
// expected SS2[ 0 ]
initial
begin
	SS2_expected[0] = 1'bX;
	SS2_expected[0] = #999000 1'b0;
end 
// expected SS3[ 6 ]
initial
begin
	SS3_expected[6] = 1'bX;
	SS3_expected[6] = #999000 1'b0;
end 
// expected SS3[ 5 ]
initial
begin
	SS3_expected[5] = 1'bX;
	SS3_expected[5] = #999000 1'b0;
end 
// expected SS3[ 4 ]
initial
begin
	SS3_expected[4] = 1'bX;
	SS3_expected[4] = #999000 1'b0;
end 
// expected SS3[ 3 ]
initial
begin
	SS3_expected[3] = 1'bX;
	SS3_expected[3] = #999000 1'b0;
end 
// expected SS3[ 2 ]
initial
begin
	SS3_expected[2] = 1'bX;
	SS3_expected[2] = #999000 1'b0;
end 
// expected SS3[ 1 ]
initial
begin
	SS3_expected[1] = 1'bX;
	SS3_expected[1] = #999000 1'b0;
end 
// expected SS3[ 0 ]
initial
begin
	SS3_expected[0] = 1'bX;
	SS3_expected[0] = #999000 1'b0;
end 
// expected Op[ 3 ]
initial
begin
	Op_expected[3] = 1'bX;
	Op_expected[3] = #999000 1'b0;
end 
// expected Op[ 2 ]
initial
begin
	Op_expected[2] = 1'bX;
	Op_expected[2] = #999000 1'b0;
end 
// expected Op[ 1 ]
initial
begin
	Op_expected[1] = 1'bX;
	Op_expected[1] = #999000 1'b0;
end 
// expected Op[ 0 ]
initial
begin
	Op_expected[0] = 1'bX;
	Op_expected[0] = #999000 1'b0;
end 
// expected instruccionMomento[ 25 ]
initial
begin
	instruccionMomento_expected[25] = 1'bX;
	instruccionMomento_expected[25] = #999000 1'b0;
end 
// expected instruccionMomento[ 24 ]
initial
begin
	instruccionMomento_expected[24] = 1'bX;
	instruccionMomento_expected[24] = #999000 1'b0;
end 
// expected instruccionMomento[ 23 ]
initial
begin
	instruccionMomento_expected[23] = 1'bX;
	instruccionMomento_expected[23] = #999000 1'b0;
end 
// expected instruccionMomento[ 22 ]
initial
begin
	instruccionMomento_expected[22] = 1'bX;
	instruccionMomento_expected[22] = #999000 1'b0;
end 
// expected instruccionMomento[ 21 ]
initial
begin
	instruccionMomento_expected[21] = 1'bX;
	instruccionMomento_expected[21] = #999000 1'b0;
end 
// expected instruccionMomento[ 20 ]
initial
begin
	instruccionMomento_expected[20] = 1'bX;
	instruccionMomento_expected[20] = #999000 1'b0;
end 
// expected instruccionMomento[ 19 ]
initial
begin
	instruccionMomento_expected[19] = 1'bX;
	instruccionMomento_expected[19] = #999000 1'b0;
end 
// expected instruccionMomento[ 18 ]
initial
begin
	instruccionMomento_expected[18] = 1'bX;
	instruccionMomento_expected[18] = #999000 1'b0;
end 
// expected instruccionMomento[ 17 ]
initial
begin
	instruccionMomento_expected[17] = 1'bX;
	instruccionMomento_expected[17] = #999000 1'b0;
end 
// expected instruccionMomento[ 16 ]
initial
begin
	instruccionMomento_expected[16] = 1'bX;
	instruccionMomento_expected[16] = #999000 1'b0;
end 
// expected instruccionMomento[ 15 ]
initial
begin
	instruccionMomento_expected[15] = 1'bX;
	instruccionMomento_expected[15] = #999000 1'b0;
end 
// expected instruccionMomento[ 14 ]
initial
begin
	instruccionMomento_expected[14] = 1'bX;
	instruccionMomento_expected[14] = #999000 1'b0;
end 
// expected instruccionMomento[ 13 ]
initial
begin
	instruccionMomento_expected[13] = 1'bX;
	instruccionMomento_expected[13] = #999000 1'b0;
end 
// expected instruccionMomento[ 12 ]
initial
begin
	instruccionMomento_expected[12] = 1'bX;
	instruccionMomento_expected[12] = #999000 1'b0;
end 
// expected instruccionMomento[ 11 ]
initial
begin
	instruccionMomento_expected[11] = 1'bX;
	instruccionMomento_expected[11] = #999000 1'b0;
end 
// expected instruccionMomento[ 10 ]
initial
begin
	instruccionMomento_expected[10] = 1'bX;
	instruccionMomento_expected[10] = #999000 1'b0;
end 
// expected instruccionMomento[ 9 ]
initial
begin
	instruccionMomento_expected[9] = 1'bX;
	instruccionMomento_expected[9] = #999000 1'b0;
end 
// expected instruccionMomento[ 8 ]
initial
begin
	instruccionMomento_expected[8] = 1'bX;
	instruccionMomento_expected[8] = #999000 1'b0;
end 
// expected instruccionMomento[ 7 ]
initial
begin
	instruccionMomento_expected[7] = 1'bX;
	instruccionMomento_expected[7] = #999000 1'b0;
end 
// expected instruccionMomento[ 6 ]
initial
begin
	instruccionMomento_expected[6] = 1'bX;
	instruccionMomento_expected[6] = #999000 1'b0;
end 
// expected instruccionMomento[ 5 ]
initial
begin
	instruccionMomento_expected[5] = 1'bX;
	instruccionMomento_expected[5] = #999000 1'b0;
end 
// expected instruccionMomento[ 4 ]
initial
begin
	instruccionMomento_expected[4] = 1'bX;
	instruccionMomento_expected[4] = #999000 1'b0;
end 
// expected instruccionMomento[ 3 ]
initial
begin
	instruccionMomento_expected[3] = 1'bX;
	instruccionMomento_expected[3] = #999000 1'b0;
end 
// expected instruccionMomento[ 2 ]
initial
begin
	instruccionMomento_expected[2] = 1'bX;
	instruccionMomento_expected[2] = #999000 1'b0;
end 
// expected instruccionMomento[ 1 ]
initial
begin
	instruccionMomento_expected[1] = 1'bX;
	instruccionMomento_expected[1] = #999000 1'b0;
end 
// expected instruccionMomento[ 0 ]
initial
begin
	instruccionMomento_expected[0] = 1'bX;
	instruccionMomento_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(instruccionMomento_expected or instruccionMomento or ledsR_expected or ledsR or ledsV_expected or ledsV or nclk_expected or nclk or Op_expected or Op or printPC_expected or printPC or printPCYES_expected or printPCYES or salidaBoton_expected or salidaBoton or SS0_expected or SS0 or SS1_expected or SS1 or SS2_expected or SS2 or SS3_expected or SS3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected instruccionMomento = %b | expected ledsR = %b | expected ledsV = %b | expected nclk = %b | expected Op = %b | expected printPC = %b | expected printPCYES = %b | expected salidaBoton = %b | expected SS0 = %b | expected SS1 = %b | expected SS2 = %b | expected SS3 = %b | ",instruccionMomento_expected_prev,ledsR_expected_prev,ledsV_expected_prev,nclk_expected_prev,Op_expected_prev,printPC_expected_prev,printPCYES_expected_prev,salidaBoton_expected_prev,SS0_expected_prev,SS1_expected_prev,SS2_expected_prev,SS3_expected_prev);
	$display("| real instruccionMomento = %b | real ledsR = %b | real ledsV = %b | real nclk = %b | real Op = %b | real printPC = %b | real printPCYES = %b | real salidaBoton = %b | real SS0 = %b | real SS1 = %b | real SS2 = %b | real SS3 = %b | ",instruccionMomento_prev,ledsR_prev,ledsV_prev,nclk_prev,Op_prev,printPC_prev,printPCYES_prev,salidaBoton_prev,SS0_prev,SS1_prev,SS2_prev,SS3_prev);
`endif
	if (
		( instruccionMomento_expected_prev[0] !== 1'bx ) && ( instruccionMomento_prev[0] !== instruccionMomento_expected_prev[0] )
		&& ((instruccionMomento_expected_prev[0] !== last_instruccionMomento_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[0] = instruccionMomento_expected_prev[0];
	end
	if (
		( instruccionMomento_expected_prev[1] !== 1'bx ) && ( instruccionMomento_prev[1] !== instruccionMomento_expected_prev[1] )
		&& ((instruccionMomento_expected_prev[1] !== last_instruccionMomento_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[1] = instruccionMomento_expected_prev[1];
	end
	if (
		( instruccionMomento_expected_prev[2] !== 1'bx ) && ( instruccionMomento_prev[2] !== instruccionMomento_expected_prev[2] )
		&& ((instruccionMomento_expected_prev[2] !== last_instruccionMomento_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[2] = instruccionMomento_expected_prev[2];
	end
	if (
		( instruccionMomento_expected_prev[3] !== 1'bx ) && ( instruccionMomento_prev[3] !== instruccionMomento_expected_prev[3] )
		&& ((instruccionMomento_expected_prev[3] !== last_instruccionMomento_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[3] = instruccionMomento_expected_prev[3];
	end
	if (
		( instruccionMomento_expected_prev[4] !== 1'bx ) && ( instruccionMomento_prev[4] !== instruccionMomento_expected_prev[4] )
		&& ((instruccionMomento_expected_prev[4] !== last_instruccionMomento_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[4] = instruccionMomento_expected_prev[4];
	end
	if (
		( instruccionMomento_expected_prev[5] !== 1'bx ) && ( instruccionMomento_prev[5] !== instruccionMomento_expected_prev[5] )
		&& ((instruccionMomento_expected_prev[5] !== last_instruccionMomento_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[5] = instruccionMomento_expected_prev[5];
	end
	if (
		( instruccionMomento_expected_prev[6] !== 1'bx ) && ( instruccionMomento_prev[6] !== instruccionMomento_expected_prev[6] )
		&& ((instruccionMomento_expected_prev[6] !== last_instruccionMomento_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[6] = instruccionMomento_expected_prev[6];
	end
	if (
		( instruccionMomento_expected_prev[7] !== 1'bx ) && ( instruccionMomento_prev[7] !== instruccionMomento_expected_prev[7] )
		&& ((instruccionMomento_expected_prev[7] !== last_instruccionMomento_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[7] = instruccionMomento_expected_prev[7];
	end
	if (
		( instruccionMomento_expected_prev[8] !== 1'bx ) && ( instruccionMomento_prev[8] !== instruccionMomento_expected_prev[8] )
		&& ((instruccionMomento_expected_prev[8] !== last_instruccionMomento_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[8] = instruccionMomento_expected_prev[8];
	end
	if (
		( instruccionMomento_expected_prev[9] !== 1'bx ) && ( instruccionMomento_prev[9] !== instruccionMomento_expected_prev[9] )
		&& ((instruccionMomento_expected_prev[9] !== last_instruccionMomento_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[9] = instruccionMomento_expected_prev[9];
	end
	if (
		( instruccionMomento_expected_prev[10] !== 1'bx ) && ( instruccionMomento_prev[10] !== instruccionMomento_expected_prev[10] )
		&& ((instruccionMomento_expected_prev[10] !== last_instruccionMomento_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[10] = instruccionMomento_expected_prev[10];
	end
	if (
		( instruccionMomento_expected_prev[11] !== 1'bx ) && ( instruccionMomento_prev[11] !== instruccionMomento_expected_prev[11] )
		&& ((instruccionMomento_expected_prev[11] !== last_instruccionMomento_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[11] = instruccionMomento_expected_prev[11];
	end
	if (
		( instruccionMomento_expected_prev[12] !== 1'bx ) && ( instruccionMomento_prev[12] !== instruccionMomento_expected_prev[12] )
		&& ((instruccionMomento_expected_prev[12] !== last_instruccionMomento_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[12] = instruccionMomento_expected_prev[12];
	end
	if (
		( instruccionMomento_expected_prev[13] !== 1'bx ) && ( instruccionMomento_prev[13] !== instruccionMomento_expected_prev[13] )
		&& ((instruccionMomento_expected_prev[13] !== last_instruccionMomento_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[13] = instruccionMomento_expected_prev[13];
	end
	if (
		( instruccionMomento_expected_prev[14] !== 1'bx ) && ( instruccionMomento_prev[14] !== instruccionMomento_expected_prev[14] )
		&& ((instruccionMomento_expected_prev[14] !== last_instruccionMomento_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[14] = instruccionMomento_expected_prev[14];
	end
	if (
		( instruccionMomento_expected_prev[15] !== 1'bx ) && ( instruccionMomento_prev[15] !== instruccionMomento_expected_prev[15] )
		&& ((instruccionMomento_expected_prev[15] !== last_instruccionMomento_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[15] = instruccionMomento_expected_prev[15];
	end
	if (
		( instruccionMomento_expected_prev[16] !== 1'bx ) && ( instruccionMomento_prev[16] !== instruccionMomento_expected_prev[16] )
		&& ((instruccionMomento_expected_prev[16] !== last_instruccionMomento_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[16] = instruccionMomento_expected_prev[16];
	end
	if (
		( instruccionMomento_expected_prev[17] !== 1'bx ) && ( instruccionMomento_prev[17] !== instruccionMomento_expected_prev[17] )
		&& ((instruccionMomento_expected_prev[17] !== last_instruccionMomento_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[17] = instruccionMomento_expected_prev[17];
	end
	if (
		( instruccionMomento_expected_prev[18] !== 1'bx ) && ( instruccionMomento_prev[18] !== instruccionMomento_expected_prev[18] )
		&& ((instruccionMomento_expected_prev[18] !== last_instruccionMomento_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[18] = instruccionMomento_expected_prev[18];
	end
	if (
		( instruccionMomento_expected_prev[19] !== 1'bx ) && ( instruccionMomento_prev[19] !== instruccionMomento_expected_prev[19] )
		&& ((instruccionMomento_expected_prev[19] !== last_instruccionMomento_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[19] = instruccionMomento_expected_prev[19];
	end
	if (
		( instruccionMomento_expected_prev[20] !== 1'bx ) && ( instruccionMomento_prev[20] !== instruccionMomento_expected_prev[20] )
		&& ((instruccionMomento_expected_prev[20] !== last_instruccionMomento_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[20] = instruccionMomento_expected_prev[20];
	end
	if (
		( instruccionMomento_expected_prev[21] !== 1'bx ) && ( instruccionMomento_prev[21] !== instruccionMomento_expected_prev[21] )
		&& ((instruccionMomento_expected_prev[21] !== last_instruccionMomento_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[21] = instruccionMomento_expected_prev[21];
	end
	if (
		( instruccionMomento_expected_prev[22] !== 1'bx ) && ( instruccionMomento_prev[22] !== instruccionMomento_expected_prev[22] )
		&& ((instruccionMomento_expected_prev[22] !== last_instruccionMomento_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[22] = instruccionMomento_expected_prev[22];
	end
	if (
		( instruccionMomento_expected_prev[23] !== 1'bx ) && ( instruccionMomento_prev[23] !== instruccionMomento_expected_prev[23] )
		&& ((instruccionMomento_expected_prev[23] !== last_instruccionMomento_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[23] = instruccionMomento_expected_prev[23];
	end
	if (
		( instruccionMomento_expected_prev[24] !== 1'bx ) && ( instruccionMomento_prev[24] !== instruccionMomento_expected_prev[24] )
		&& ((instruccionMomento_expected_prev[24] !== last_instruccionMomento_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[24] = instruccionMomento_expected_prev[24];
	end
	if (
		( instruccionMomento_expected_prev[25] !== 1'bx ) && ( instruccionMomento_prev[25] !== instruccionMomento_expected_prev[25] )
		&& ((instruccionMomento_expected_prev[25] !== last_instruccionMomento_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruccionMomento[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruccionMomento_expected_prev);
		$display ("     Real value = %b", instruccionMomento_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruccionMomento_exp[25] = instruccionMomento_expected_prev[25];
	end
	if (
		( ledsR_expected_prev[0] !== 1'bx ) && ( ledsR_prev[0] !== ledsR_expected_prev[0] )
		&& ((ledsR_expected_prev[0] !== last_ledsR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsR_exp[0] = ledsR_expected_prev[0];
	end
	if (
		( ledsR_expected_prev[1] !== 1'bx ) && ( ledsR_prev[1] !== ledsR_expected_prev[1] )
		&& ((ledsR_expected_prev[1] !== last_ledsR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsR_exp[1] = ledsR_expected_prev[1];
	end
	if (
		( ledsR_expected_prev[2] !== 1'bx ) && ( ledsR_prev[2] !== ledsR_expected_prev[2] )
		&& ((ledsR_expected_prev[2] !== last_ledsR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsR_exp[2] = ledsR_expected_prev[2];
	end
	if (
		( ledsR_expected_prev[3] !== 1'bx ) && ( ledsR_prev[3] !== ledsR_expected_prev[3] )
		&& ((ledsR_expected_prev[3] !== last_ledsR_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsR_exp[3] = ledsR_expected_prev[3];
	end
	if (
		( ledsR_expected_prev[4] !== 1'bx ) && ( ledsR_prev[4] !== ledsR_expected_prev[4] )
		&& ((ledsR_expected_prev[4] !== last_ledsR_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsR_exp[4] = ledsR_expected_prev[4];
	end
	if (
		( ledsR_expected_prev[5] !== 1'bx ) && ( ledsR_prev[5] !== ledsR_expected_prev[5] )
		&& ((ledsR_expected_prev[5] !== last_ledsR_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsR_exp[5] = ledsR_expected_prev[5];
	end
	if (
		( ledsR_expected_prev[6] !== 1'bx ) && ( ledsR_prev[6] !== ledsR_expected_prev[6] )
		&& ((ledsR_expected_prev[6] !== last_ledsR_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsR_exp[6] = ledsR_expected_prev[6];
	end
	if (
		( ledsR_expected_prev[7] !== 1'bx ) && ( ledsR_prev[7] !== ledsR_expected_prev[7] )
		&& ((ledsR_expected_prev[7] !== last_ledsR_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsR_exp[7] = ledsR_expected_prev[7];
	end
	if (
		( ledsR_expected_prev[8] !== 1'bx ) && ( ledsR_prev[8] !== ledsR_expected_prev[8] )
		&& ((ledsR_expected_prev[8] !== last_ledsR_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsR_exp[8] = ledsR_expected_prev[8];
	end
	if (
		( ledsR_expected_prev[9] !== 1'bx ) && ( ledsR_prev[9] !== ledsR_expected_prev[9] )
		&& ((ledsR_expected_prev[9] !== last_ledsR_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsR_expected_prev);
		$display ("     Real value = %b", ledsR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledsR_exp[9] = ledsR_expected_prev[9];
	end
	if (
		( ledsV_expected_prev[0] !== 1'bx ) && ( ledsV_prev[0] !== ledsV_expected_prev[0] )
		&& ((ledsV_expected_prev[0] !== last_ledsV_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsV_exp[0] = ledsV_expected_prev[0];
	end
	if (
		( ledsV_expected_prev[1] !== 1'bx ) && ( ledsV_prev[1] !== ledsV_expected_prev[1] )
		&& ((ledsV_expected_prev[1] !== last_ledsV_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsV_exp[1] = ledsV_expected_prev[1];
	end
	if (
		( ledsV_expected_prev[2] !== 1'bx ) && ( ledsV_prev[2] !== ledsV_expected_prev[2] )
		&& ((ledsV_expected_prev[2] !== last_ledsV_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsV_exp[2] = ledsV_expected_prev[2];
	end
	if (
		( ledsV_expected_prev[3] !== 1'bx ) && ( ledsV_prev[3] !== ledsV_expected_prev[3] )
		&& ((ledsV_expected_prev[3] !== last_ledsV_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsV_exp[3] = ledsV_expected_prev[3];
	end
	if (
		( ledsV_expected_prev[4] !== 1'bx ) && ( ledsV_prev[4] !== ledsV_expected_prev[4] )
		&& ((ledsV_expected_prev[4] !== last_ledsV_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsV_exp[4] = ledsV_expected_prev[4];
	end
	if (
		( ledsV_expected_prev[5] !== 1'bx ) && ( ledsV_prev[5] !== ledsV_expected_prev[5] )
		&& ((ledsV_expected_prev[5] !== last_ledsV_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsV_exp[5] = ledsV_expected_prev[5];
	end
	if (
		( ledsV_expected_prev[6] !== 1'bx ) && ( ledsV_prev[6] !== ledsV_expected_prev[6] )
		&& ((ledsV_expected_prev[6] !== last_ledsV_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsV_exp[6] = ledsV_expected_prev[6];
	end
	if (
		( ledsV_expected_prev[7] !== 1'bx ) && ( ledsV_prev[7] !== ledsV_expected_prev[7] )
		&& ((ledsV_expected_prev[7] !== last_ledsV_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsV[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsV_expected_prev);
		$display ("     Real value = %b", ledsV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsV_exp[7] = ledsV_expected_prev[7];
	end
	if (
		( nclk_expected_prev !== 1'bx ) && ( nclk_prev !== nclk_expected_prev )
		&& ((nclk_expected_prev !== last_nclk_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nclk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nclk_expected_prev);
		$display ("     Real value = %b", nclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_nclk_exp = nclk_expected_prev;
	end
	if (
		( Op_expected_prev[0] !== 1'bx ) && ( Op_prev[0] !== Op_expected_prev[0] )
		&& ((Op_expected_prev[0] !== last_Op_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Op[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Op_expected_prev);
		$display ("     Real value = %b", Op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Op_exp[0] = Op_expected_prev[0];
	end
	if (
		( Op_expected_prev[1] !== 1'bx ) && ( Op_prev[1] !== Op_expected_prev[1] )
		&& ((Op_expected_prev[1] !== last_Op_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Op[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Op_expected_prev);
		$display ("     Real value = %b", Op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Op_exp[1] = Op_expected_prev[1];
	end
	if (
		( Op_expected_prev[2] !== 1'bx ) && ( Op_prev[2] !== Op_expected_prev[2] )
		&& ((Op_expected_prev[2] !== last_Op_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Op[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Op_expected_prev);
		$display ("     Real value = %b", Op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Op_exp[2] = Op_expected_prev[2];
	end
	if (
		( Op_expected_prev[3] !== 1'bx ) && ( Op_prev[3] !== Op_expected_prev[3] )
		&& ((Op_expected_prev[3] !== last_Op_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Op[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Op_expected_prev);
		$display ("     Real value = %b", Op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Op_exp[3] = Op_expected_prev[3];
	end
	if (
		( printPC_expected_prev[0] !== 1'bx ) && ( printPC_prev[0] !== printPC_expected_prev[0] )
		&& ((printPC_expected_prev[0] !== last_printPC_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port printPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", printPC_expected_prev);
		$display ("     Real value = %b", printPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_printPC_exp[0] = printPC_expected_prev[0];
	end
	if (
		( printPC_expected_prev[1] !== 1'bx ) && ( printPC_prev[1] !== printPC_expected_prev[1] )
		&& ((printPC_expected_prev[1] !== last_printPC_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port printPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", printPC_expected_prev);
		$display ("     Real value = %b", printPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_printPC_exp[1] = printPC_expected_prev[1];
	end
	if (
		( printPC_expected_prev[2] !== 1'bx ) && ( printPC_prev[2] !== printPC_expected_prev[2] )
		&& ((printPC_expected_prev[2] !== last_printPC_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port printPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", printPC_expected_prev);
		$display ("     Real value = %b", printPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_printPC_exp[2] = printPC_expected_prev[2];
	end
	if (
		( printPC_expected_prev[3] !== 1'bx ) && ( printPC_prev[3] !== printPC_expected_prev[3] )
		&& ((printPC_expected_prev[3] !== last_printPC_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port printPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", printPC_expected_prev);
		$display ("     Real value = %b", printPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_printPC_exp[3] = printPC_expected_prev[3];
	end
	if (
		( printPC_expected_prev[4] !== 1'bx ) && ( printPC_prev[4] !== printPC_expected_prev[4] )
		&& ((printPC_expected_prev[4] !== last_printPC_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port printPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", printPC_expected_prev);
		$display ("     Real value = %b", printPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_printPC_exp[4] = printPC_expected_prev[4];
	end
	if (
		( printPC_expected_prev[5] !== 1'bx ) && ( printPC_prev[5] !== printPC_expected_prev[5] )
		&& ((printPC_expected_prev[5] !== last_printPC_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port printPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", printPC_expected_prev);
		$display ("     Real value = %b", printPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_printPC_exp[5] = printPC_expected_prev[5];
	end
	if (
		( printPC_expected_prev[6] !== 1'bx ) && ( printPC_prev[6] !== printPC_expected_prev[6] )
		&& ((printPC_expected_prev[6] !== last_printPC_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port printPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", printPC_expected_prev);
		$display ("     Real value = %b", printPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_printPC_exp[6] = printPC_expected_prev[6];
	end
	if (
		( printPC_expected_prev[7] !== 1'bx ) && ( printPC_prev[7] !== printPC_expected_prev[7] )
		&& ((printPC_expected_prev[7] !== last_printPC_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port printPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", printPC_expected_prev);
		$display ("     Real value = %b", printPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_printPC_exp[7] = printPC_expected_prev[7];
	end
	if (
		( printPCYES_expected_prev !== 1'bx ) && ( printPCYES_prev !== printPCYES_expected_prev )
		&& ((printPCYES_expected_prev !== last_printPCYES_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port printPCYES :: @time = %t",  $realtime);
		$display ("     Expected value = %b", printPCYES_expected_prev);
		$display ("     Real value = %b", printPCYES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_printPCYES_exp = printPCYES_expected_prev;
	end
	if (
		( salidaBoton_expected_prev !== 1'bx ) && ( salidaBoton_prev !== salidaBoton_expected_prev )
		&& ((salidaBoton_expected_prev !== last_salidaBoton_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port salidaBoton :: @time = %t",  $realtime);
		$display ("     Expected value = %b", salidaBoton_expected_prev);
		$display ("     Real value = %b", salidaBoton_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_salidaBoton_exp = salidaBoton_expected_prev;
	end
	if (
		( SS0_expected_prev[0] !== 1'bx ) && ( SS0_prev[0] !== SS0_expected_prev[0] )
		&& ((SS0_expected_prev[0] !== last_SS0_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SS0_exp[0] = SS0_expected_prev[0];
	end
	if (
		( SS0_expected_prev[1] !== 1'bx ) && ( SS0_prev[1] !== SS0_expected_prev[1] )
		&& ((SS0_expected_prev[1] !== last_SS0_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SS0_exp[1] = SS0_expected_prev[1];
	end
	if (
		( SS0_expected_prev[2] !== 1'bx ) && ( SS0_prev[2] !== SS0_expected_prev[2] )
		&& ((SS0_expected_prev[2] !== last_SS0_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SS0_exp[2] = SS0_expected_prev[2];
	end
	if (
		( SS0_expected_prev[3] !== 1'bx ) && ( SS0_prev[3] !== SS0_expected_prev[3] )
		&& ((SS0_expected_prev[3] !== last_SS0_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SS0_exp[3] = SS0_expected_prev[3];
	end
	if (
		( SS0_expected_prev[4] !== 1'bx ) && ( SS0_prev[4] !== SS0_expected_prev[4] )
		&& ((SS0_expected_prev[4] !== last_SS0_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SS0_exp[4] = SS0_expected_prev[4];
	end
	if (
		( SS0_expected_prev[5] !== 1'bx ) && ( SS0_prev[5] !== SS0_expected_prev[5] )
		&& ((SS0_expected_prev[5] !== last_SS0_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SS0_exp[5] = SS0_expected_prev[5];
	end
	if (
		( SS0_expected_prev[6] !== 1'bx ) && ( SS0_prev[6] !== SS0_expected_prev[6] )
		&& ((SS0_expected_prev[6] !== last_SS0_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SS0_exp[6] = SS0_expected_prev[6];
	end
	if (
		( SS1_expected_prev[0] !== 1'bx ) && ( SS1_prev[0] !== SS1_expected_prev[0] )
		&& ((SS1_expected_prev[0] !== last_SS1_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SS1_exp[0] = SS1_expected_prev[0];
	end
	if (
		( SS1_expected_prev[1] !== 1'bx ) && ( SS1_prev[1] !== SS1_expected_prev[1] )
		&& ((SS1_expected_prev[1] !== last_SS1_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SS1_exp[1] = SS1_expected_prev[1];
	end
	if (
		( SS1_expected_prev[2] !== 1'bx ) && ( SS1_prev[2] !== SS1_expected_prev[2] )
		&& ((SS1_expected_prev[2] !== last_SS1_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SS1_exp[2] = SS1_expected_prev[2];
	end
	if (
		( SS1_expected_prev[3] !== 1'bx ) && ( SS1_prev[3] !== SS1_expected_prev[3] )
		&& ((SS1_expected_prev[3] !== last_SS1_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SS1_exp[3] = SS1_expected_prev[3];
	end
	if (
		( SS1_expected_prev[4] !== 1'bx ) && ( SS1_prev[4] !== SS1_expected_prev[4] )
		&& ((SS1_expected_prev[4] !== last_SS1_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SS1_exp[4] = SS1_expected_prev[4];
	end
	if (
		( SS1_expected_prev[5] !== 1'bx ) && ( SS1_prev[5] !== SS1_expected_prev[5] )
		&& ((SS1_expected_prev[5] !== last_SS1_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SS1_exp[5] = SS1_expected_prev[5];
	end
	if (
		( SS1_expected_prev[6] !== 1'bx ) && ( SS1_prev[6] !== SS1_expected_prev[6] )
		&& ((SS1_expected_prev[6] !== last_SS1_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SS1_exp[6] = SS1_expected_prev[6];
	end
	if (
		( SS2_expected_prev[0] !== 1'bx ) && ( SS2_prev[0] !== SS2_expected_prev[0] )
		&& ((SS2_expected_prev[0] !== last_SS2_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_SS2_exp[0] = SS2_expected_prev[0];
	end
	if (
		( SS2_expected_prev[1] !== 1'bx ) && ( SS2_prev[1] !== SS2_expected_prev[1] )
		&& ((SS2_expected_prev[1] !== last_SS2_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_SS2_exp[1] = SS2_expected_prev[1];
	end
	if (
		( SS2_expected_prev[2] !== 1'bx ) && ( SS2_prev[2] !== SS2_expected_prev[2] )
		&& ((SS2_expected_prev[2] !== last_SS2_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_SS2_exp[2] = SS2_expected_prev[2];
	end
	if (
		( SS2_expected_prev[3] !== 1'bx ) && ( SS2_prev[3] !== SS2_expected_prev[3] )
		&& ((SS2_expected_prev[3] !== last_SS2_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_SS2_exp[3] = SS2_expected_prev[3];
	end
	if (
		( SS2_expected_prev[4] !== 1'bx ) && ( SS2_prev[4] !== SS2_expected_prev[4] )
		&& ((SS2_expected_prev[4] !== last_SS2_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_SS2_exp[4] = SS2_expected_prev[4];
	end
	if (
		( SS2_expected_prev[5] !== 1'bx ) && ( SS2_prev[5] !== SS2_expected_prev[5] )
		&& ((SS2_expected_prev[5] !== last_SS2_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_SS2_exp[5] = SS2_expected_prev[5];
	end
	if (
		( SS2_expected_prev[6] !== 1'bx ) && ( SS2_prev[6] !== SS2_expected_prev[6] )
		&& ((SS2_expected_prev[6] !== last_SS2_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_SS2_exp[6] = SS2_expected_prev[6];
	end
	if (
		( SS3_expected_prev[0] !== 1'bx ) && ( SS3_prev[0] !== SS3_expected_prev[0] )
		&& ((SS3_expected_prev[0] !== last_SS3_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SS3_exp[0] = SS3_expected_prev[0];
	end
	if (
		( SS3_expected_prev[1] !== 1'bx ) && ( SS3_prev[1] !== SS3_expected_prev[1] )
		&& ((SS3_expected_prev[1] !== last_SS3_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SS3_exp[1] = SS3_expected_prev[1];
	end
	if (
		( SS3_expected_prev[2] !== 1'bx ) && ( SS3_prev[2] !== SS3_expected_prev[2] )
		&& ((SS3_expected_prev[2] !== last_SS3_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SS3_exp[2] = SS3_expected_prev[2];
	end
	if (
		( SS3_expected_prev[3] !== 1'bx ) && ( SS3_prev[3] !== SS3_expected_prev[3] )
		&& ((SS3_expected_prev[3] !== last_SS3_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SS3_exp[3] = SS3_expected_prev[3];
	end
	if (
		( SS3_expected_prev[4] !== 1'bx ) && ( SS3_prev[4] !== SS3_expected_prev[4] )
		&& ((SS3_expected_prev[4] !== last_SS3_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SS3_exp[4] = SS3_expected_prev[4];
	end
	if (
		( SS3_expected_prev[5] !== 1'bx ) && ( SS3_prev[5] !== SS3_expected_prev[5] )
		&& ((SS3_expected_prev[5] !== last_SS3_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SS3_exp[5] = SS3_expected_prev[5];
	end
	if (
		( SS3_expected_prev[6] !== 1'bx ) && ( SS3_prev[6] !== SS3_expected_prev[6] )
		&& ((SS3_expected_prev[6] !== last_SS3_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SS3_exp[6] = SS3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Principal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg EnterButton;
reg treg_nclk;
reg [3:0] switches0;
reg [3:0] switches1;
reg [1:0] switches2;
// wires                                               
wire [25:0] instruccionMomento;
wire [9:0] ledsR;
wire [7:0] ledsV;
wire nclk;
wire [3:0] Op;
wire [7:0] printPC;
wire printPCYES;
wire salidaBoton;
wire [6:0] SS0;
wire [6:0] SS1;
wire [6:0] SS2;
wire [6:0] SS3;

wire sampler;                             

// assign statements (if any)                          
assign nclk = treg_nclk;
Principal i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.EnterButton(EnterButton),
	.instruccionMomento(instruccionMomento),
	.ledsR(ledsR),
	.ledsV(ledsV),
	.nclk(nclk),
	.Op(Op),
	.printPC(printPC),
	.printPCYES(printPCYES),
	.salidaBoton(salidaBoton),
	.SS0(SS0),
	.SS1(SS1),
	.SS2(SS2),
	.SS3(SS3),
	.switches0(switches0),
	.switches1(switches1),
	.switches2(switches2)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// EnterButton
initial
begin
	EnterButton = 1'b0;
end 

// nclk
initial
begin
	treg_nclk = 1'bZ;
end 
// switches0[ 3 ]
initial
begin
	switches0[3] = 1'b0;
end 
// switches0[ 2 ]
initial
begin
	switches0[2] = 1'b0;
end 
// switches0[ 1 ]
initial
begin
	switches0[1] = 1'b0;
end 
// switches0[ 0 ]
initial
begin
	switches0[0] = 1'b0;
end 
// switches1[ 3 ]
initial
begin
	switches1[3] = 1'b0;
end 
// switches1[ 2 ]
initial
begin
	switches1[2] = 1'b0;
end 
// switches1[ 1 ]
initial
begin
	switches1[1] = 1'b0;
end 
// switches1[ 0 ]
initial
begin
	switches1[0] = 1'b0;
end 
// switches2[ 1 ]
initial
begin
	switches2[1] = 1'b0;
end 
// switches2[ 0 ]
initial
begin
	switches2[0] = 1'b0;
end 

Principal_vlg_sample_tst tb_sample (
	.clk(clk),
	.EnterButton(EnterButton),
	.nclk(nclk),
	.switches0(switches0),
	.switches1(switches1),
	.switches2(switches2),
	.sampler_tx(sampler)
);

Principal_vlg_check_tst tb_out(
	.instruccionMomento(instruccionMomento),
	.ledsR(ledsR),
	.ledsV(ledsV),
	.nclk(nclk),
	.Op(Op),
	.printPC(printPC),
	.printPCYES(printPCYES),
	.salidaBoton(salidaBoton),
	.SS0(SS0),
	.SS1(SS1),
	.SS2(SS2),
	.SS3(SS3),
	.sampler_rx(sampler)
);
endmodule

