// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2018 08:34:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    UC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UC_vlg_sample_tst(
	Clk,
	Opcode,
	sampler_tx
);
input  Clk;
input [3:0] Opcode;
output sampler_tx;

reg sample;
time current_time;
always @(Clk or Opcode)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module UC_vlg_check_tst (
	AluOP,
	AluOut,
	AluSrcA,
	Beq,
	Bgt,
	Bne,
	DatSel,
	Dg,
	IO,
	Jump,
	PCWrite,
	RMD,
	RMI,
	WIR,
	WMD,
	WRF,
	sampler_rx
);
input [1:0] AluOP;
input  AluOut;
input  AluSrcA;
input  Beq;
input  Bgt;
input  Bne;
input  DatSel;
input  Dg;
input [2:0] IO;
input  Jump;
input  PCWrite;
input  RMD;
input  RMI;
input  WIR;
input  WMD;
input  WRF;
input sampler_rx;

reg [1:0] AluOP_expected;
reg  AluOut_expected;
reg  AluSrcA_expected;
reg  Beq_expected;
reg  Bgt_expected;
reg  Bne_expected;
reg  DatSel_expected;
reg  Dg_expected;
reg [2:0] IO_expected;
reg  Jump_expected;
reg  PCWrite_expected;
reg  RMD_expected;
reg  RMI_expected;
reg  WIR_expected;
reg  WMD_expected;
reg  WRF_expected;

reg [1:0] AluOP_prev;
reg  AluOut_prev;
reg  AluSrcA_prev;
reg  Beq_prev;
reg  Bgt_prev;
reg  Bne_prev;
reg  DatSel_prev;
reg  Dg_prev;
reg [2:0] IO_prev;
reg  Jump_prev;
reg  PCWrite_prev;
reg  RMD_prev;
reg  RMI_prev;
reg  WIR_prev;
reg  WMD_prev;
reg  WRF_prev;

reg [1:0] AluOP_expected_prev;
reg  AluOut_expected_prev;
reg  AluSrcA_expected_prev;
reg  Beq_expected_prev;
reg  Bgt_expected_prev;
reg  Bne_expected_prev;
reg  DatSel_expected_prev;
reg  Dg_expected_prev;
reg [2:0] IO_expected_prev;
reg  Jump_expected_prev;
reg  PCWrite_expected_prev;
reg  RMD_expected_prev;
reg  RMI_expected_prev;
reg  WIR_expected_prev;
reg  WMD_expected_prev;
reg  WRF_expected_prev;

reg [1:0] last_AluOP_exp;
reg  last_AluOut_exp;
reg  last_AluSrcA_exp;
reg  last_Beq_exp;
reg  last_Bgt_exp;
reg  last_Bne_exp;
reg  last_DatSel_exp;
reg  last_Dg_exp;
reg [2:0] last_IO_exp;
reg  last_Jump_exp;
reg  last_PCWrite_exp;
reg  last_RMD_exp;
reg  last_RMI_exp;
reg  last_WIR_exp;
reg  last_WMD_exp;
reg  last_WRF_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	AluOP_prev = AluOP;
	AluOut_prev = AluOut;
	AluSrcA_prev = AluSrcA;
	Beq_prev = Beq;
	Bgt_prev = Bgt;
	Bne_prev = Bne;
	DatSel_prev = DatSel;
	Dg_prev = Dg;
	IO_prev = IO;
	Jump_prev = Jump;
	PCWrite_prev = PCWrite;
	RMD_prev = RMD;
	RMI_prev = RMI;
	WIR_prev = WIR;
	WMD_prev = WMD;
	WRF_prev = WRF;
end

// update expected /o prevs

always @(trigger)
begin
	AluOP_expected_prev = AluOP_expected;
	AluOut_expected_prev = AluOut_expected;
	AluSrcA_expected_prev = AluSrcA_expected;
	Beq_expected_prev = Beq_expected;
	Bgt_expected_prev = Bgt_expected;
	Bne_expected_prev = Bne_expected;
	DatSel_expected_prev = DatSel_expected;
	Dg_expected_prev = Dg_expected;
	IO_expected_prev = IO_expected;
	Jump_expected_prev = Jump_expected;
	PCWrite_expected_prev = PCWrite_expected;
	RMD_expected_prev = RMD_expected;
	RMI_expected_prev = RMI_expected;
	WIR_expected_prev = WIR_expected;
	WMD_expected_prev = WMD_expected;
	WRF_expected_prev = WRF_expected;
end


// expected AluOP[ 1 ]
initial
begin
	AluOP_expected[1] = 1'bX;
end 
// expected AluOP[ 0 ]
initial
begin
	AluOP_expected[0] = 1'bX;
end 

// expected AluOut
initial
begin
	AluOut_expected = 1'bX;
end 

// expected AluSrcA
initial
begin
	AluSrcA_expected = 1'bX;
end 

// expected Beq
initial
begin
	Beq_expected = 1'bX;
end 

// expected Bgt
initial
begin
	Bgt_expected = 1'bX;
end 

// expected Bne
initial
begin
	Bne_expected = 1'bX;
end 

// expected DatSel
initial
begin
	DatSel_expected = 1'bX;
end 

// expected Dg
initial
begin
	Dg_expected = 1'bX;
end 
// expected IO[ 2 ]
initial
begin
	IO_expected[2] = 1'bX;
end 
// expected IO[ 1 ]
initial
begin
	IO_expected[1] = 1'bX;
end 
// expected IO[ 0 ]
initial
begin
	IO_expected[0] = 1'bX;
end 

// expected Jump
initial
begin
	Jump_expected = 1'bX;
end 

// expected PCWrite
initial
begin
	PCWrite_expected = 1'bX;
end 

// expected RMD
initial
begin
	RMD_expected = 1'bX;
end 

// expected RMI
initial
begin
	RMI_expected = 1'bX;
end 

// expected WIR
initial
begin
	WIR_expected = 1'bX;
end 

// expected WMD
initial
begin
	WMD_expected = 1'bX;
end 

// expected WRF
initial
begin
	WRF_expected = 1'bX;
end 
// generate trigger
always @(AluOP_expected or AluOP or AluOut_expected or AluOut or AluSrcA_expected or AluSrcA or Beq_expected or Beq or Bgt_expected or Bgt or Bne_expected or Bne or DatSel_expected or DatSel or Dg_expected or Dg or IO_expected or IO or Jump_expected or Jump or PCWrite_expected or PCWrite or RMD_expected or RMD or RMI_expected or RMI or WIR_expected or WIR or WMD_expected or WMD or WRF_expected or WRF)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AluOP = %b | expected AluOut = %b | expected AluSrcA = %b | expected Beq = %b | expected Bgt = %b | expected Bne = %b | expected DatSel = %b | expected Dg = %b | expected IO = %b | expected Jump = %b | expected PCWrite = %b | expected RMD = %b | expected RMI = %b | expected WIR = %b | expected WMD = %b | expected WRF = %b | ",AluOP_expected_prev,AluOut_expected_prev,AluSrcA_expected_prev,Beq_expected_prev,Bgt_expected_prev,Bne_expected_prev,DatSel_expected_prev,Dg_expected_prev,IO_expected_prev,Jump_expected_prev,PCWrite_expected_prev,RMD_expected_prev,RMI_expected_prev,WIR_expected_prev,WMD_expected_prev,WRF_expected_prev);
	$display("| real AluOP = %b | real AluOut = %b | real AluSrcA = %b | real Beq = %b | real Bgt = %b | real Bne = %b | real DatSel = %b | real Dg = %b | real IO = %b | real Jump = %b | real PCWrite = %b | real RMD = %b | real RMI = %b | real WIR = %b | real WMD = %b | real WRF = %b | ",AluOP_prev,AluOut_prev,AluSrcA_prev,Beq_prev,Bgt_prev,Bne_prev,DatSel_prev,Dg_prev,IO_prev,Jump_prev,PCWrite_prev,RMD_prev,RMI_prev,WIR_prev,WMD_prev,WRF_prev);
`endif
	if (
		( AluOP_expected_prev[0] !== 1'bx ) && ( AluOP_prev[0] !== AluOP_expected_prev[0] )
		&& ((AluOP_expected_prev[0] !== last_AluOP_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AluOP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AluOP_expected_prev);
		$display ("     Real value = %b", AluOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AluOP_exp[0] = AluOP_expected_prev[0];
	end
	if (
		( AluOP_expected_prev[1] !== 1'bx ) && ( AluOP_prev[1] !== AluOP_expected_prev[1] )
		&& ((AluOP_expected_prev[1] !== last_AluOP_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AluOP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AluOP_expected_prev);
		$display ("     Real value = %b", AluOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AluOP_exp[1] = AluOP_expected_prev[1];
	end
	if (
		( AluOut_expected_prev !== 1'bx ) && ( AluOut_prev !== AluOut_expected_prev )
		&& ((AluOut_expected_prev !== last_AluOut_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AluOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AluOut_expected_prev);
		$display ("     Real value = %b", AluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AluOut_exp = AluOut_expected_prev;
	end
	if (
		( AluSrcA_expected_prev !== 1'bx ) && ( AluSrcA_prev !== AluSrcA_expected_prev )
		&& ((AluSrcA_expected_prev !== last_AluSrcA_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AluSrcA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AluSrcA_expected_prev);
		$display ("     Real value = %b", AluSrcA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AluSrcA_exp = AluSrcA_expected_prev;
	end
	if (
		( Beq_expected_prev !== 1'bx ) && ( Beq_prev !== Beq_expected_prev )
		&& ((Beq_expected_prev !== last_Beq_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Beq :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Beq_expected_prev);
		$display ("     Real value = %b", Beq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Beq_exp = Beq_expected_prev;
	end
	if (
		( Bgt_expected_prev !== 1'bx ) && ( Bgt_prev !== Bgt_expected_prev )
		&& ((Bgt_expected_prev !== last_Bgt_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bgt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bgt_expected_prev);
		$display ("     Real value = %b", Bgt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Bgt_exp = Bgt_expected_prev;
	end
	if (
		( Bne_expected_prev !== 1'bx ) && ( Bne_prev !== Bne_expected_prev )
		&& ((Bne_expected_prev !== last_Bne_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bne :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bne_expected_prev);
		$display ("     Real value = %b", Bne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Bne_exp = Bne_expected_prev;
	end
	if (
		( DatSel_expected_prev !== 1'bx ) && ( DatSel_prev !== DatSel_expected_prev )
		&& ((DatSel_expected_prev !== last_DatSel_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatSel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatSel_expected_prev);
		$display ("     Real value = %b", DatSel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DatSel_exp = DatSel_expected_prev;
	end
	if (
		( Dg_expected_prev !== 1'bx ) && ( Dg_prev !== Dg_expected_prev )
		&& ((Dg_expected_prev !== last_Dg_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dg_expected_prev);
		$display ("     Real value = %b", Dg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Dg_exp = Dg_expected_prev;
	end
	if (
		( IO_expected_prev[0] !== 1'bx ) && ( IO_prev[0] !== IO_expected_prev[0] )
		&& ((IO_expected_prev[0] !== last_IO_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IO_exp[0] = IO_expected_prev[0];
	end
	if (
		( IO_expected_prev[1] !== 1'bx ) && ( IO_prev[1] !== IO_expected_prev[1] )
		&& ((IO_expected_prev[1] !== last_IO_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IO_exp[1] = IO_expected_prev[1];
	end
	if (
		( IO_expected_prev[2] !== 1'bx ) && ( IO_prev[2] !== IO_expected_prev[2] )
		&& ((IO_expected_prev[2] !== last_IO_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IO_exp[2] = IO_expected_prev[2];
	end
	if (
		( Jump_expected_prev !== 1'bx ) && ( Jump_prev !== Jump_expected_prev )
		&& ((Jump_expected_prev !== last_Jump_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Jump_expected_prev);
		$display ("     Real value = %b", Jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Jump_exp = Jump_expected_prev;
	end
	if (
		( PCWrite_expected_prev !== 1'bx ) && ( PCWrite_prev !== PCWrite_expected_prev )
		&& ((PCWrite_expected_prev !== last_PCWrite_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCWrite_expected_prev);
		$display ("     Real value = %b", PCWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCWrite_exp = PCWrite_expected_prev;
	end
	if (
		( RMD_expected_prev !== 1'bx ) && ( RMD_prev !== RMD_expected_prev )
		&& ((RMD_expected_prev !== last_RMD_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RMD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RMD_expected_prev);
		$display ("     Real value = %b", RMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RMD_exp = RMD_expected_prev;
	end
	if (
		( RMI_expected_prev !== 1'bx ) && ( RMI_prev !== RMI_expected_prev )
		&& ((RMI_expected_prev !== last_RMI_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RMI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RMI_expected_prev);
		$display ("     Real value = %b", RMI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RMI_exp = RMI_expected_prev;
	end
	if (
		( WIR_expected_prev !== 1'bx ) && ( WIR_prev !== WIR_expected_prev )
		&& ((WIR_expected_prev !== last_WIR_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WIR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WIR_expected_prev);
		$display ("     Real value = %b", WIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WIR_exp = WIR_expected_prev;
	end
	if (
		( WMD_expected_prev !== 1'bx ) && ( WMD_prev !== WMD_expected_prev )
		&& ((WMD_expected_prev !== last_WMD_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WMD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WMD_expected_prev);
		$display ("     Real value = %b", WMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_WMD_exp = WMD_expected_prev;
	end
	if (
		( WRF_expected_prev !== 1'bx ) && ( WRF_prev !== WRF_expected_prev )
		&& ((WRF_expected_prev !== last_WRF_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WRF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WRF_expected_prev);
		$display ("     Real value = %b", WRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_WRF_exp = WRF_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module UC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg [3:0] Opcode;
// wires                                               
wire [1:0] AluOP;
wire AluOut;
wire AluSrcA;
wire Beq;
wire Bgt;
wire Bne;
wire DatSel;
wire Dg;
wire [2:0] IO;
wire Jump;
wire PCWrite;
wire RMD;
wire RMI;
wire WIR;
wire WMD;
wire WRF;

wire sampler;                             

// assign statements (if any)                          
UC i1 (
// port map - connection between master ports and signals/registers   
	.AluOP(AluOP),
	.AluOut(AluOut),
	.AluSrcA(AluSrcA),
	.Beq(Beq),
	.Bgt(Bgt),
	.Bne(Bne),
	.Clk(Clk),
	.DatSel(DatSel),
	.Dg(Dg),
	.IO(IO),
	.Jump(Jump),
	.Opcode(Opcode),
	.PCWrite(PCWrite),
	.RMD(RMD),
	.RMI(RMI),
	.WIR(WIR),
	.WMD(WMD),
	.WRF(WRF)
);

// Clk
always
begin
	Clk = 1'b0;
	Clk = #20000 1'b1;
	#20000;
end 
// Opcode[ 3 ]
initial
begin
	Opcode[3] = 1'b0;
	Opcode[3] = #20000 1'b1;
	Opcode[3] = #50000 1'b0;
	Opcode[3] = #70000 1'b1;
	Opcode[3] = #70000 1'b0;
end 
// Opcode[ 2 ]
initial
begin
	Opcode[2] = 1'b0;
	Opcode[2] = #20000 1'b1;
	Opcode[2] = #50000 1'b0;
	Opcode[2] = #70000 1'b1;
	Opcode[2] = #70000 1'b0;
end 
// Opcode[ 1 ]
initial
begin
	Opcode[1] = 1'b0;
	Opcode[1] = #140000 1'b1;
	Opcode[1] = #70000 1'b0;
end 
// Opcode[ 0 ]
initial
begin
	Opcode[0] = 1'b0;
	Opcode[0] = #140000 1'b1;
	Opcode[0] = #70000 1'b0;
end 

UC_vlg_sample_tst tb_sample (
	.Clk(Clk),
	.Opcode(Opcode),
	.sampler_tx(sampler)
);

UC_vlg_check_tst tb_out(
	.AluOP(AluOP),
	.AluOut(AluOut),
	.AluSrcA(AluSrcA),
	.Beq(Beq),
	.Bgt(Bgt),
	.Bne(Bne),
	.DatSel(DatSel),
	.Dg(Dg),
	.IO(IO),
	.Jump(Jump),
	.PCWrite(PCWrite),
	.RMD(RMD),
	.RMI(RMI),
	.WIR(WIR),
	.WMD(WMD),
	.WRF(WRF),
	.sampler_rx(sampler)
);
endmodule

