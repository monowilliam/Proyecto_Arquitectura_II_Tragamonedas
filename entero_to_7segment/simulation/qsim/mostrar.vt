// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2018 20:28:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mostrar
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mostrar_vlg_sample_tst(
	boton,
	n1,
	n2,
	n3,
	n4,
	numeroVector,
	sampler_tx
);
input  boton;
input [31:0] n1;
input [31:0] n2;
input [31:0] n3;
input [31:0] n4;
input [13:0] numeroVector;
output sampler_tx;

reg sample;
time current_time;
always @(boton or n1 or n2 or n3 or n4 or numeroVector)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mostrar_vlg_check_tst (
	n1,
	n2,
	n3,
	n4,
	segmento0,
	segmento1,
	segmento2,
	segmento3,
	sampler_rx
);
input [31:0] n1;
input [31:0] n2;
input [31:0] n3;
input [31:0] n4;
input [6:0] segmento0;
input [6:0] segmento1;
input [6:0] segmento2;
input [6:0] segmento3;
input sampler_rx;

reg [31:0] n1_expected;
reg [31:0] n2_expected;
reg [31:0] n3_expected;
reg [31:0] n4_expected;
reg [6:0] segmento0_expected;
reg [6:0] segmento1_expected;
reg [6:0] segmento2_expected;
reg [6:0] segmento3_expected;

reg [31:0] n1_prev;
reg [31:0] n2_prev;
reg [31:0] n3_prev;
reg [31:0] n4_prev;
reg [6:0] segmento0_prev;
reg [6:0] segmento1_prev;
reg [6:0] segmento2_prev;
reg [6:0] segmento3_prev;

reg [31:0] n1_expected_prev;
reg [31:0] n2_expected_prev;
reg [31:0] n3_expected_prev;
reg [31:0] n4_expected_prev;
reg [6:0] segmento0_expected_prev;
reg [6:0] segmento1_expected_prev;
reg [6:0] segmento2_expected_prev;
reg [6:0] segmento3_expected_prev;

reg [31:0] last_n1_exp;
reg [31:0] last_n2_exp;
reg [31:0] last_n3_exp;
reg [31:0] last_n4_exp;
reg [6:0] last_segmento0_exp;
reg [6:0] last_segmento1_exp;
reg [6:0] last_segmento2_exp;
reg [6:0] last_segmento3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	n1_prev = n1;
	n2_prev = n2;
	n3_prev = n3;
	n4_prev = n4;
	segmento0_prev = segmento0;
	segmento1_prev = segmento1;
	segmento2_prev = segmento2;
	segmento3_prev = segmento3;
end

// update expected /o prevs

always @(trigger)
begin
	n1_expected_prev = n1_expected;
	n2_expected_prev = n2_expected;
	n3_expected_prev = n3_expected;
	n4_expected_prev = n4_expected;
	segmento0_expected_prev = segmento0_expected;
	segmento1_expected_prev = segmento1_expected;
	segmento2_expected_prev = segmento2_expected;
	segmento3_expected_prev = segmento3_expected;
end


// expected segmento0[ 6 ]
initial
begin
	segmento0_expected[6] = 1'bX;
end 
// expected segmento0[ 5 ]
initial
begin
	segmento0_expected[5] = 1'bX;
end 
// expected segmento0[ 4 ]
initial
begin
	segmento0_expected[4] = 1'bX;
end 
// expected segmento0[ 3 ]
initial
begin
	segmento0_expected[3] = 1'bX;
end 
// expected segmento0[ 2 ]
initial
begin
	segmento0_expected[2] = 1'bX;
end 
// expected segmento0[ 1 ]
initial
begin
	segmento0_expected[1] = 1'bX;
end 
// expected segmento0[ 0 ]
initial
begin
	segmento0_expected[0] = 1'bX;
end 
// expected segmento1[ 6 ]
initial
begin
	segmento1_expected[6] = 1'bX;
end 
// expected segmento1[ 5 ]
initial
begin
	segmento1_expected[5] = 1'bX;
end 
// expected segmento1[ 4 ]
initial
begin
	segmento1_expected[4] = 1'bX;
end 
// expected segmento1[ 3 ]
initial
begin
	segmento1_expected[3] = 1'bX;
end 
// expected segmento1[ 2 ]
initial
begin
	segmento1_expected[2] = 1'bX;
end 
// expected segmento1[ 1 ]
initial
begin
	segmento1_expected[1] = 1'bX;
end 
// expected segmento1[ 0 ]
initial
begin
	segmento1_expected[0] = 1'bX;
end 
// expected segmento2[ 6 ]
initial
begin
	segmento2_expected[6] = 1'bX;
end 
// expected segmento2[ 5 ]
initial
begin
	segmento2_expected[5] = 1'bX;
end 
// expected segmento2[ 4 ]
initial
begin
	segmento2_expected[4] = 1'bX;
end 
// expected segmento2[ 3 ]
initial
begin
	segmento2_expected[3] = 1'bX;
end 
// expected segmento2[ 2 ]
initial
begin
	segmento2_expected[2] = 1'bX;
end 
// expected segmento2[ 1 ]
initial
begin
	segmento2_expected[1] = 1'bX;
end 
// expected segmento2[ 0 ]
initial
begin
	segmento2_expected[0] = 1'bX;
end 
// expected segmento3[ 6 ]
initial
begin
	segmento3_expected[6] = 1'bX;
end 
// expected segmento3[ 5 ]
initial
begin
	segmento3_expected[5] = 1'bX;
end 
// expected segmento3[ 4 ]
initial
begin
	segmento3_expected[4] = 1'bX;
end 
// expected segmento3[ 3 ]
initial
begin
	segmento3_expected[3] = 1'bX;
end 
// expected segmento3[ 2 ]
initial
begin
	segmento3_expected[2] = 1'bX;
end 
// expected segmento3[ 1 ]
initial
begin
	segmento3_expected[1] = 1'bX;
end 
// expected segmento3[ 0 ]
initial
begin
	segmento3_expected[0] = 1'bX;
end 
// generate trigger
always @(n1_expected or n1 or n2_expected or n2 or n3_expected or n3 or n4_expected or n4 or segmento0_expected or segmento0 or segmento1_expected or segmento1 or segmento2_expected or segmento2 or segmento3_expected or segmento3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected n1 = %b | expected n2 = %b | expected n3 = %b | expected n4 = %b | expected segmento0 = %b | expected segmento1 = %b | expected segmento2 = %b | expected segmento3 = %b | ",n1_expected_prev,n2_expected_prev,n3_expected_prev,n4_expected_prev,segmento0_expected_prev,segmento1_expected_prev,segmento2_expected_prev,segmento3_expected_prev);
	$display("| real n1 = %b | real n2 = %b | real n3 = %b | real n4 = %b | real segmento0 = %b | real segmento1 = %b | real segmento2 = %b | real segmento3 = %b | ",n1_prev,n2_prev,n3_prev,n4_prev,segmento0_prev,segmento1_prev,segmento2_prev,segmento3_prev);
`endif
	if (
		( n1_expected_prev[0] !== 1'bx ) && ( n1_prev[0] !== n1_expected_prev[0] )
		&& ((n1_expected_prev[0] !== last_n1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[0] = n1_expected_prev[0];
	end
	if (
		( n1_expected_prev[1] !== 1'bx ) && ( n1_prev[1] !== n1_expected_prev[1] )
		&& ((n1_expected_prev[1] !== last_n1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[1] = n1_expected_prev[1];
	end
	if (
		( n1_expected_prev[2] !== 1'bx ) && ( n1_prev[2] !== n1_expected_prev[2] )
		&& ((n1_expected_prev[2] !== last_n1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[2] = n1_expected_prev[2];
	end
	if (
		( n1_expected_prev[3] !== 1'bx ) && ( n1_prev[3] !== n1_expected_prev[3] )
		&& ((n1_expected_prev[3] !== last_n1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[3] = n1_expected_prev[3];
	end
	if (
		( n1_expected_prev[4] !== 1'bx ) && ( n1_prev[4] !== n1_expected_prev[4] )
		&& ((n1_expected_prev[4] !== last_n1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[4] = n1_expected_prev[4];
	end
	if (
		( n1_expected_prev[5] !== 1'bx ) && ( n1_prev[5] !== n1_expected_prev[5] )
		&& ((n1_expected_prev[5] !== last_n1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[5] = n1_expected_prev[5];
	end
	if (
		( n1_expected_prev[6] !== 1'bx ) && ( n1_prev[6] !== n1_expected_prev[6] )
		&& ((n1_expected_prev[6] !== last_n1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[6] = n1_expected_prev[6];
	end
	if (
		( n1_expected_prev[7] !== 1'bx ) && ( n1_prev[7] !== n1_expected_prev[7] )
		&& ((n1_expected_prev[7] !== last_n1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[7] = n1_expected_prev[7];
	end
	if (
		( n1_expected_prev[8] !== 1'bx ) && ( n1_prev[8] !== n1_expected_prev[8] )
		&& ((n1_expected_prev[8] !== last_n1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[8] = n1_expected_prev[8];
	end
	if (
		( n1_expected_prev[9] !== 1'bx ) && ( n1_prev[9] !== n1_expected_prev[9] )
		&& ((n1_expected_prev[9] !== last_n1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[9] = n1_expected_prev[9];
	end
	if (
		( n1_expected_prev[10] !== 1'bx ) && ( n1_prev[10] !== n1_expected_prev[10] )
		&& ((n1_expected_prev[10] !== last_n1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[10] = n1_expected_prev[10];
	end
	if (
		( n1_expected_prev[11] !== 1'bx ) && ( n1_prev[11] !== n1_expected_prev[11] )
		&& ((n1_expected_prev[11] !== last_n1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[11] = n1_expected_prev[11];
	end
	if (
		( n1_expected_prev[12] !== 1'bx ) && ( n1_prev[12] !== n1_expected_prev[12] )
		&& ((n1_expected_prev[12] !== last_n1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[12] = n1_expected_prev[12];
	end
	if (
		( n1_expected_prev[13] !== 1'bx ) && ( n1_prev[13] !== n1_expected_prev[13] )
		&& ((n1_expected_prev[13] !== last_n1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[13] = n1_expected_prev[13];
	end
	if (
		( n1_expected_prev[14] !== 1'bx ) && ( n1_prev[14] !== n1_expected_prev[14] )
		&& ((n1_expected_prev[14] !== last_n1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[14] = n1_expected_prev[14];
	end
	if (
		( n1_expected_prev[15] !== 1'bx ) && ( n1_prev[15] !== n1_expected_prev[15] )
		&& ((n1_expected_prev[15] !== last_n1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[15] = n1_expected_prev[15];
	end
	if (
		( n1_expected_prev[16] !== 1'bx ) && ( n1_prev[16] !== n1_expected_prev[16] )
		&& ((n1_expected_prev[16] !== last_n1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[16] = n1_expected_prev[16];
	end
	if (
		( n1_expected_prev[17] !== 1'bx ) && ( n1_prev[17] !== n1_expected_prev[17] )
		&& ((n1_expected_prev[17] !== last_n1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[17] = n1_expected_prev[17];
	end
	if (
		( n1_expected_prev[18] !== 1'bx ) && ( n1_prev[18] !== n1_expected_prev[18] )
		&& ((n1_expected_prev[18] !== last_n1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[18] = n1_expected_prev[18];
	end
	if (
		( n1_expected_prev[19] !== 1'bx ) && ( n1_prev[19] !== n1_expected_prev[19] )
		&& ((n1_expected_prev[19] !== last_n1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[19] = n1_expected_prev[19];
	end
	if (
		( n1_expected_prev[20] !== 1'bx ) && ( n1_prev[20] !== n1_expected_prev[20] )
		&& ((n1_expected_prev[20] !== last_n1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[20] = n1_expected_prev[20];
	end
	if (
		( n1_expected_prev[21] !== 1'bx ) && ( n1_prev[21] !== n1_expected_prev[21] )
		&& ((n1_expected_prev[21] !== last_n1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[21] = n1_expected_prev[21];
	end
	if (
		( n1_expected_prev[22] !== 1'bx ) && ( n1_prev[22] !== n1_expected_prev[22] )
		&& ((n1_expected_prev[22] !== last_n1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[22] = n1_expected_prev[22];
	end
	if (
		( n1_expected_prev[23] !== 1'bx ) && ( n1_prev[23] !== n1_expected_prev[23] )
		&& ((n1_expected_prev[23] !== last_n1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[23] = n1_expected_prev[23];
	end
	if (
		( n1_expected_prev[24] !== 1'bx ) && ( n1_prev[24] !== n1_expected_prev[24] )
		&& ((n1_expected_prev[24] !== last_n1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[24] = n1_expected_prev[24];
	end
	if (
		( n1_expected_prev[25] !== 1'bx ) && ( n1_prev[25] !== n1_expected_prev[25] )
		&& ((n1_expected_prev[25] !== last_n1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[25] = n1_expected_prev[25];
	end
	if (
		( n1_expected_prev[26] !== 1'bx ) && ( n1_prev[26] !== n1_expected_prev[26] )
		&& ((n1_expected_prev[26] !== last_n1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[26] = n1_expected_prev[26];
	end
	if (
		( n1_expected_prev[27] !== 1'bx ) && ( n1_prev[27] !== n1_expected_prev[27] )
		&& ((n1_expected_prev[27] !== last_n1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[27] = n1_expected_prev[27];
	end
	if (
		( n1_expected_prev[28] !== 1'bx ) && ( n1_prev[28] !== n1_expected_prev[28] )
		&& ((n1_expected_prev[28] !== last_n1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[28] = n1_expected_prev[28];
	end
	if (
		( n1_expected_prev[29] !== 1'bx ) && ( n1_prev[29] !== n1_expected_prev[29] )
		&& ((n1_expected_prev[29] !== last_n1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[29] = n1_expected_prev[29];
	end
	if (
		( n1_expected_prev[30] !== 1'bx ) && ( n1_prev[30] !== n1_expected_prev[30] )
		&& ((n1_expected_prev[30] !== last_n1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[30] = n1_expected_prev[30];
	end
	if (
		( n1_expected_prev[31] !== 1'bx ) && ( n1_prev[31] !== n1_expected_prev[31] )
		&& ((n1_expected_prev[31] !== last_n1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n1_exp[31] = n1_expected_prev[31];
	end
	if (
		( n2_expected_prev[0] !== 1'bx ) && ( n2_prev[0] !== n2_expected_prev[0] )
		&& ((n2_expected_prev[0] !== last_n2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[0] = n2_expected_prev[0];
	end
	if (
		( n2_expected_prev[1] !== 1'bx ) && ( n2_prev[1] !== n2_expected_prev[1] )
		&& ((n2_expected_prev[1] !== last_n2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[1] = n2_expected_prev[1];
	end
	if (
		( n2_expected_prev[2] !== 1'bx ) && ( n2_prev[2] !== n2_expected_prev[2] )
		&& ((n2_expected_prev[2] !== last_n2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[2] = n2_expected_prev[2];
	end
	if (
		( n2_expected_prev[3] !== 1'bx ) && ( n2_prev[3] !== n2_expected_prev[3] )
		&& ((n2_expected_prev[3] !== last_n2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[3] = n2_expected_prev[3];
	end
	if (
		( n2_expected_prev[4] !== 1'bx ) && ( n2_prev[4] !== n2_expected_prev[4] )
		&& ((n2_expected_prev[4] !== last_n2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[4] = n2_expected_prev[4];
	end
	if (
		( n2_expected_prev[5] !== 1'bx ) && ( n2_prev[5] !== n2_expected_prev[5] )
		&& ((n2_expected_prev[5] !== last_n2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[5] = n2_expected_prev[5];
	end
	if (
		( n2_expected_prev[6] !== 1'bx ) && ( n2_prev[6] !== n2_expected_prev[6] )
		&& ((n2_expected_prev[6] !== last_n2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[6] = n2_expected_prev[6];
	end
	if (
		( n2_expected_prev[7] !== 1'bx ) && ( n2_prev[7] !== n2_expected_prev[7] )
		&& ((n2_expected_prev[7] !== last_n2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[7] = n2_expected_prev[7];
	end
	if (
		( n2_expected_prev[8] !== 1'bx ) && ( n2_prev[8] !== n2_expected_prev[8] )
		&& ((n2_expected_prev[8] !== last_n2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[8] = n2_expected_prev[8];
	end
	if (
		( n2_expected_prev[9] !== 1'bx ) && ( n2_prev[9] !== n2_expected_prev[9] )
		&& ((n2_expected_prev[9] !== last_n2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[9] = n2_expected_prev[9];
	end
	if (
		( n2_expected_prev[10] !== 1'bx ) && ( n2_prev[10] !== n2_expected_prev[10] )
		&& ((n2_expected_prev[10] !== last_n2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[10] = n2_expected_prev[10];
	end
	if (
		( n2_expected_prev[11] !== 1'bx ) && ( n2_prev[11] !== n2_expected_prev[11] )
		&& ((n2_expected_prev[11] !== last_n2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[11] = n2_expected_prev[11];
	end
	if (
		( n2_expected_prev[12] !== 1'bx ) && ( n2_prev[12] !== n2_expected_prev[12] )
		&& ((n2_expected_prev[12] !== last_n2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[12] = n2_expected_prev[12];
	end
	if (
		( n2_expected_prev[13] !== 1'bx ) && ( n2_prev[13] !== n2_expected_prev[13] )
		&& ((n2_expected_prev[13] !== last_n2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[13] = n2_expected_prev[13];
	end
	if (
		( n2_expected_prev[14] !== 1'bx ) && ( n2_prev[14] !== n2_expected_prev[14] )
		&& ((n2_expected_prev[14] !== last_n2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[14] = n2_expected_prev[14];
	end
	if (
		( n2_expected_prev[15] !== 1'bx ) && ( n2_prev[15] !== n2_expected_prev[15] )
		&& ((n2_expected_prev[15] !== last_n2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[15] = n2_expected_prev[15];
	end
	if (
		( n2_expected_prev[16] !== 1'bx ) && ( n2_prev[16] !== n2_expected_prev[16] )
		&& ((n2_expected_prev[16] !== last_n2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[16] = n2_expected_prev[16];
	end
	if (
		( n2_expected_prev[17] !== 1'bx ) && ( n2_prev[17] !== n2_expected_prev[17] )
		&& ((n2_expected_prev[17] !== last_n2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[17] = n2_expected_prev[17];
	end
	if (
		( n2_expected_prev[18] !== 1'bx ) && ( n2_prev[18] !== n2_expected_prev[18] )
		&& ((n2_expected_prev[18] !== last_n2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[18] = n2_expected_prev[18];
	end
	if (
		( n2_expected_prev[19] !== 1'bx ) && ( n2_prev[19] !== n2_expected_prev[19] )
		&& ((n2_expected_prev[19] !== last_n2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[19] = n2_expected_prev[19];
	end
	if (
		( n2_expected_prev[20] !== 1'bx ) && ( n2_prev[20] !== n2_expected_prev[20] )
		&& ((n2_expected_prev[20] !== last_n2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[20] = n2_expected_prev[20];
	end
	if (
		( n2_expected_prev[21] !== 1'bx ) && ( n2_prev[21] !== n2_expected_prev[21] )
		&& ((n2_expected_prev[21] !== last_n2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[21] = n2_expected_prev[21];
	end
	if (
		( n2_expected_prev[22] !== 1'bx ) && ( n2_prev[22] !== n2_expected_prev[22] )
		&& ((n2_expected_prev[22] !== last_n2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[22] = n2_expected_prev[22];
	end
	if (
		( n2_expected_prev[23] !== 1'bx ) && ( n2_prev[23] !== n2_expected_prev[23] )
		&& ((n2_expected_prev[23] !== last_n2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[23] = n2_expected_prev[23];
	end
	if (
		( n2_expected_prev[24] !== 1'bx ) && ( n2_prev[24] !== n2_expected_prev[24] )
		&& ((n2_expected_prev[24] !== last_n2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[24] = n2_expected_prev[24];
	end
	if (
		( n2_expected_prev[25] !== 1'bx ) && ( n2_prev[25] !== n2_expected_prev[25] )
		&& ((n2_expected_prev[25] !== last_n2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[25] = n2_expected_prev[25];
	end
	if (
		( n2_expected_prev[26] !== 1'bx ) && ( n2_prev[26] !== n2_expected_prev[26] )
		&& ((n2_expected_prev[26] !== last_n2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[26] = n2_expected_prev[26];
	end
	if (
		( n2_expected_prev[27] !== 1'bx ) && ( n2_prev[27] !== n2_expected_prev[27] )
		&& ((n2_expected_prev[27] !== last_n2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[27] = n2_expected_prev[27];
	end
	if (
		( n2_expected_prev[28] !== 1'bx ) && ( n2_prev[28] !== n2_expected_prev[28] )
		&& ((n2_expected_prev[28] !== last_n2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[28] = n2_expected_prev[28];
	end
	if (
		( n2_expected_prev[29] !== 1'bx ) && ( n2_prev[29] !== n2_expected_prev[29] )
		&& ((n2_expected_prev[29] !== last_n2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[29] = n2_expected_prev[29];
	end
	if (
		( n2_expected_prev[30] !== 1'bx ) && ( n2_prev[30] !== n2_expected_prev[30] )
		&& ((n2_expected_prev[30] !== last_n2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[30] = n2_expected_prev[30];
	end
	if (
		( n2_expected_prev[31] !== 1'bx ) && ( n2_prev[31] !== n2_expected_prev[31] )
		&& ((n2_expected_prev[31] !== last_n2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n2_exp[31] = n2_expected_prev[31];
	end
	if (
		( n3_expected_prev[0] !== 1'bx ) && ( n3_prev[0] !== n3_expected_prev[0] )
		&& ((n3_expected_prev[0] !== last_n3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[0] = n3_expected_prev[0];
	end
	if (
		( n3_expected_prev[1] !== 1'bx ) && ( n3_prev[1] !== n3_expected_prev[1] )
		&& ((n3_expected_prev[1] !== last_n3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[1] = n3_expected_prev[1];
	end
	if (
		( n3_expected_prev[2] !== 1'bx ) && ( n3_prev[2] !== n3_expected_prev[2] )
		&& ((n3_expected_prev[2] !== last_n3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[2] = n3_expected_prev[2];
	end
	if (
		( n3_expected_prev[3] !== 1'bx ) && ( n3_prev[3] !== n3_expected_prev[3] )
		&& ((n3_expected_prev[3] !== last_n3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[3] = n3_expected_prev[3];
	end
	if (
		( n3_expected_prev[4] !== 1'bx ) && ( n3_prev[4] !== n3_expected_prev[4] )
		&& ((n3_expected_prev[4] !== last_n3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[4] = n3_expected_prev[4];
	end
	if (
		( n3_expected_prev[5] !== 1'bx ) && ( n3_prev[5] !== n3_expected_prev[5] )
		&& ((n3_expected_prev[5] !== last_n3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[5] = n3_expected_prev[5];
	end
	if (
		( n3_expected_prev[6] !== 1'bx ) && ( n3_prev[6] !== n3_expected_prev[6] )
		&& ((n3_expected_prev[6] !== last_n3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[6] = n3_expected_prev[6];
	end
	if (
		( n3_expected_prev[7] !== 1'bx ) && ( n3_prev[7] !== n3_expected_prev[7] )
		&& ((n3_expected_prev[7] !== last_n3_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[7] = n3_expected_prev[7];
	end
	if (
		( n3_expected_prev[8] !== 1'bx ) && ( n3_prev[8] !== n3_expected_prev[8] )
		&& ((n3_expected_prev[8] !== last_n3_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[8] = n3_expected_prev[8];
	end
	if (
		( n3_expected_prev[9] !== 1'bx ) && ( n3_prev[9] !== n3_expected_prev[9] )
		&& ((n3_expected_prev[9] !== last_n3_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[9] = n3_expected_prev[9];
	end
	if (
		( n3_expected_prev[10] !== 1'bx ) && ( n3_prev[10] !== n3_expected_prev[10] )
		&& ((n3_expected_prev[10] !== last_n3_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[10] = n3_expected_prev[10];
	end
	if (
		( n3_expected_prev[11] !== 1'bx ) && ( n3_prev[11] !== n3_expected_prev[11] )
		&& ((n3_expected_prev[11] !== last_n3_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[11] = n3_expected_prev[11];
	end
	if (
		( n3_expected_prev[12] !== 1'bx ) && ( n3_prev[12] !== n3_expected_prev[12] )
		&& ((n3_expected_prev[12] !== last_n3_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[12] = n3_expected_prev[12];
	end
	if (
		( n3_expected_prev[13] !== 1'bx ) && ( n3_prev[13] !== n3_expected_prev[13] )
		&& ((n3_expected_prev[13] !== last_n3_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[13] = n3_expected_prev[13];
	end
	if (
		( n3_expected_prev[14] !== 1'bx ) && ( n3_prev[14] !== n3_expected_prev[14] )
		&& ((n3_expected_prev[14] !== last_n3_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[14] = n3_expected_prev[14];
	end
	if (
		( n3_expected_prev[15] !== 1'bx ) && ( n3_prev[15] !== n3_expected_prev[15] )
		&& ((n3_expected_prev[15] !== last_n3_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[15] = n3_expected_prev[15];
	end
	if (
		( n3_expected_prev[16] !== 1'bx ) && ( n3_prev[16] !== n3_expected_prev[16] )
		&& ((n3_expected_prev[16] !== last_n3_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[16] = n3_expected_prev[16];
	end
	if (
		( n3_expected_prev[17] !== 1'bx ) && ( n3_prev[17] !== n3_expected_prev[17] )
		&& ((n3_expected_prev[17] !== last_n3_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[17] = n3_expected_prev[17];
	end
	if (
		( n3_expected_prev[18] !== 1'bx ) && ( n3_prev[18] !== n3_expected_prev[18] )
		&& ((n3_expected_prev[18] !== last_n3_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[18] = n3_expected_prev[18];
	end
	if (
		( n3_expected_prev[19] !== 1'bx ) && ( n3_prev[19] !== n3_expected_prev[19] )
		&& ((n3_expected_prev[19] !== last_n3_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[19] = n3_expected_prev[19];
	end
	if (
		( n3_expected_prev[20] !== 1'bx ) && ( n3_prev[20] !== n3_expected_prev[20] )
		&& ((n3_expected_prev[20] !== last_n3_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[20] = n3_expected_prev[20];
	end
	if (
		( n3_expected_prev[21] !== 1'bx ) && ( n3_prev[21] !== n3_expected_prev[21] )
		&& ((n3_expected_prev[21] !== last_n3_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[21] = n3_expected_prev[21];
	end
	if (
		( n3_expected_prev[22] !== 1'bx ) && ( n3_prev[22] !== n3_expected_prev[22] )
		&& ((n3_expected_prev[22] !== last_n3_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[22] = n3_expected_prev[22];
	end
	if (
		( n3_expected_prev[23] !== 1'bx ) && ( n3_prev[23] !== n3_expected_prev[23] )
		&& ((n3_expected_prev[23] !== last_n3_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[23] = n3_expected_prev[23];
	end
	if (
		( n3_expected_prev[24] !== 1'bx ) && ( n3_prev[24] !== n3_expected_prev[24] )
		&& ((n3_expected_prev[24] !== last_n3_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[24] = n3_expected_prev[24];
	end
	if (
		( n3_expected_prev[25] !== 1'bx ) && ( n3_prev[25] !== n3_expected_prev[25] )
		&& ((n3_expected_prev[25] !== last_n3_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[25] = n3_expected_prev[25];
	end
	if (
		( n3_expected_prev[26] !== 1'bx ) && ( n3_prev[26] !== n3_expected_prev[26] )
		&& ((n3_expected_prev[26] !== last_n3_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[26] = n3_expected_prev[26];
	end
	if (
		( n3_expected_prev[27] !== 1'bx ) && ( n3_prev[27] !== n3_expected_prev[27] )
		&& ((n3_expected_prev[27] !== last_n3_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[27] = n3_expected_prev[27];
	end
	if (
		( n3_expected_prev[28] !== 1'bx ) && ( n3_prev[28] !== n3_expected_prev[28] )
		&& ((n3_expected_prev[28] !== last_n3_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[28] = n3_expected_prev[28];
	end
	if (
		( n3_expected_prev[29] !== 1'bx ) && ( n3_prev[29] !== n3_expected_prev[29] )
		&& ((n3_expected_prev[29] !== last_n3_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[29] = n3_expected_prev[29];
	end
	if (
		( n3_expected_prev[30] !== 1'bx ) && ( n3_prev[30] !== n3_expected_prev[30] )
		&& ((n3_expected_prev[30] !== last_n3_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[30] = n3_expected_prev[30];
	end
	if (
		( n3_expected_prev[31] !== 1'bx ) && ( n3_prev[31] !== n3_expected_prev[31] )
		&& ((n3_expected_prev[31] !== last_n3_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n3_exp[31] = n3_expected_prev[31];
	end
	if (
		( n4_expected_prev[0] !== 1'bx ) && ( n4_prev[0] !== n4_expected_prev[0] )
		&& ((n4_expected_prev[0] !== last_n4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[0] = n4_expected_prev[0];
	end
	if (
		( n4_expected_prev[1] !== 1'bx ) && ( n4_prev[1] !== n4_expected_prev[1] )
		&& ((n4_expected_prev[1] !== last_n4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[1] = n4_expected_prev[1];
	end
	if (
		( n4_expected_prev[2] !== 1'bx ) && ( n4_prev[2] !== n4_expected_prev[2] )
		&& ((n4_expected_prev[2] !== last_n4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[2] = n4_expected_prev[2];
	end
	if (
		( n4_expected_prev[3] !== 1'bx ) && ( n4_prev[3] !== n4_expected_prev[3] )
		&& ((n4_expected_prev[3] !== last_n4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[3] = n4_expected_prev[3];
	end
	if (
		( n4_expected_prev[4] !== 1'bx ) && ( n4_prev[4] !== n4_expected_prev[4] )
		&& ((n4_expected_prev[4] !== last_n4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[4] = n4_expected_prev[4];
	end
	if (
		( n4_expected_prev[5] !== 1'bx ) && ( n4_prev[5] !== n4_expected_prev[5] )
		&& ((n4_expected_prev[5] !== last_n4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[5] = n4_expected_prev[5];
	end
	if (
		( n4_expected_prev[6] !== 1'bx ) && ( n4_prev[6] !== n4_expected_prev[6] )
		&& ((n4_expected_prev[6] !== last_n4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[6] = n4_expected_prev[6];
	end
	if (
		( n4_expected_prev[7] !== 1'bx ) && ( n4_prev[7] !== n4_expected_prev[7] )
		&& ((n4_expected_prev[7] !== last_n4_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[7] = n4_expected_prev[7];
	end
	if (
		( n4_expected_prev[8] !== 1'bx ) && ( n4_prev[8] !== n4_expected_prev[8] )
		&& ((n4_expected_prev[8] !== last_n4_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[8] = n4_expected_prev[8];
	end
	if (
		( n4_expected_prev[9] !== 1'bx ) && ( n4_prev[9] !== n4_expected_prev[9] )
		&& ((n4_expected_prev[9] !== last_n4_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[9] = n4_expected_prev[9];
	end
	if (
		( n4_expected_prev[10] !== 1'bx ) && ( n4_prev[10] !== n4_expected_prev[10] )
		&& ((n4_expected_prev[10] !== last_n4_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[10] = n4_expected_prev[10];
	end
	if (
		( n4_expected_prev[11] !== 1'bx ) && ( n4_prev[11] !== n4_expected_prev[11] )
		&& ((n4_expected_prev[11] !== last_n4_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[11] = n4_expected_prev[11];
	end
	if (
		( n4_expected_prev[12] !== 1'bx ) && ( n4_prev[12] !== n4_expected_prev[12] )
		&& ((n4_expected_prev[12] !== last_n4_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[12] = n4_expected_prev[12];
	end
	if (
		( n4_expected_prev[13] !== 1'bx ) && ( n4_prev[13] !== n4_expected_prev[13] )
		&& ((n4_expected_prev[13] !== last_n4_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[13] = n4_expected_prev[13];
	end
	if (
		( n4_expected_prev[14] !== 1'bx ) && ( n4_prev[14] !== n4_expected_prev[14] )
		&& ((n4_expected_prev[14] !== last_n4_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[14] = n4_expected_prev[14];
	end
	if (
		( n4_expected_prev[15] !== 1'bx ) && ( n4_prev[15] !== n4_expected_prev[15] )
		&& ((n4_expected_prev[15] !== last_n4_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[15] = n4_expected_prev[15];
	end
	if (
		( n4_expected_prev[16] !== 1'bx ) && ( n4_prev[16] !== n4_expected_prev[16] )
		&& ((n4_expected_prev[16] !== last_n4_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[16] = n4_expected_prev[16];
	end
	if (
		( n4_expected_prev[17] !== 1'bx ) && ( n4_prev[17] !== n4_expected_prev[17] )
		&& ((n4_expected_prev[17] !== last_n4_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[17] = n4_expected_prev[17];
	end
	if (
		( n4_expected_prev[18] !== 1'bx ) && ( n4_prev[18] !== n4_expected_prev[18] )
		&& ((n4_expected_prev[18] !== last_n4_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[18] = n4_expected_prev[18];
	end
	if (
		( n4_expected_prev[19] !== 1'bx ) && ( n4_prev[19] !== n4_expected_prev[19] )
		&& ((n4_expected_prev[19] !== last_n4_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[19] = n4_expected_prev[19];
	end
	if (
		( n4_expected_prev[20] !== 1'bx ) && ( n4_prev[20] !== n4_expected_prev[20] )
		&& ((n4_expected_prev[20] !== last_n4_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[20] = n4_expected_prev[20];
	end
	if (
		( n4_expected_prev[21] !== 1'bx ) && ( n4_prev[21] !== n4_expected_prev[21] )
		&& ((n4_expected_prev[21] !== last_n4_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[21] = n4_expected_prev[21];
	end
	if (
		( n4_expected_prev[22] !== 1'bx ) && ( n4_prev[22] !== n4_expected_prev[22] )
		&& ((n4_expected_prev[22] !== last_n4_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[22] = n4_expected_prev[22];
	end
	if (
		( n4_expected_prev[23] !== 1'bx ) && ( n4_prev[23] !== n4_expected_prev[23] )
		&& ((n4_expected_prev[23] !== last_n4_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[23] = n4_expected_prev[23];
	end
	if (
		( n4_expected_prev[24] !== 1'bx ) && ( n4_prev[24] !== n4_expected_prev[24] )
		&& ((n4_expected_prev[24] !== last_n4_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[24] = n4_expected_prev[24];
	end
	if (
		( n4_expected_prev[25] !== 1'bx ) && ( n4_prev[25] !== n4_expected_prev[25] )
		&& ((n4_expected_prev[25] !== last_n4_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[25] = n4_expected_prev[25];
	end
	if (
		( n4_expected_prev[26] !== 1'bx ) && ( n4_prev[26] !== n4_expected_prev[26] )
		&& ((n4_expected_prev[26] !== last_n4_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[26] = n4_expected_prev[26];
	end
	if (
		( n4_expected_prev[27] !== 1'bx ) && ( n4_prev[27] !== n4_expected_prev[27] )
		&& ((n4_expected_prev[27] !== last_n4_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[27] = n4_expected_prev[27];
	end
	if (
		( n4_expected_prev[28] !== 1'bx ) && ( n4_prev[28] !== n4_expected_prev[28] )
		&& ((n4_expected_prev[28] !== last_n4_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[28] = n4_expected_prev[28];
	end
	if (
		( n4_expected_prev[29] !== 1'bx ) && ( n4_prev[29] !== n4_expected_prev[29] )
		&& ((n4_expected_prev[29] !== last_n4_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[29] = n4_expected_prev[29];
	end
	if (
		( n4_expected_prev[30] !== 1'bx ) && ( n4_prev[30] !== n4_expected_prev[30] )
		&& ((n4_expected_prev[30] !== last_n4_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[30] = n4_expected_prev[30];
	end
	if (
		( n4_expected_prev[31] !== 1'bx ) && ( n4_prev[31] !== n4_expected_prev[31] )
		&& ((n4_expected_prev[31] !== last_n4_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n4_exp[31] = n4_expected_prev[31];
	end
	if (
		( segmento0_expected_prev[0] !== 1'bx ) && ( segmento0_prev[0] !== segmento0_expected_prev[0] )
		&& ((segmento0_expected_prev[0] !== last_segmento0_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento0_expected_prev);
		$display ("     Real value = %b", segmento0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmento0_exp[0] = segmento0_expected_prev[0];
	end
	if (
		( segmento0_expected_prev[1] !== 1'bx ) && ( segmento0_prev[1] !== segmento0_expected_prev[1] )
		&& ((segmento0_expected_prev[1] !== last_segmento0_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento0_expected_prev);
		$display ("     Real value = %b", segmento0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmento0_exp[1] = segmento0_expected_prev[1];
	end
	if (
		( segmento0_expected_prev[2] !== 1'bx ) && ( segmento0_prev[2] !== segmento0_expected_prev[2] )
		&& ((segmento0_expected_prev[2] !== last_segmento0_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento0_expected_prev);
		$display ("     Real value = %b", segmento0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmento0_exp[2] = segmento0_expected_prev[2];
	end
	if (
		( segmento0_expected_prev[3] !== 1'bx ) && ( segmento0_prev[3] !== segmento0_expected_prev[3] )
		&& ((segmento0_expected_prev[3] !== last_segmento0_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento0_expected_prev);
		$display ("     Real value = %b", segmento0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmento0_exp[3] = segmento0_expected_prev[3];
	end
	if (
		( segmento0_expected_prev[4] !== 1'bx ) && ( segmento0_prev[4] !== segmento0_expected_prev[4] )
		&& ((segmento0_expected_prev[4] !== last_segmento0_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento0_expected_prev);
		$display ("     Real value = %b", segmento0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmento0_exp[4] = segmento0_expected_prev[4];
	end
	if (
		( segmento0_expected_prev[5] !== 1'bx ) && ( segmento0_prev[5] !== segmento0_expected_prev[5] )
		&& ((segmento0_expected_prev[5] !== last_segmento0_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento0_expected_prev);
		$display ("     Real value = %b", segmento0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmento0_exp[5] = segmento0_expected_prev[5];
	end
	if (
		( segmento0_expected_prev[6] !== 1'bx ) && ( segmento0_prev[6] !== segmento0_expected_prev[6] )
		&& ((segmento0_expected_prev[6] !== last_segmento0_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento0_expected_prev);
		$display ("     Real value = %b", segmento0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmento0_exp[6] = segmento0_expected_prev[6];
	end
	if (
		( segmento1_expected_prev[0] !== 1'bx ) && ( segmento1_prev[0] !== segmento1_expected_prev[0] )
		&& ((segmento1_expected_prev[0] !== last_segmento1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmento1_exp[0] = segmento1_expected_prev[0];
	end
	if (
		( segmento1_expected_prev[1] !== 1'bx ) && ( segmento1_prev[1] !== segmento1_expected_prev[1] )
		&& ((segmento1_expected_prev[1] !== last_segmento1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmento1_exp[1] = segmento1_expected_prev[1];
	end
	if (
		( segmento1_expected_prev[2] !== 1'bx ) && ( segmento1_prev[2] !== segmento1_expected_prev[2] )
		&& ((segmento1_expected_prev[2] !== last_segmento1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmento1_exp[2] = segmento1_expected_prev[2];
	end
	if (
		( segmento1_expected_prev[3] !== 1'bx ) && ( segmento1_prev[3] !== segmento1_expected_prev[3] )
		&& ((segmento1_expected_prev[3] !== last_segmento1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmento1_exp[3] = segmento1_expected_prev[3];
	end
	if (
		( segmento1_expected_prev[4] !== 1'bx ) && ( segmento1_prev[4] !== segmento1_expected_prev[4] )
		&& ((segmento1_expected_prev[4] !== last_segmento1_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmento1_exp[4] = segmento1_expected_prev[4];
	end
	if (
		( segmento1_expected_prev[5] !== 1'bx ) && ( segmento1_prev[5] !== segmento1_expected_prev[5] )
		&& ((segmento1_expected_prev[5] !== last_segmento1_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmento1_exp[5] = segmento1_expected_prev[5];
	end
	if (
		( segmento1_expected_prev[6] !== 1'bx ) && ( segmento1_prev[6] !== segmento1_expected_prev[6] )
		&& ((segmento1_expected_prev[6] !== last_segmento1_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmento1_exp[6] = segmento1_expected_prev[6];
	end
	if (
		( segmento2_expected_prev[0] !== 1'bx ) && ( segmento2_prev[0] !== segmento2_expected_prev[0] )
		&& ((segmento2_expected_prev[0] !== last_segmento2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segmento2_exp[0] = segmento2_expected_prev[0];
	end
	if (
		( segmento2_expected_prev[1] !== 1'bx ) && ( segmento2_prev[1] !== segmento2_expected_prev[1] )
		&& ((segmento2_expected_prev[1] !== last_segmento2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segmento2_exp[1] = segmento2_expected_prev[1];
	end
	if (
		( segmento2_expected_prev[2] !== 1'bx ) && ( segmento2_prev[2] !== segmento2_expected_prev[2] )
		&& ((segmento2_expected_prev[2] !== last_segmento2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segmento2_exp[2] = segmento2_expected_prev[2];
	end
	if (
		( segmento2_expected_prev[3] !== 1'bx ) && ( segmento2_prev[3] !== segmento2_expected_prev[3] )
		&& ((segmento2_expected_prev[3] !== last_segmento2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segmento2_exp[3] = segmento2_expected_prev[3];
	end
	if (
		( segmento2_expected_prev[4] !== 1'bx ) && ( segmento2_prev[4] !== segmento2_expected_prev[4] )
		&& ((segmento2_expected_prev[4] !== last_segmento2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segmento2_exp[4] = segmento2_expected_prev[4];
	end
	if (
		( segmento2_expected_prev[5] !== 1'bx ) && ( segmento2_prev[5] !== segmento2_expected_prev[5] )
		&& ((segmento2_expected_prev[5] !== last_segmento2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segmento2_exp[5] = segmento2_expected_prev[5];
	end
	if (
		( segmento2_expected_prev[6] !== 1'bx ) && ( segmento2_prev[6] !== segmento2_expected_prev[6] )
		&& ((segmento2_expected_prev[6] !== last_segmento2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segmento2_exp[6] = segmento2_expected_prev[6];
	end
	if (
		( segmento3_expected_prev[0] !== 1'bx ) && ( segmento3_prev[0] !== segmento3_expected_prev[0] )
		&& ((segmento3_expected_prev[0] !== last_segmento3_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento3_expected_prev);
		$display ("     Real value = %b", segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segmento3_exp[0] = segmento3_expected_prev[0];
	end
	if (
		( segmento3_expected_prev[1] !== 1'bx ) && ( segmento3_prev[1] !== segmento3_expected_prev[1] )
		&& ((segmento3_expected_prev[1] !== last_segmento3_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento3_expected_prev);
		$display ("     Real value = %b", segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segmento3_exp[1] = segmento3_expected_prev[1];
	end
	if (
		( segmento3_expected_prev[2] !== 1'bx ) && ( segmento3_prev[2] !== segmento3_expected_prev[2] )
		&& ((segmento3_expected_prev[2] !== last_segmento3_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento3_expected_prev);
		$display ("     Real value = %b", segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segmento3_exp[2] = segmento3_expected_prev[2];
	end
	if (
		( segmento3_expected_prev[3] !== 1'bx ) && ( segmento3_prev[3] !== segmento3_expected_prev[3] )
		&& ((segmento3_expected_prev[3] !== last_segmento3_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento3_expected_prev);
		$display ("     Real value = %b", segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segmento3_exp[3] = segmento3_expected_prev[3];
	end
	if (
		( segmento3_expected_prev[4] !== 1'bx ) && ( segmento3_prev[4] !== segmento3_expected_prev[4] )
		&& ((segmento3_expected_prev[4] !== last_segmento3_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento3_expected_prev);
		$display ("     Real value = %b", segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segmento3_exp[4] = segmento3_expected_prev[4];
	end
	if (
		( segmento3_expected_prev[5] !== 1'bx ) && ( segmento3_prev[5] !== segmento3_expected_prev[5] )
		&& ((segmento3_expected_prev[5] !== last_segmento3_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento3_expected_prev);
		$display ("     Real value = %b", segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segmento3_exp[5] = segmento3_expected_prev[5];
	end
	if (
		( segmento3_expected_prev[6] !== 1'bx ) && ( segmento3_prev[6] !== segmento3_expected_prev[6] )
		&& ((segmento3_expected_prev[6] !== last_segmento3_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento3_expected_prev);
		$display ("     Real value = %b", segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segmento3_exp[6] = segmento3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mostrar_vlg_vec_tst();
// constants                                           
// general purpose registers
reg boton;
reg [31:0] treg_n1;
reg [31:0] treg_n2;
reg [31:0] treg_n3;
reg [31:0] treg_n4;
reg [13:0] numeroVector;
// wires                                               
wire [31:0] n1;
wire [31:0] n2;
wire [31:0] n3;
wire [31:0] n4;
wire [6:0] segmento0;
wire [6:0] segmento1;
wire [6:0] segmento2;
wire [6:0] segmento3;

wire sampler;                             

// assign statements (if any)                          
assign n1 = treg_n1;
assign n2 = treg_n2;
assign n3 = treg_n3;
assign n4 = treg_n4;
mostrar i1 (
// port map - connection between master ports and signals/registers   
	.boton(boton),
	.n1(n1),
	.n2(n2),
	.n3(n3),
	.n4(n4),
	.numeroVector(numeroVector),
	.segmento0(segmento0),
	.segmento1(segmento1),
	.segmento2(segmento2),
	.segmento3(segmento3)
);

// boton
always
begin
	boton = 1'b0;
	boton = #10000 1'b1;
	#10000;
end 
// n1[ 31 ]
initial
begin
	treg_n1[31] = 1'bZ;
end 
// n1[ 30 ]
initial
begin
	treg_n1[30] = 1'bZ;
end 
// n1[ 29 ]
initial
begin
	treg_n1[29] = 1'bZ;
end 
// n1[ 28 ]
initial
begin
	treg_n1[28] = 1'bZ;
end 
// n1[ 27 ]
initial
begin
	treg_n1[27] = 1'bZ;
end 
// n1[ 26 ]
initial
begin
	treg_n1[26] = 1'bZ;
end 
// n1[ 25 ]
initial
begin
	treg_n1[25] = 1'bZ;
end 
// n1[ 24 ]
initial
begin
	treg_n1[24] = 1'bZ;
end 
// n1[ 23 ]
initial
begin
	treg_n1[23] = 1'bZ;
end 
// n1[ 22 ]
initial
begin
	treg_n1[22] = 1'bZ;
end 
// n1[ 21 ]
initial
begin
	treg_n1[21] = 1'bZ;
end 
// n1[ 20 ]
initial
begin
	treg_n1[20] = 1'bZ;
end 
// n1[ 19 ]
initial
begin
	treg_n1[19] = 1'bZ;
end 
// n1[ 18 ]
initial
begin
	treg_n1[18] = 1'bZ;
end 
// n1[ 17 ]
initial
begin
	treg_n1[17] = 1'bZ;
end 
// n1[ 16 ]
initial
begin
	treg_n1[16] = 1'bZ;
end 
// n1[ 15 ]
initial
begin
	treg_n1[15] = 1'bZ;
end 
// n1[ 14 ]
initial
begin
	treg_n1[14] = 1'bZ;
end 
// n1[ 13 ]
initial
begin
	treg_n1[13] = 1'bZ;
end 
// n1[ 12 ]
initial
begin
	treg_n1[12] = 1'bZ;
end 
// n1[ 11 ]
initial
begin
	treg_n1[11] = 1'bZ;
end 
// n1[ 10 ]
initial
begin
	treg_n1[10] = 1'bZ;
end 
// n1[ 9 ]
initial
begin
	treg_n1[9] = 1'bZ;
end 
// n1[ 8 ]
initial
begin
	treg_n1[8] = 1'bZ;
end 
// n1[ 7 ]
initial
begin
	treg_n1[7] = 1'bZ;
end 
// n1[ 6 ]
initial
begin
	treg_n1[6] = 1'bZ;
end 
// n1[ 5 ]
initial
begin
	treg_n1[5] = 1'bZ;
end 
// n1[ 4 ]
initial
begin
	treg_n1[4] = 1'bZ;
end 
// n1[ 3 ]
initial
begin
	treg_n1[3] = 1'bZ;
end 
// n1[ 2 ]
initial
begin
	treg_n1[2] = 1'bZ;
end 
// n1[ 1 ]
initial
begin
	treg_n1[1] = 1'bZ;
end 
// n1[ 0 ]
initial
begin
	treg_n1[0] = 1'bZ;
end 
// n2[ 31 ]
initial
begin
	treg_n2[31] = 1'bZ;
end 
// n2[ 30 ]
initial
begin
	treg_n2[30] = 1'bZ;
end 
// n2[ 29 ]
initial
begin
	treg_n2[29] = 1'bZ;
end 
// n2[ 28 ]
initial
begin
	treg_n2[28] = 1'bZ;
end 
// n2[ 27 ]
initial
begin
	treg_n2[27] = 1'bZ;
end 
// n2[ 26 ]
initial
begin
	treg_n2[26] = 1'bZ;
end 
// n2[ 25 ]
initial
begin
	treg_n2[25] = 1'bZ;
end 
// n2[ 24 ]
initial
begin
	treg_n2[24] = 1'bZ;
end 
// n2[ 23 ]
initial
begin
	treg_n2[23] = 1'bZ;
end 
// n2[ 22 ]
initial
begin
	treg_n2[22] = 1'bZ;
end 
// n2[ 21 ]
initial
begin
	treg_n2[21] = 1'bZ;
end 
// n2[ 20 ]
initial
begin
	treg_n2[20] = 1'bZ;
end 
// n2[ 19 ]
initial
begin
	treg_n2[19] = 1'bZ;
end 
// n2[ 18 ]
initial
begin
	treg_n2[18] = 1'bZ;
end 
// n2[ 17 ]
initial
begin
	treg_n2[17] = 1'bZ;
end 
// n2[ 16 ]
initial
begin
	treg_n2[16] = 1'bZ;
end 
// n2[ 15 ]
initial
begin
	treg_n2[15] = 1'bZ;
end 
// n2[ 14 ]
initial
begin
	treg_n2[14] = 1'bZ;
end 
// n2[ 13 ]
initial
begin
	treg_n2[13] = 1'bZ;
end 
// n2[ 12 ]
initial
begin
	treg_n2[12] = 1'bZ;
end 
// n2[ 11 ]
initial
begin
	treg_n2[11] = 1'bZ;
end 
// n2[ 10 ]
initial
begin
	treg_n2[10] = 1'bZ;
end 
// n2[ 9 ]
initial
begin
	treg_n2[9] = 1'bZ;
end 
// n2[ 8 ]
initial
begin
	treg_n2[8] = 1'bZ;
end 
// n2[ 7 ]
initial
begin
	treg_n2[7] = 1'bZ;
end 
// n2[ 6 ]
initial
begin
	treg_n2[6] = 1'bZ;
end 
// n2[ 5 ]
initial
begin
	treg_n2[5] = 1'bZ;
end 
// n2[ 4 ]
initial
begin
	treg_n2[4] = 1'bZ;
end 
// n2[ 3 ]
initial
begin
	treg_n2[3] = 1'bZ;
end 
// n2[ 2 ]
initial
begin
	treg_n2[2] = 1'bZ;
end 
// n2[ 1 ]
initial
begin
	treg_n2[1] = 1'bZ;
end 
// n2[ 0 ]
initial
begin
	treg_n2[0] = 1'bZ;
end 
// n3[ 31 ]
initial
begin
	treg_n3[31] = 1'bZ;
end 
// n3[ 30 ]
initial
begin
	treg_n3[30] = 1'bZ;
end 
// n3[ 29 ]
initial
begin
	treg_n3[29] = 1'bZ;
end 
// n3[ 28 ]
initial
begin
	treg_n3[28] = 1'bZ;
end 
// n3[ 27 ]
initial
begin
	treg_n3[27] = 1'bZ;
end 
// n3[ 26 ]
initial
begin
	treg_n3[26] = 1'bZ;
end 
// n3[ 25 ]
initial
begin
	treg_n3[25] = 1'bZ;
end 
// n3[ 24 ]
initial
begin
	treg_n3[24] = 1'bZ;
end 
// n3[ 23 ]
initial
begin
	treg_n3[23] = 1'bZ;
end 
// n3[ 22 ]
initial
begin
	treg_n3[22] = 1'bZ;
end 
// n3[ 21 ]
initial
begin
	treg_n3[21] = 1'bZ;
end 
// n3[ 20 ]
initial
begin
	treg_n3[20] = 1'bZ;
end 
// n3[ 19 ]
initial
begin
	treg_n3[19] = 1'bZ;
end 
// n3[ 18 ]
initial
begin
	treg_n3[18] = 1'bZ;
end 
// n3[ 17 ]
initial
begin
	treg_n3[17] = 1'bZ;
end 
// n3[ 16 ]
initial
begin
	treg_n3[16] = 1'bZ;
end 
// n3[ 15 ]
initial
begin
	treg_n3[15] = 1'bZ;
end 
// n3[ 14 ]
initial
begin
	treg_n3[14] = 1'bZ;
end 
// n3[ 13 ]
initial
begin
	treg_n3[13] = 1'bZ;
end 
// n3[ 12 ]
initial
begin
	treg_n3[12] = 1'bZ;
end 
// n3[ 11 ]
initial
begin
	treg_n3[11] = 1'bZ;
end 
// n3[ 10 ]
initial
begin
	treg_n3[10] = 1'bZ;
end 
// n3[ 9 ]
initial
begin
	treg_n3[9] = 1'bZ;
end 
// n3[ 8 ]
initial
begin
	treg_n3[8] = 1'bZ;
end 
// n3[ 7 ]
initial
begin
	treg_n3[7] = 1'bZ;
end 
// n3[ 6 ]
initial
begin
	treg_n3[6] = 1'bZ;
end 
// n3[ 5 ]
initial
begin
	treg_n3[5] = 1'bZ;
end 
// n3[ 4 ]
initial
begin
	treg_n3[4] = 1'bZ;
end 
// n3[ 3 ]
initial
begin
	treg_n3[3] = 1'bZ;
end 
// n3[ 2 ]
initial
begin
	treg_n3[2] = 1'bZ;
end 
// n3[ 1 ]
initial
begin
	treg_n3[1] = 1'bZ;
end 
// n3[ 0 ]
initial
begin
	treg_n3[0] = 1'bZ;
end 
// n4[ 31 ]
initial
begin
	treg_n4[31] = 1'bZ;
end 
// n4[ 30 ]
initial
begin
	treg_n4[30] = 1'bZ;
end 
// n4[ 29 ]
initial
begin
	treg_n4[29] = 1'bZ;
end 
// n4[ 28 ]
initial
begin
	treg_n4[28] = 1'bZ;
end 
// n4[ 27 ]
initial
begin
	treg_n4[27] = 1'bZ;
end 
// n4[ 26 ]
initial
begin
	treg_n4[26] = 1'bZ;
end 
// n4[ 25 ]
initial
begin
	treg_n4[25] = 1'bZ;
end 
// n4[ 24 ]
initial
begin
	treg_n4[24] = 1'bZ;
end 
// n4[ 23 ]
initial
begin
	treg_n4[23] = 1'bZ;
end 
// n4[ 22 ]
initial
begin
	treg_n4[22] = 1'bZ;
end 
// n4[ 21 ]
initial
begin
	treg_n4[21] = 1'bZ;
end 
// n4[ 20 ]
initial
begin
	treg_n4[20] = 1'bZ;
end 
// n4[ 19 ]
initial
begin
	treg_n4[19] = 1'bZ;
end 
// n4[ 18 ]
initial
begin
	treg_n4[18] = 1'bZ;
end 
// n4[ 17 ]
initial
begin
	treg_n4[17] = 1'bZ;
end 
// n4[ 16 ]
initial
begin
	treg_n4[16] = 1'bZ;
end 
// n4[ 15 ]
initial
begin
	treg_n4[15] = 1'bZ;
end 
// n4[ 14 ]
initial
begin
	treg_n4[14] = 1'bZ;
end 
// n4[ 13 ]
initial
begin
	treg_n4[13] = 1'bZ;
end 
// n4[ 12 ]
initial
begin
	treg_n4[12] = 1'bZ;
end 
// n4[ 11 ]
initial
begin
	treg_n4[11] = 1'bZ;
end 
// n4[ 10 ]
initial
begin
	treg_n4[10] = 1'bZ;
end 
// n4[ 9 ]
initial
begin
	treg_n4[9] = 1'bZ;
end 
// n4[ 8 ]
initial
begin
	treg_n4[8] = 1'bZ;
end 
// n4[ 7 ]
initial
begin
	treg_n4[7] = 1'bZ;
end 
// n4[ 6 ]
initial
begin
	treg_n4[6] = 1'bZ;
end 
// n4[ 5 ]
initial
begin
	treg_n4[5] = 1'bZ;
end 
// n4[ 4 ]
initial
begin
	treg_n4[4] = 1'bZ;
end 
// n4[ 3 ]
initial
begin
	treg_n4[3] = 1'bZ;
end 
// n4[ 2 ]
initial
begin
	treg_n4[2] = 1'bZ;
end 
// n4[ 1 ]
initial
begin
	treg_n4[1] = 1'bZ;
end 
// n4[ 0 ]
initial
begin
	treg_n4[0] = 1'bZ;
end 
// numeroVector[ 13 ]
initial
begin
	numeroVector[13] = 1'b1;
end 
// numeroVector[ 12 ]
initial
begin
	numeroVector[12] = 1'b0;
end 
// numeroVector[ 11 ]
initial
begin
	numeroVector[11] = 1'b0;
end 
// numeroVector[ 10 ]
initial
begin
	numeroVector[10] = 1'b1;
end 
// numeroVector[ 9 ]
initial
begin
	numeroVector[9] = 1'b0;
end 
// numeroVector[ 8 ]
initial
begin
	numeroVector[8] = 1'b0;
end 
// numeroVector[ 7 ]
initial
begin
	numeroVector[7] = 1'b0;
end 
// numeroVector[ 6 ]
initial
begin
	numeroVector[6] = 1'b1;
end 
// numeroVector[ 5 ]
initial
begin
	numeroVector[5] = 1'b1;
end 
// numeroVector[ 4 ]
initial
begin
	numeroVector[4] = 1'b0;
end 
// numeroVector[ 3 ]
initial
begin
	numeroVector[3] = 1'b0;
end 
// numeroVector[ 2 ]
initial
begin
	numeroVector[2] = 1'b0;
end 
// numeroVector[ 1 ]
initial
begin
	numeroVector[1] = 1'b0;
end 
// numeroVector[ 0 ]
initial
begin
	numeroVector[0] = 1'b0;
end 

mostrar_vlg_sample_tst tb_sample (
	.boton(boton),
	.n1(n1),
	.n2(n2),
	.n3(n3),
	.n4(n4),
	.numeroVector(numeroVector),
	.sampler_tx(sampler)
);

mostrar_vlg_check_tst tb_out(
	.n1(n1),
	.n2(n2),
	.n3(n3),
	.n4(n4),
	.segmento0(segmento0),
	.segmento1(segmento1),
	.segmento2(segmento2),
	.segmento3(segmento3),
	.sampler_rx(sampler)
);
endmodule

