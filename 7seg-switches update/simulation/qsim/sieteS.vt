// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2018 13:05:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sieteS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sieteS_vlg_sample_tst(
	clk,
	switches,
	switches1,
	switches2,
	sampler_tx
);
input  clk;
input [3:0] switches;
input [3:0] switches1;
input [1:0] switches2;
output sampler_tx;

reg sample;
time current_time;
always @(clk or switches or switches1 or switches2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sieteS_vlg_check_tst (
	Output,
	SS0,
	SS1,
	SS2,
	SS3,
	sampler_rx
);
input [13:0] Output;
input [6:0] SS0;
input [6:0] SS1;
input [6:0] SS2;
input [6:0] SS3;
input sampler_rx;

reg [13:0] Output_expected;
reg [6:0] SS0_expected;
reg [6:0] SS1_expected;
reg [6:0] SS2_expected;
reg [6:0] SS3_expected;

reg [13:0] Output_prev;
reg [6:0] SS0_prev;
reg [6:0] SS1_prev;
reg [6:0] SS2_prev;
reg [6:0] SS3_prev;

reg [13:0] Output_expected_prev;
reg [6:0] SS0_expected_prev;
reg [6:0] SS1_expected_prev;
reg [6:0] SS2_expected_prev;
reg [6:0] SS3_expected_prev;

reg [13:0] last_Output_exp;
reg [6:0] last_SS0_exp;
reg [6:0] last_SS1_exp;
reg [6:0] last_SS2_exp;
reg [6:0] last_SS3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Output_prev = Output;
	SS0_prev = SS0;
	SS1_prev = SS1;
	SS2_prev = SS2;
	SS3_prev = SS3;
end

// update expected /o prevs

always @(trigger)
begin
	Output_expected_prev = Output_expected;
	SS0_expected_prev = SS0_expected;
	SS1_expected_prev = SS1_expected;
	SS2_expected_prev = SS2_expected;
	SS3_expected_prev = SS3_expected;
end


// expected SS3[ 6 ]
initial
begin
	SS3_expected[6] = 1'bX;
end 
// expected SS3[ 5 ]
initial
begin
	SS3_expected[5] = 1'bX;
end 
// expected SS3[ 4 ]
initial
begin
	SS3_expected[4] = 1'bX;
end 
// expected SS3[ 3 ]
initial
begin
	SS3_expected[3] = 1'bX;
end 
// expected SS3[ 2 ]
initial
begin
	SS3_expected[2] = 1'bX;
end 
// expected SS3[ 1 ]
initial
begin
	SS3_expected[1] = 1'bX;
end 
// expected SS3[ 0 ]
initial
begin
	SS3_expected[0] = 1'bX;
end 
// expected SS2[ 6 ]
initial
begin
	SS2_expected[6] = 1'bX;
end 
// expected SS2[ 5 ]
initial
begin
	SS2_expected[5] = 1'bX;
end 
// expected SS2[ 4 ]
initial
begin
	SS2_expected[4] = 1'bX;
end 
// expected SS2[ 3 ]
initial
begin
	SS2_expected[3] = 1'bX;
end 
// expected SS2[ 2 ]
initial
begin
	SS2_expected[2] = 1'bX;
end 
// expected SS2[ 1 ]
initial
begin
	SS2_expected[1] = 1'bX;
end 
// expected SS2[ 0 ]
initial
begin
	SS2_expected[0] = 1'bX;
end 
// expected SS1[ 6 ]
initial
begin
	SS1_expected[6] = 1'bX;
end 
// expected SS1[ 5 ]
initial
begin
	SS1_expected[5] = 1'bX;
end 
// expected SS1[ 4 ]
initial
begin
	SS1_expected[4] = 1'bX;
end 
// expected SS1[ 3 ]
initial
begin
	SS1_expected[3] = 1'bX;
end 
// expected SS1[ 2 ]
initial
begin
	SS1_expected[2] = 1'bX;
end 
// expected SS1[ 1 ]
initial
begin
	SS1_expected[1] = 1'bX;
end 
// expected SS1[ 0 ]
initial
begin
	SS1_expected[0] = 1'bX;
end 
// expected SS0[ 6 ]
initial
begin
	SS0_expected[6] = 1'bX;
end 
// expected SS0[ 5 ]
initial
begin
	SS0_expected[5] = 1'bX;
end 
// expected SS0[ 4 ]
initial
begin
	SS0_expected[4] = 1'bX;
end 
// expected SS0[ 3 ]
initial
begin
	SS0_expected[3] = 1'bX;
end 
// expected SS0[ 2 ]
initial
begin
	SS0_expected[2] = 1'bX;
end 
// expected SS0[ 1 ]
initial
begin
	SS0_expected[1] = 1'bX;
end 
// expected SS0[ 0 ]
initial
begin
	SS0_expected[0] = 1'bX;
end 
// expected \Output [ 13 ]
initial
begin
	Output_expected[13] = 1'bX;
end 
// expected \Output [ 12 ]
initial
begin
	Output_expected[12] = 1'bX;
end 
// expected \Output [ 11 ]
initial
begin
	Output_expected[11] = 1'bX;
end 
// expected \Output [ 10 ]
initial
begin
	Output_expected[10] = 1'bX;
end 
// expected \Output [ 9 ]
initial
begin
	Output_expected[9] = 1'bX;
end 
// expected \Output [ 8 ]
initial
begin
	Output_expected[8] = 1'bX;
end 
// expected \Output [ 7 ]
initial
begin
	Output_expected[7] = 1'bX;
end 
// expected \Output [ 6 ]
initial
begin
	Output_expected[6] = 1'bX;
end 
// expected \Output [ 5 ]
initial
begin
	Output_expected[5] = 1'bX;
end 
// expected \Output [ 4 ]
initial
begin
	Output_expected[4] = 1'bX;
end 
// expected \Output [ 3 ]
initial
begin
	Output_expected[3] = 1'bX;
end 
// expected \Output [ 2 ]
initial
begin
	Output_expected[2] = 1'bX;
end 
// expected \Output [ 1 ]
initial
begin
	Output_expected[1] = 1'bX;
end 
// expected \Output [ 0 ]
initial
begin
	Output_expected[0] = 1'bX;
end 
// generate trigger
always @(Output_expected or Output or SS0_expected or SS0 or SS1_expected or SS1 or SS2_expected or SS2 or SS3_expected or SS3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Output = %b | expected SS0 = %b | expected SS1 = %b | expected SS2 = %b | expected SS3 = %b | ",Output_expected_prev,SS0_expected_prev,SS1_expected_prev,SS2_expected_prev,SS3_expected_prev);
	$display("| real Output = %b | real SS0 = %b | real SS1 = %b | real SS2 = %b | real SS3 = %b | ",Output_prev,SS0_prev,SS1_prev,SS2_prev,SS3_prev);
`endif
	if (
		( Output_expected_prev[0] !== 1'bx ) && ( Output_prev[0] !== Output_expected_prev[0] )
		&& ((Output_expected_prev[0] !== last_Output_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[0] = Output_expected_prev[0];
	end
	if (
		( Output_expected_prev[1] !== 1'bx ) && ( Output_prev[1] !== Output_expected_prev[1] )
		&& ((Output_expected_prev[1] !== last_Output_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[1] = Output_expected_prev[1];
	end
	if (
		( Output_expected_prev[2] !== 1'bx ) && ( Output_prev[2] !== Output_expected_prev[2] )
		&& ((Output_expected_prev[2] !== last_Output_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[2] = Output_expected_prev[2];
	end
	if (
		( Output_expected_prev[3] !== 1'bx ) && ( Output_prev[3] !== Output_expected_prev[3] )
		&& ((Output_expected_prev[3] !== last_Output_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[3] = Output_expected_prev[3];
	end
	if (
		( Output_expected_prev[4] !== 1'bx ) && ( Output_prev[4] !== Output_expected_prev[4] )
		&& ((Output_expected_prev[4] !== last_Output_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[4] = Output_expected_prev[4];
	end
	if (
		( Output_expected_prev[5] !== 1'bx ) && ( Output_prev[5] !== Output_expected_prev[5] )
		&& ((Output_expected_prev[5] !== last_Output_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[5] = Output_expected_prev[5];
	end
	if (
		( Output_expected_prev[6] !== 1'bx ) && ( Output_prev[6] !== Output_expected_prev[6] )
		&& ((Output_expected_prev[6] !== last_Output_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[6] = Output_expected_prev[6];
	end
	if (
		( Output_expected_prev[7] !== 1'bx ) && ( Output_prev[7] !== Output_expected_prev[7] )
		&& ((Output_expected_prev[7] !== last_Output_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[7] = Output_expected_prev[7];
	end
	if (
		( Output_expected_prev[8] !== 1'bx ) && ( Output_prev[8] !== Output_expected_prev[8] )
		&& ((Output_expected_prev[8] !== last_Output_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[8] = Output_expected_prev[8];
	end
	if (
		( Output_expected_prev[9] !== 1'bx ) && ( Output_prev[9] !== Output_expected_prev[9] )
		&& ((Output_expected_prev[9] !== last_Output_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[9] = Output_expected_prev[9];
	end
	if (
		( Output_expected_prev[10] !== 1'bx ) && ( Output_prev[10] !== Output_expected_prev[10] )
		&& ((Output_expected_prev[10] !== last_Output_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[10] = Output_expected_prev[10];
	end
	if (
		( Output_expected_prev[11] !== 1'bx ) && ( Output_prev[11] !== Output_expected_prev[11] )
		&& ((Output_expected_prev[11] !== last_Output_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[11] = Output_expected_prev[11];
	end
	if (
		( Output_expected_prev[12] !== 1'bx ) && ( Output_prev[12] !== Output_expected_prev[12] )
		&& ((Output_expected_prev[12] !== last_Output_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[12] = Output_expected_prev[12];
	end
	if (
		( Output_expected_prev[13] !== 1'bx ) && ( Output_prev[13] !== Output_expected_prev[13] )
		&& ((Output_expected_prev[13] !== last_Output_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[13] = Output_expected_prev[13];
	end
	if (
		( SS0_expected_prev[0] !== 1'bx ) && ( SS0_prev[0] !== SS0_expected_prev[0] )
		&& ((SS0_expected_prev[0] !== last_SS0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SS0_exp[0] = SS0_expected_prev[0];
	end
	if (
		( SS0_expected_prev[1] !== 1'bx ) && ( SS0_prev[1] !== SS0_expected_prev[1] )
		&& ((SS0_expected_prev[1] !== last_SS0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SS0_exp[1] = SS0_expected_prev[1];
	end
	if (
		( SS0_expected_prev[2] !== 1'bx ) && ( SS0_prev[2] !== SS0_expected_prev[2] )
		&& ((SS0_expected_prev[2] !== last_SS0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SS0_exp[2] = SS0_expected_prev[2];
	end
	if (
		( SS0_expected_prev[3] !== 1'bx ) && ( SS0_prev[3] !== SS0_expected_prev[3] )
		&& ((SS0_expected_prev[3] !== last_SS0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SS0_exp[3] = SS0_expected_prev[3];
	end
	if (
		( SS0_expected_prev[4] !== 1'bx ) && ( SS0_prev[4] !== SS0_expected_prev[4] )
		&& ((SS0_expected_prev[4] !== last_SS0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SS0_exp[4] = SS0_expected_prev[4];
	end
	if (
		( SS0_expected_prev[5] !== 1'bx ) && ( SS0_prev[5] !== SS0_expected_prev[5] )
		&& ((SS0_expected_prev[5] !== last_SS0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SS0_exp[5] = SS0_expected_prev[5];
	end
	if (
		( SS0_expected_prev[6] !== 1'bx ) && ( SS0_prev[6] !== SS0_expected_prev[6] )
		&& ((SS0_expected_prev[6] !== last_SS0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS0_expected_prev);
		$display ("     Real value = %b", SS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SS0_exp[6] = SS0_expected_prev[6];
	end
	if (
		( SS1_expected_prev[0] !== 1'bx ) && ( SS1_prev[0] !== SS1_expected_prev[0] )
		&& ((SS1_expected_prev[0] !== last_SS1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SS1_exp[0] = SS1_expected_prev[0];
	end
	if (
		( SS1_expected_prev[1] !== 1'bx ) && ( SS1_prev[1] !== SS1_expected_prev[1] )
		&& ((SS1_expected_prev[1] !== last_SS1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SS1_exp[1] = SS1_expected_prev[1];
	end
	if (
		( SS1_expected_prev[2] !== 1'bx ) && ( SS1_prev[2] !== SS1_expected_prev[2] )
		&& ((SS1_expected_prev[2] !== last_SS1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SS1_exp[2] = SS1_expected_prev[2];
	end
	if (
		( SS1_expected_prev[3] !== 1'bx ) && ( SS1_prev[3] !== SS1_expected_prev[3] )
		&& ((SS1_expected_prev[3] !== last_SS1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SS1_exp[3] = SS1_expected_prev[3];
	end
	if (
		( SS1_expected_prev[4] !== 1'bx ) && ( SS1_prev[4] !== SS1_expected_prev[4] )
		&& ((SS1_expected_prev[4] !== last_SS1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SS1_exp[4] = SS1_expected_prev[4];
	end
	if (
		( SS1_expected_prev[5] !== 1'bx ) && ( SS1_prev[5] !== SS1_expected_prev[5] )
		&& ((SS1_expected_prev[5] !== last_SS1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SS1_exp[5] = SS1_expected_prev[5];
	end
	if (
		( SS1_expected_prev[6] !== 1'bx ) && ( SS1_prev[6] !== SS1_expected_prev[6] )
		&& ((SS1_expected_prev[6] !== last_SS1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SS1_exp[6] = SS1_expected_prev[6];
	end
	if (
		( SS2_expected_prev[0] !== 1'bx ) && ( SS2_prev[0] !== SS2_expected_prev[0] )
		&& ((SS2_expected_prev[0] !== last_SS2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SS2_exp[0] = SS2_expected_prev[0];
	end
	if (
		( SS2_expected_prev[1] !== 1'bx ) && ( SS2_prev[1] !== SS2_expected_prev[1] )
		&& ((SS2_expected_prev[1] !== last_SS2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SS2_exp[1] = SS2_expected_prev[1];
	end
	if (
		( SS2_expected_prev[2] !== 1'bx ) && ( SS2_prev[2] !== SS2_expected_prev[2] )
		&& ((SS2_expected_prev[2] !== last_SS2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SS2_exp[2] = SS2_expected_prev[2];
	end
	if (
		( SS2_expected_prev[3] !== 1'bx ) && ( SS2_prev[3] !== SS2_expected_prev[3] )
		&& ((SS2_expected_prev[3] !== last_SS2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SS2_exp[3] = SS2_expected_prev[3];
	end
	if (
		( SS2_expected_prev[4] !== 1'bx ) && ( SS2_prev[4] !== SS2_expected_prev[4] )
		&& ((SS2_expected_prev[4] !== last_SS2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SS2_exp[4] = SS2_expected_prev[4];
	end
	if (
		( SS2_expected_prev[5] !== 1'bx ) && ( SS2_prev[5] !== SS2_expected_prev[5] )
		&& ((SS2_expected_prev[5] !== last_SS2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SS2_exp[5] = SS2_expected_prev[5];
	end
	if (
		( SS2_expected_prev[6] !== 1'bx ) && ( SS2_prev[6] !== SS2_expected_prev[6] )
		&& ((SS2_expected_prev[6] !== last_SS2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SS2_exp[6] = SS2_expected_prev[6];
	end
	if (
		( SS3_expected_prev[0] !== 1'bx ) && ( SS3_prev[0] !== SS3_expected_prev[0] )
		&& ((SS3_expected_prev[0] !== last_SS3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS3_exp[0] = SS3_expected_prev[0];
	end
	if (
		( SS3_expected_prev[1] !== 1'bx ) && ( SS3_prev[1] !== SS3_expected_prev[1] )
		&& ((SS3_expected_prev[1] !== last_SS3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS3_exp[1] = SS3_expected_prev[1];
	end
	if (
		( SS3_expected_prev[2] !== 1'bx ) && ( SS3_prev[2] !== SS3_expected_prev[2] )
		&& ((SS3_expected_prev[2] !== last_SS3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS3_exp[2] = SS3_expected_prev[2];
	end
	if (
		( SS3_expected_prev[3] !== 1'bx ) && ( SS3_prev[3] !== SS3_expected_prev[3] )
		&& ((SS3_expected_prev[3] !== last_SS3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS3_exp[3] = SS3_expected_prev[3];
	end
	if (
		( SS3_expected_prev[4] !== 1'bx ) && ( SS3_prev[4] !== SS3_expected_prev[4] )
		&& ((SS3_expected_prev[4] !== last_SS3_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS3_exp[4] = SS3_expected_prev[4];
	end
	if (
		( SS3_expected_prev[5] !== 1'bx ) && ( SS3_prev[5] !== SS3_expected_prev[5] )
		&& ((SS3_expected_prev[5] !== last_SS3_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS3_exp[5] = SS3_expected_prev[5];
	end
	if (
		( SS3_expected_prev[6] !== 1'bx ) && ( SS3_prev[6] !== SS3_expected_prev[6] )
		&& ((SS3_expected_prev[6] !== last_SS3_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS3_exp[6] = SS3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sieteS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] switches;
reg [3:0] switches1;
reg [1:0] switches2;
// wires                                               
wire [13:0] Output;
wire [6:0] SS0;
wire [6:0] SS1;
wire [6:0] SS2;
wire [6:0] SS3;

wire sampler;                             

// assign statements (if any)                          
sieteS i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.\Output (Output),
	.SS0(SS0),
	.SS1(SS1),
	.SS2(SS2),
	.SS3(SS3),
	.switches(switches),
	.switches1(switches1),
	.switches2(switches2)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
end 
// switches1[ 3 ]
initial
begin
	switches1[3] = 1'b0;
	switches1[3] = #160000 1'b1;
	switches1[3] = #480000 1'b0;
end 
// switches1[ 2 ]
initial
begin
	switches1[2] = 1'b0;
end 
// switches1[ 1 ]
initial
begin
	switches1[1] = 1'b0;
end 
// switches1[ 0 ]
initial
begin
	switches1[0] = 1'b0;
end 
// switches2[ 1 ]
initial
begin
	switches2[1] = 1'b0;
	switches2[1] = #160000 1'b1;
	switches2[1] = #480000 1'b0;
	switches2[1] = #130000 1'b1;
end 
// switches2[ 0 ]
initial
begin
	switches2[0] = 1'b0;
	switches2[0] = #160000 1'b1;
	switches2[0] = #480000 1'b0;
	switches2[0] = #130000 1'b1;
end 

sieteS_vlg_sample_tst tb_sample (
	.clk(clk),
	.switches(switches),
	.switches1(switches1),
	.switches2(switches2),
	.sampler_tx(sampler)
);

sieteS_vlg_check_tst tb_out(
	.Output(Output),
	.SS0(SS0),
	.SS1(SS1),
	.SS2(SS2),
	.SS3(SS3),
	.sampler_rx(sampler)
);
endmodule

