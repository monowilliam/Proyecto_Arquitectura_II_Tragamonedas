// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2018 15:38:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    randomSegmento
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module randomSegmento_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module randomSegmento_vlg_check_tst (
	segmento1,
	segmento2,
	Segmento3,
	Segmento4,
	sampler_rx
);
input [6:0] segmento1;
input [6:0] segmento2;
input [6:0] Segmento3;
input [6:0] Segmento4;
input sampler_rx;

reg [6:0] segmento1_expected;
reg [6:0] segmento2_expected;
reg [6:0] Segmento3_expected;
reg [6:0] Segmento4_expected;

reg [6:0] segmento1_prev;
reg [6:0] segmento2_prev;
reg [6:0] Segmento3_prev;
reg [6:0] Segmento4_prev;

reg [6:0] segmento1_expected_prev;
reg [6:0] segmento2_expected_prev;
reg [6:0] Segmento3_expected_prev;
reg [6:0] Segmento4_expected_prev;

reg [6:0] last_segmento1_exp;
reg [6:0] last_segmento2_exp;
reg [6:0] last_Segmento3_exp;
reg [6:0] last_Segmento4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	segmento1_prev = segmento1;
	segmento2_prev = segmento2;
	Segmento3_prev = Segmento3;
	Segmento4_prev = Segmento4;
end

// update expected /o prevs

always @(trigger)
begin
	segmento1_expected_prev = segmento1_expected;
	segmento2_expected_prev = segmento2_expected;
	Segmento3_expected_prev = Segmento3_expected;
	Segmento4_expected_prev = Segmento4_expected;
end


// expected segmento1[ 6 ]
initial
begin
	segmento1_expected[6] = 1'bX;
end 
// expected segmento1[ 5 ]
initial
begin
	segmento1_expected[5] = 1'bX;
end 
// expected segmento1[ 4 ]
initial
begin
	segmento1_expected[4] = 1'bX;
end 
// expected segmento1[ 3 ]
initial
begin
	segmento1_expected[3] = 1'bX;
end 
// expected segmento1[ 2 ]
initial
begin
	segmento1_expected[2] = 1'bX;
end 
// expected segmento1[ 1 ]
initial
begin
	segmento1_expected[1] = 1'bX;
end 
// expected segmento1[ 0 ]
initial
begin
	segmento1_expected[0] = 1'bX;
end 
// expected segmento2[ 6 ]
initial
begin
	segmento2_expected[6] = 1'bX;
end 
// expected segmento2[ 5 ]
initial
begin
	segmento2_expected[5] = 1'bX;
end 
// expected segmento2[ 4 ]
initial
begin
	segmento2_expected[4] = 1'bX;
end 
// expected segmento2[ 3 ]
initial
begin
	segmento2_expected[3] = 1'bX;
end 
// expected segmento2[ 2 ]
initial
begin
	segmento2_expected[2] = 1'bX;
end 
// expected segmento2[ 1 ]
initial
begin
	segmento2_expected[1] = 1'bX;
end 
// expected segmento2[ 0 ]
initial
begin
	segmento2_expected[0] = 1'bX;
end 
// expected Segmento3[ 6 ]
initial
begin
	Segmento3_expected[6] = 1'bX;
end 
// expected Segmento3[ 5 ]
initial
begin
	Segmento3_expected[5] = 1'bX;
end 
// expected Segmento3[ 4 ]
initial
begin
	Segmento3_expected[4] = 1'bX;
end 
// expected Segmento3[ 3 ]
initial
begin
	Segmento3_expected[3] = 1'bX;
end 
// expected Segmento3[ 2 ]
initial
begin
	Segmento3_expected[2] = 1'bX;
end 
// expected Segmento3[ 1 ]
initial
begin
	Segmento3_expected[1] = 1'bX;
end 
// expected Segmento3[ 0 ]
initial
begin
	Segmento3_expected[0] = 1'bX;
end 
// expected Segmento4[ 6 ]
initial
begin
	Segmento4_expected[6] = 1'bX;
end 
// expected Segmento4[ 5 ]
initial
begin
	Segmento4_expected[5] = 1'bX;
end 
// expected Segmento4[ 4 ]
initial
begin
	Segmento4_expected[4] = 1'bX;
end 
// expected Segmento4[ 3 ]
initial
begin
	Segmento4_expected[3] = 1'bX;
end 
// expected Segmento4[ 2 ]
initial
begin
	Segmento4_expected[2] = 1'bX;
end 
// expected Segmento4[ 1 ]
initial
begin
	Segmento4_expected[1] = 1'bX;
end 
// expected Segmento4[ 0 ]
initial
begin
	Segmento4_expected[0] = 1'bX;
end 
// generate trigger
always @(segmento1_expected or segmento1 or segmento2_expected or segmento2 or Segmento3_expected or Segmento3 or Segmento4_expected or Segmento4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected segmento1 = %b | expected segmento2 = %b | expected Segmento3 = %b | expected Segmento4 = %b | ",segmento1_expected_prev,segmento2_expected_prev,Segmento3_expected_prev,Segmento4_expected_prev);
	$display("| real segmento1 = %b | real segmento2 = %b | real Segmento3 = %b | real Segmento4 = %b | ",segmento1_prev,segmento2_prev,Segmento3_prev,Segmento4_prev);
`endif
	if (
		( segmento1_expected_prev[0] !== 1'bx ) && ( segmento1_prev[0] !== segmento1_expected_prev[0] )
		&& ((segmento1_expected_prev[0] !== last_segmento1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmento1_exp[0] = segmento1_expected_prev[0];
	end
	if (
		( segmento1_expected_prev[1] !== 1'bx ) && ( segmento1_prev[1] !== segmento1_expected_prev[1] )
		&& ((segmento1_expected_prev[1] !== last_segmento1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmento1_exp[1] = segmento1_expected_prev[1];
	end
	if (
		( segmento1_expected_prev[2] !== 1'bx ) && ( segmento1_prev[2] !== segmento1_expected_prev[2] )
		&& ((segmento1_expected_prev[2] !== last_segmento1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmento1_exp[2] = segmento1_expected_prev[2];
	end
	if (
		( segmento1_expected_prev[3] !== 1'bx ) && ( segmento1_prev[3] !== segmento1_expected_prev[3] )
		&& ((segmento1_expected_prev[3] !== last_segmento1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmento1_exp[3] = segmento1_expected_prev[3];
	end
	if (
		( segmento1_expected_prev[4] !== 1'bx ) && ( segmento1_prev[4] !== segmento1_expected_prev[4] )
		&& ((segmento1_expected_prev[4] !== last_segmento1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmento1_exp[4] = segmento1_expected_prev[4];
	end
	if (
		( segmento1_expected_prev[5] !== 1'bx ) && ( segmento1_prev[5] !== segmento1_expected_prev[5] )
		&& ((segmento1_expected_prev[5] !== last_segmento1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmento1_exp[5] = segmento1_expected_prev[5];
	end
	if (
		( segmento1_expected_prev[6] !== 1'bx ) && ( segmento1_prev[6] !== segmento1_expected_prev[6] )
		&& ((segmento1_expected_prev[6] !== last_segmento1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento1_expected_prev);
		$display ("     Real value = %b", segmento1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmento1_exp[6] = segmento1_expected_prev[6];
	end
	if (
		( segmento2_expected_prev[0] !== 1'bx ) && ( segmento2_prev[0] !== segmento2_expected_prev[0] )
		&& ((segmento2_expected_prev[0] !== last_segmento2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmento2_exp[0] = segmento2_expected_prev[0];
	end
	if (
		( segmento2_expected_prev[1] !== 1'bx ) && ( segmento2_prev[1] !== segmento2_expected_prev[1] )
		&& ((segmento2_expected_prev[1] !== last_segmento2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmento2_exp[1] = segmento2_expected_prev[1];
	end
	if (
		( segmento2_expected_prev[2] !== 1'bx ) && ( segmento2_prev[2] !== segmento2_expected_prev[2] )
		&& ((segmento2_expected_prev[2] !== last_segmento2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmento2_exp[2] = segmento2_expected_prev[2];
	end
	if (
		( segmento2_expected_prev[3] !== 1'bx ) && ( segmento2_prev[3] !== segmento2_expected_prev[3] )
		&& ((segmento2_expected_prev[3] !== last_segmento2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmento2_exp[3] = segmento2_expected_prev[3];
	end
	if (
		( segmento2_expected_prev[4] !== 1'bx ) && ( segmento2_prev[4] !== segmento2_expected_prev[4] )
		&& ((segmento2_expected_prev[4] !== last_segmento2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmento2_exp[4] = segmento2_expected_prev[4];
	end
	if (
		( segmento2_expected_prev[5] !== 1'bx ) && ( segmento2_prev[5] !== segmento2_expected_prev[5] )
		&& ((segmento2_expected_prev[5] !== last_segmento2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmento2_exp[5] = segmento2_expected_prev[5];
	end
	if (
		( segmento2_expected_prev[6] !== 1'bx ) && ( segmento2_prev[6] !== segmento2_expected_prev[6] )
		&& ((segmento2_expected_prev[6] !== last_segmento2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmento2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmento2_expected_prev);
		$display ("     Real value = %b", segmento2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmento2_exp[6] = segmento2_expected_prev[6];
	end
	if (
		( Segmento3_expected_prev[0] !== 1'bx ) && ( Segmento3_prev[0] !== Segmento3_expected_prev[0] )
		&& ((Segmento3_expected_prev[0] !== last_Segmento3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento3_expected_prev);
		$display ("     Real value = %b", Segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Segmento3_exp[0] = Segmento3_expected_prev[0];
	end
	if (
		( Segmento3_expected_prev[1] !== 1'bx ) && ( Segmento3_prev[1] !== Segmento3_expected_prev[1] )
		&& ((Segmento3_expected_prev[1] !== last_Segmento3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento3_expected_prev);
		$display ("     Real value = %b", Segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Segmento3_exp[1] = Segmento3_expected_prev[1];
	end
	if (
		( Segmento3_expected_prev[2] !== 1'bx ) && ( Segmento3_prev[2] !== Segmento3_expected_prev[2] )
		&& ((Segmento3_expected_prev[2] !== last_Segmento3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento3_expected_prev);
		$display ("     Real value = %b", Segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Segmento3_exp[2] = Segmento3_expected_prev[2];
	end
	if (
		( Segmento3_expected_prev[3] !== 1'bx ) && ( Segmento3_prev[3] !== Segmento3_expected_prev[3] )
		&& ((Segmento3_expected_prev[3] !== last_Segmento3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento3_expected_prev);
		$display ("     Real value = %b", Segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Segmento3_exp[3] = Segmento3_expected_prev[3];
	end
	if (
		( Segmento3_expected_prev[4] !== 1'bx ) && ( Segmento3_prev[4] !== Segmento3_expected_prev[4] )
		&& ((Segmento3_expected_prev[4] !== last_Segmento3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento3_expected_prev);
		$display ("     Real value = %b", Segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Segmento3_exp[4] = Segmento3_expected_prev[4];
	end
	if (
		( Segmento3_expected_prev[5] !== 1'bx ) && ( Segmento3_prev[5] !== Segmento3_expected_prev[5] )
		&& ((Segmento3_expected_prev[5] !== last_Segmento3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento3_expected_prev);
		$display ("     Real value = %b", Segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Segmento3_exp[5] = Segmento3_expected_prev[5];
	end
	if (
		( Segmento3_expected_prev[6] !== 1'bx ) && ( Segmento3_prev[6] !== Segmento3_expected_prev[6] )
		&& ((Segmento3_expected_prev[6] !== last_Segmento3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento3_expected_prev);
		$display ("     Real value = %b", Segmento3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Segmento3_exp[6] = Segmento3_expected_prev[6];
	end
	if (
		( Segmento4_expected_prev[0] !== 1'bx ) && ( Segmento4_prev[0] !== Segmento4_expected_prev[0] )
		&& ((Segmento4_expected_prev[0] !== last_Segmento4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento4_expected_prev);
		$display ("     Real value = %b", Segmento4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Segmento4_exp[0] = Segmento4_expected_prev[0];
	end
	if (
		( Segmento4_expected_prev[1] !== 1'bx ) && ( Segmento4_prev[1] !== Segmento4_expected_prev[1] )
		&& ((Segmento4_expected_prev[1] !== last_Segmento4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento4_expected_prev);
		$display ("     Real value = %b", Segmento4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Segmento4_exp[1] = Segmento4_expected_prev[1];
	end
	if (
		( Segmento4_expected_prev[2] !== 1'bx ) && ( Segmento4_prev[2] !== Segmento4_expected_prev[2] )
		&& ((Segmento4_expected_prev[2] !== last_Segmento4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento4_expected_prev);
		$display ("     Real value = %b", Segmento4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Segmento4_exp[2] = Segmento4_expected_prev[2];
	end
	if (
		( Segmento4_expected_prev[3] !== 1'bx ) && ( Segmento4_prev[3] !== Segmento4_expected_prev[3] )
		&& ((Segmento4_expected_prev[3] !== last_Segmento4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento4_expected_prev);
		$display ("     Real value = %b", Segmento4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Segmento4_exp[3] = Segmento4_expected_prev[3];
	end
	if (
		( Segmento4_expected_prev[4] !== 1'bx ) && ( Segmento4_prev[4] !== Segmento4_expected_prev[4] )
		&& ((Segmento4_expected_prev[4] !== last_Segmento4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento4_expected_prev);
		$display ("     Real value = %b", Segmento4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Segmento4_exp[4] = Segmento4_expected_prev[4];
	end
	if (
		( Segmento4_expected_prev[5] !== 1'bx ) && ( Segmento4_prev[5] !== Segmento4_expected_prev[5] )
		&& ((Segmento4_expected_prev[5] !== last_Segmento4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento4_expected_prev);
		$display ("     Real value = %b", Segmento4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Segmento4_exp[5] = Segmento4_expected_prev[5];
	end
	if (
		( Segmento4_expected_prev[6] !== 1'bx ) && ( Segmento4_prev[6] !== Segmento4_expected_prev[6] )
		&& ((Segmento4_expected_prev[6] !== last_Segmento4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segmento4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segmento4_expected_prev);
		$display ("     Real value = %b", Segmento4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Segmento4_exp[6] = Segmento4_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module randomSegmento_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [6:0] segmento1;
wire [6:0] segmento2;
wire [6:0] Segmento3;
wire [6:0] Segmento4;

wire sampler;                             

// assign statements (if any)                          
randomSegmento i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.segmento1(segmento1),
	.segmento2(segmento2),
	.Segmento3(Segmento3),
	.Segmento4(Segmento4)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

randomSegmento_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

randomSegmento_vlg_check_tst tb_out(
	.segmento1(segmento1),
	.segmento2(segmento2),
	.Segmento3(Segmento3),
	.Segmento4(Segmento4),
	.sampler_rx(sampler)
);
endmodule

